(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('os'), require('tslib'), require('util'), require('url'), require('assert'), require('binary-search-bounds'), require('semaphore'), require('priorityqueuejs'), require('create-hmac'), require('https'), require('querystring'), require('tunnel')) :
    typeof define === 'function' && define.amd ? define(['exports', 'os', 'tslib', 'util', 'url', 'assert', 'binary-search-bounds', 'semaphore', 'priorityqueuejs', 'create-hmac', 'https', 'querystring', 'tunnel'], factory) :
    (factory((global.CosmosClient = {}),global.os,global.tslib_1,global.util,global.url,global.assert,global.bs,global.semaphore,global.PriorityQueue,global.createHmac,global.https,global.querystring,global.tunnel));
}(this, (function (exports,os,tslib_1,util,url,assert,bs,semaphore,PriorityQueue,createHmac,https,querystring,tunnel) { 'use strict';

    assert = assert && assert.hasOwnProperty('default') ? assert['default'] : assert;
    semaphore = semaphore && semaphore.hasOwnProperty('default') ? semaphore['default'] : semaphore;
    PriorityQueue = PriorityQueue && PriorityQueue.hasOwnProperty('default') ? PriorityQueue['default'] : PriorityQueue;
    createHmac = createHmac && createHmac.hasOwnProperty('default') ? createHmac['default'] : createHmac;
    var https__default = 'default' in https ? https['default'] : https;

    /** Determines the connection behavior of the CosmosClient. Note, we currently only support Gateway Mode. */
    (function (ConnectionMode) {
        /** Gateway mode talks to a intermediate gateway which handles the direct communicationi with your individual partitions. */
        ConnectionMode[ConnectionMode["Gateway"] = 0] = "Gateway";
    })(exports.ConnectionMode || (exports.ConnectionMode = {}));

    /**
     * Represents the Retry policy assocated with throttled requests in the Azure Cosmos DB database service.
     */
    class RetryOptions {
        constructor(
        /** Max number of retries to be performed for a request. Default value 9. */
        MaxRetryAttemptCount = 9, 
        /** Fixed retry interval in milliseconds to wait between each retry ignoring the retryAfter returned as part of the response. */
        FixedRetryIntervalInMilliseconds = 0, 
        /** Max wait time in seconds to wait for a request while the retries are happening. Default value 30 seconds. */
        MaxWaitTimeInSeconds = 30) {
            this.MaxRetryAttemptCount = MaxRetryAttemptCount;
            this.FixedRetryIntervalInMilliseconds = FixedRetryIntervalInMilliseconds;
            this.MaxWaitTimeInSeconds = MaxWaitTimeInSeconds;
        }
    }

    const Constants = {
        MediaTypes: {
            Any: "*/*",
            ImageJpeg: "image/jpeg",
            ImagePng: "image/png",
            Javascript: "application/x-javascript",
            Json: "application/json",
            OctetStream: "application/octet-stream",
            QueryJson: "application/query+json",
            SQL: "application/sql",
            TextHtml: "text/html",
            TextPlain: "text/plain",
            Xml: "application/xml"
        },
        HttpMethods: {
            Get: "GET",
            Post: "POST",
            Put: "PUT",
            Delete: "DELETE",
            Head: "HEAD",
            Options: "OPTIONS"
        },
        HttpHeaders: {
            Authorization: "authorization",
            ETag: "etag",
            MethodOverride: "X-HTTP-Method",
            Slug: "Slug",
            ContentType: "Content-Type",
            LastModified: "Last-Modified",
            ContentEncoding: "Content-Encoding",
            CharacterSet: "CharacterSet",
            UserAgent: "User-Agent",
            IfModifiedSince: "If-Modified-Since",
            IfMatch: "If-Match",
            IfNoneMatch: "If-None-Match",
            ContentLength: "Content-Length",
            AcceptEncoding: "Accept-Encoding",
            KeepAlive: "Keep-Alive",
            CacheControl: "Cache-Control",
            TransferEncoding: "Transfer-Encoding",
            ContentLanguage: "Content-Language",
            ContentLocation: "Content-Location",
            ContentMd5: "Content-Md5",
            ContentRange: "Content-Range",
            Accept: "Accept",
            AcceptCharset: "Accept-Charset",
            AcceptLanguage: "Accept-Language",
            IfRange: "If-Range",
            IfUnmodifiedSince: "If-Unmodified-Since",
            MaxForwards: "Max-Forwards",
            ProxyAuthorization: "Proxy-Authorization",
            AcceptRanges: "Accept-Ranges",
            ProxyAuthenticate: "Proxy-Authenticate",
            RetryAfter: "Retry-After",
            SetCookie: "Set-Cookie",
            WwwAuthenticate: "Www-Authenticate",
            Origin: "Origin",
            Host: "Host",
            AccessControlAllowOrigin: "Access-Control-Allow-Origin",
            AccessControlAllowHeaders: "Access-Control-Allow-Headers",
            KeyValueEncodingFormat: "application/x-www-form-urlencoded",
            WrapAssertionFormat: "wrap_assertion_format",
            WrapAssertion: "wrap_assertion",
            WrapScope: "wrap_scope",
            SimpleToken: "SWT",
            HttpDate: "date",
            Prefer: "Prefer",
            Location: "Location",
            Referer: "referer",
            A_IM: "A-IM",
            // Query
            Query: "x-ms-documentdb-query",
            IsQuery: "x-ms-documentdb-isquery",
            // Our custom Azure Cosmos DB headers
            Continuation: "x-ms-continuation",
            PageSize: "x-ms-max-item-count",
            // Request sender generated. Simply echoed by backend.
            ActivityId: "x-ms-activity-id",
            PreTriggerInclude: "x-ms-documentdb-pre-trigger-include",
            PreTriggerExclude: "x-ms-documentdb-pre-trigger-exclude",
            PostTriggerInclude: "x-ms-documentdb-post-trigger-include",
            PostTriggerExclude: "x-ms-documentdb-post-trigger-exclude",
            IndexingDirective: "x-ms-indexing-directive",
            SessionToken: "x-ms-session-token",
            ConsistencyLevel: "x-ms-consistency-level",
            XDate: "x-ms-date",
            CollectionPartitionInfo: "x-ms-collection-partition-info",
            CollectionServiceInfo: "x-ms-collection-service-info",
            RetryAfterInMilliseconds: "x-ms-retry-after-ms",
            IsFeedUnfiltered: "x-ms-is-feed-unfiltered",
            ResourceTokenExpiry: "x-ms-documentdb-expiry-seconds",
            EnableScanInQuery: "x-ms-documentdb-query-enable-scan",
            EmitVerboseTracesInQuery: "x-ms-documentdb-query-emit-traces",
            EnableCrossPartitionQuery: "x-ms-documentdb-query-enablecrosspartition",
            ParallelizeCrossPartitionQuery: "x-ms-documentdb-query-parallelizecrosspartitionquery",
            // QueryMetrics
            // Request header to tell backend to give you query metrics.
            PopulateQueryMetrics: "x-ms-documentdb-populatequerymetrics",
            // Response header that holds the serialized version of query metrics.
            QueryMetrics: "x-ms-documentdb-query-metrics",
            // Version headers and values
            Version: "x-ms-version",
            // Owner name
            OwnerFullName: "x-ms-alt-content-path",
            // Owner ID used for name based request in session token.
            OwnerId: "x-ms-content-path",
            // Partition Key
            PartitionKey: "x-ms-documentdb-partitionkey",
            PartitionKeyRangeID: "x-ms-documentdb-partitionkeyrangeid",
            // Quota Info
            MaxEntityCount: "x-ms-root-entity-max-count",
            CurrentEntityCount: "x-ms-root-entity-current-count",
            CollectionQuotaInMb: "x-ms-collection-quota-mb",
            CollectionCurrentUsageInMb: "x-ms-collection-usage-mb",
            MaxMediaStorageUsageInMB: "x-ms-max-media-storage-usage-mb",
            CurrentMediaStorageUsageInMB: "x-ms-media-storage-usage-mb",
            RequestCharge: "x-ms-request-charge",
            PopulateQuotaInfo: "x-ms-documentdb-populatequotainfo",
            MaxResourceQuota: "x-ms-resource-quota",
            // Offer header
            OfferType: "x-ms-offer-type",
            OfferThroughput: "x-ms-offer-throughput",
            // Custom RUs/minute headers
            DisableRUPerMinuteUsage: "x-ms-documentdb-disable-ru-per-minute-usage",
            IsRUPerMinuteUsed: "x-ms-documentdb-is-ru-per-minute-used",
            OfferIsRUPerMinuteThroughputEnabled: "x-ms-offer-is-ru-per-minute-throughput-enabled",
            // Index progress headers
            IndexTransformationProgress: "x-ms-documentdb-collection-index-transformation-progress",
            LazyIndexingProgress: "x-ms-documentdb-collection-lazy-indexing-progress",
            // Upsert header
            IsUpsert: "x-ms-documentdb-is-upsert",
            // Sub status of the error
            SubStatus: "x-ms-substatus",
            // StoredProcedure related headers
            EnableScriptLogging: "x-ms-documentdb-script-enable-logging",
            ScriptLogResults: "x-ms-documentdb-script-log-results",
            // Multi-Region Write
            ALLOW_MULTIPLE_WRITES: "x-ms-cosmos-allow-tentative-writes"
        },
        // GlobalDB related constants
        WritableLocations: "writableLocations",
        ReadableLocations: "readableLocations",
        Name: "name",
        DatabaseAccountEndpoint: "databaseAccountEndpoint",
        // ServiceDocument Resource
        ENABLE_MULTIPLE_WRITABLE_LOCATIONS: "enableMultipleWriteLocations",
        // Background refresh time
        DefaultUnavailableLocationExpirationTimeMS: 5 * 60 * 1000,
        // Client generated retry count response header
        ThrottleRetryCount: "x-ms-throttle-retry-count",
        ThrottleRetryWaitTimeInMs: "x-ms-throttle-retry-wait-time-ms",
        CurrentVersion: "2018-06-18",
        SDKName: "azure-cosmos-js",
        SDKVersion: "2.0.5",
        DefaultPrecisions: {
            DefaultNumberHashPrecision: 3,
            DefaultNumberRangePrecision: -1,
            DefaultStringHashPrecision: 3,
            DefaultStringRangePrecision: -1
        },
        ConsistentHashRing: {
            DefaultVirtualNodesPerCollection: 128
        },
        RegularExpressions: {
            TrimLeftSlashes: new RegExp("^[/]+"),
            TrimRightSlashes: new RegExp("[/]+$"),
            IllegalResourceIdCharacters: new RegExp("[/\\\\?#]")
        },
        Quota: {
            CollectionSize: "collectionSize"
        },
        Path: {
            DatabasesPathSegment: "dbs",
            CollectionsPathSegment: "colls",
            UsersPathSegment: "users",
            DocumentsPathSegment: "docs",
            PermissionsPathSegment: "permissions",
            StoredProceduresPathSegment: "sprocs",
            TriggersPathSegment: "triggers",
            UserDefinedFunctionsPathSegment: "udfs",
            ConflictsPathSegment: "conflicts",
            AttachmentsPathSegment: "attachments",
            PartitionKeyRangesPathSegment: "pkranges",
            SchemasPathSegment: "schemas",
            OffersPathSegment: "offers",
            TopologyPathSegment: "topology",
            DatabaseAccountPathSegment: "databaseaccount"
        },
        OperationTypes: {
            Create: "create",
            Replace: "replace",
            Upsert: "upsert",
            Delete: "delete",
            Read: "read",
            Query: "query",
            Execute: "execute"
        },
        PartitionKeyRange: {
            // Partition Key Range Constants
            MinInclusive: "minInclusive",
            MaxExclusive: "maxExclusive",
            Id: "id"
        },
        QueryRangeConstants: {
            // Partition Key Range Constants
            MinInclusive: "minInclusive",
            MaxExclusive: "maxExclusive",
            min: "min"
        },
        EffectiveParitionKeyConstants: {
            MinimumInclusiveEffectivePartitionKey: "",
            MaximumExclusiveEffectivePartitionKey: "FF"
        }
    };
    var ResourceType;
    (function (ResourceType) {
        ResourceType["database"] = "dbs";
        ResourceType["offer"] = "offers";
        ResourceType["user"] = "users";
        ResourceType["permission"] = "permissions";
        ResourceType["container"] = "colls";
        ResourceType["conflicts"] = "conflicts";
        ResourceType["sproc"] = "sprocs";
        ResourceType["udf"] = "udfs";
        ResourceType["trigger"] = "triggers";
        ResourceType["item"] = "docs";
    })(ResourceType || (ResourceType = {}));

    /** @hidden */
    const Regexes = Constants.RegularExpressions;
    /** @hidden */
    class Helper$$1 {
        static jsonStringifyAndEscapeNonASCII(arg) {
            // TODO: better way for this? Not sure.
            // escapes non-ASCII characters as \uXXXX
            return JSON.stringify(arg).replace(/[\u0080-\uFFFF]/g, m => {
                return "\\u" + ("0000" + m.charCodeAt(0).toString(16)).slice(-4);
            });
        }
        static parseLink(resourcePath) {
            if (resourcePath.length === 0) {
                /* for DatabaseAccount case, both type and objectBody will be undefined. */
                return {
                    type: undefined,
                    objectBody: undefined
                };
            }
            if (resourcePath[resourcePath.length - 1] !== "/") {
                resourcePath = resourcePath + "/";
            }
            if (resourcePath[0] !== "/") {
                resourcePath = "/" + resourcePath;
            }
            /*
                 The path will be in the form of /[resourceType]/[resourceId]/ ....
                 /[resourceType]//[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/
                 or /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/[resourceType]/[resourceId]/ ....
                  /[resourceType]/[resourceId]/
                 The result of split will be in the form of
                 [[[resourceType], [resourceId] ... ,[resourceType], [resourceId], ""]
                 In the first case, to extract the resourceId it will the element before last ( at length -2 )
                 and the type will be before it ( at length -3 )
                 In the second case, to extract the resource type it will the element before last ( at length -2 )
                */
            const pathParts = resourcePath.split("/");
            let id;
            let type;
            if (pathParts.length % 2 === 0) {
                // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId].
                id = pathParts[pathParts.length - 2];
                type = pathParts[pathParts.length - 3];
            }
            else {
                // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/.
                id = pathParts[pathParts.length - 3];
                type = pathParts[pathParts.length - 2];
            }
            const result = {
                type,
                objectBody: {
                    id,
                    self: resourcePath
                }
            };
            return result;
        }
        static isReadRequest(request) {
            return (request.operationType === Constants.OperationTypes.Read ||
                request.operationType === Constants.OperationTypes.Query);
        }
        static sleep(time) {
            return new Promise(resolve => {
                setTimeout(() => {
                    resolve();
                }, time);
            });
        }
        static getContainerLink(link) {
            return link
                .split("/")
                .slice(0, 4)
                .join("/");
        }
        static trimSlashes(source) {
            return source
                .replace(Constants.RegularExpressions.TrimLeftSlashes, "")
                .replace(Constants.RegularExpressions.TrimRightSlashes, "");
        }
        static getHexaDigit() {
            return Math.floor(Math.random() * 16).toString(16);
        }
        static setIsUpsertHeader(headers) {
            if (headers === undefined || headers === null) {
                throw new Error('The "headers" parameter must not be null or undefined');
            }
            if (!(headers instanceof Object)) {
                throw new Error(`The "headers" parameter must be an instance of "Object". Actual type is: "${typeof headers}".`);
            }
            headers[Constants.HttpHeaders.IsUpsert] = true;
        }
        // TODO: replace with well known library?
        static generateGuidId() {
            let id = "";
            for (let i = 0; i < 8; i++) {
                id += Helper$$1.getHexaDigit();
            }
            id += "-";
            for (let i = 0; i < 4; i++) {
                id += Helper$$1.getHexaDigit();
            }
            id += "-";
            for (let i = 0; i < 4; i++) {
                id += Helper$$1.getHexaDigit();
            }
            id += "-";
            for (let i = 0; i < 4; i++) {
                id += Helper$$1.getHexaDigit();
            }
            id += "-";
            for (let i = 0; i < 12; i++) {
                id += Helper$$1.getHexaDigit();
            }
            return id;
        }
        static parsePath(path) {
            const pathParts = [];
            let currentIndex = 0;
            const throwError = () => {
                throw new Error("Path " + path + " is invalid at index " + currentIndex);
            };
            const getEscapedToken = () => {
                const quote = path[currentIndex];
                let newIndex = ++currentIndex;
                while (true) {
                    newIndex = path.indexOf(quote, newIndex);
                    if (newIndex === -1) {
                        throwError();
                    }
                    if (path[newIndex - 1] !== "\\") {
                        break;
                    }
                    ++newIndex;
                }
                const token = path.substr(currentIndex, newIndex - currentIndex);
                currentIndex = newIndex + 1;
                return token;
            };
            const getToken = () => {
                const newIndex = path.indexOf("/", currentIndex);
                let token = null;
                if (newIndex === -1) {
                    token = path.substr(currentIndex);
                    currentIndex = path.length;
                }
                else {
                    token = path.substr(currentIndex, newIndex - currentIndex);
                    currentIndex = newIndex;
                }
                token = token.trim();
                return token;
            };
            while (currentIndex < path.length) {
                if (path[currentIndex] !== "/") {
                    throwError();
                }
                if (++currentIndex === path.length) {
                    break;
                }
                if (path[currentIndex] === '"' || path[currentIndex] === "'") {
                    pathParts.push(getEscapedToken());
                }
                else {
                    pathParts.push(getToken());
                }
            }
            return pathParts;
        }
        static isResourceValid(resource, err) {
            // TODO: any TODO: code smell
            if (resource.id) {
                if (typeof resource.id !== "string") {
                    err.message = "Id must be a string.";
                    return false;
                }
                if (resource.id.indexOf("/") !== -1 ||
                    resource.id.indexOf("\\") !== -1 ||
                    resource.id.indexOf("?") !== -1 ||
                    resource.id.indexOf("#") !== -1) {
                    err.message = "Id contains illegal chars.";
                    return false;
                }
                if (resource.id[resource.id.length - 1] === " ") {
                    err.message = "Id ends with a space.";
                    return false;
                }
            }
            return true;
        }
        /** @ignore */
        static getIdFromLink(resourceLink, isNameBased = true) {
            if (isNameBased) {
                resourceLink = Helper$$1.trimSlashes(resourceLink);
                return resourceLink;
            }
            else {
                return Helper$$1.parseLink(resourceLink).objectBody.id.toLowerCase();
            }
        }
        /** @ignore */
        static getPathFromLink(resourceLink, resourceType, isNameBased = true) {
            if (isNameBased) {
                resourceLink = Helper$$1.trimSlashes(resourceLink);
                if (resourceType) {
                    return "/" + encodeURI(resourceLink) + "/" + resourceType;
                }
                else {
                    return "/" + encodeURI(resourceLink);
                }
            }
            else {
                if (resourceType) {
                    return "/" + resourceLink + resourceType + "/";
                }
                else {
                    return "/" + resourceLink;
                }
            }
        }
        static isStringNullOrEmpty(inputString) {
            // checks whether string is null, undefined, empty or only contains space
            return !inputString || /^\s*$/.test(inputString);
        }
        static trimSlashFromLeftAndRight(inputString) {
            if (typeof inputString !== "string") {
                throw new Error("invalid input: input is not string");
            }
            return inputString.replace(Regexes.TrimLeftSlashes, "").replace(Regexes.TrimRightSlashes, "");
        }
        static validateResourceId(resourceId) {
            // if resourceId is not a string or is empty throw an error
            if (typeof resourceId !== "string" || this.isStringNullOrEmpty(resourceId)) {
                throw new Error("Resource Id must be a string and cannot be undefined, null or empty");
            }
            // if resourceId starts or ends with space throw an error
            if (resourceId[resourceId.length - 1] === " ") {
                throw new Error("Resource Id cannot end with space");
            }
            // if resource id contains illegal characters throw an error
            if (Regexes.IllegalResourceIdCharacters.test(resourceId)) {
                throw new Error("Illegal characters ['/', '\\', '?', '#'] cannot be used in resourceId");
            }
            return true;
        }
        static getResourceIdFromPath(resourcePath) {
            if (!resourcePath || typeof resourcePath !== "string") {
                return null;
            }
            const trimmedPath = this.trimSlashFromLeftAndRight(resourcePath);
            const pathSegments = trimmedPath.split("/");
            // number of segments of a path must always be even
            if (pathSegments.length % 2 !== 0) {
                return null;
            }
            return pathSegments[pathSegments.length - 1];
        }
        static parseConnectionPolicy(policy) {
            if (!policy) {
                return new ConnectionPolicy$$1();
            }
            else if (policy instanceof ConnectionPolicy$$1) {
                return policy;
            }
            else {
                const connectionPolicy = new ConnectionPolicy$$1();
                for (const key of Object.getOwnPropertyNames(connectionPolicy)) {
                    if (policy[key] !== undefined) {
                        connectionPolicy[key] = policy[key];
                    }
                }
                return connectionPolicy;
            }
        }
    }

    // tslint:disable:object-literal-key-quotes
    const StatusCodes = {
        // Success
        Ok: 200,
        Created: 201,
        Accepted: 202,
        NoContent: 204,
        NotModified: 304,
        // Client error
        BadRequest: 400,
        Unauthorized: 401,
        Forbidden: 403,
        NotFound: 404,
        MethodNotAllowed: 405,
        RequestTimeout: 408,
        Conflict: 409,
        Gone: 410,
        PreconditionFailed: 412,
        RequestEntityTooLarge: 413,
        TooManyRequests: 429,
        RetryWith: 449,
        // Server Error
        InternalServerError: 500,
        ServiceUnavailable: 503,
        // Operation pause and cancel. These are FAKE status codes for QOS logging purpose only.
        OperationPaused: 1200,
        OperationCancelled: 1201
    };
    const SubStatusCodes = {
        Unknown: 0,
        // 400: Bad Request Substatus
        CrossPartitionQueryNotServable: 1004,
        // 410: StatusCodeType_Gone: substatus
        PartitionKeyRangeGone: 1002,
        // 404: NotFound Substatus
        ReadSessionNotAvailable: 1002,
        // 403: Forbidden Substatus
        WriteForbidden: 3
    };

    /** @hidden */
    class UriFactory$$1 {
        /**
         * Given a database id, this creates a database link.
         * @param {string} databaseId -The database id
         * @returns {string}          -A database link in the format of dbs/{0} \
         * with {0} being a Uri escaped version of the databaseId
         * @description Would be used when creating or deleting a DocumentCollection \
         * or a User in Azure Cosmos DB database service
         */
        static createDatabaseUri(databaseId) {
            databaseId = Helper$$1.trimSlashFromLeftAndRight(databaseId);
            Helper$$1.validateResourceId(databaseId);
            return Constants.Path.DatabasesPathSegment + "/" + databaseId;
        }
        /**
         * Given a database and collection id, this creates a collection link.
         * @param {string} databaseId        -The database id
         * @param {string} collectionId      -The collection id
         * @returns {string}                 A collection link in the format of dbs/{0}/colls/{1} \
         * with {0} being a Uri escaped version of the databaseId and {1} being collectionId
         * @description Would be used when updating or deleting a DocumentCollection, creating a \
         * Document, a StoredProcedure, a Trigger, a UserDefinedFunction, or when executing a query \
         * with CreateDocumentQuery in Azure Cosmos DB database service.
         */
        static createDocumentCollectionUri(databaseId, collectionId) {
            collectionId = Helper$$1.trimSlashFromLeftAndRight(collectionId);
            Helper$$1.validateResourceId(collectionId);
            return this.createDatabaseUri(databaseId) + "/" + Constants.Path.CollectionsPathSegment + "/" + collectionId;
        }
        /**
         * Given a database and user id, this creates a user link.
         * @param {string} databaseId        -The database id
         * @param {string} userId            -The user id
         * @returns {string}                 A user link in the format of dbs/{0}/users/{1} \
         * with {0} being a Uri escaped version of the databaseId and {1} being userId
         * @description Would be used when creating a Permission, or when replacing or deleting \
         * a User in Azure Cosmos DB database service
         */
        static createUserUri(databaseId, userId) {
            userId = Helper$$1.trimSlashFromLeftAndRight(userId);
            Helper$$1.validateResourceId(userId);
            return this.createDatabaseUri(databaseId) + "/" + Constants.Path.UsersPathSegment + "/" + userId;
        }
        /**
         * Given a database and collection id, this creates a collection link.
         * @param {string} databaseId        -The database id
         * @param {string} collectionId      -The collection id
         * @param {string} documentId        -The document id
         * @returns {string}                 -A document link in the format of \
         * dbs/{0}/colls/{1}/docs/{2} with {0} being a Uri escaped version of \
         * the databaseId, {1} being collectionId and {2} being the documentId
         * @description Would be used when creating an Attachment, or when replacing \
         * or deleting a Document in Azure Cosmos DB database service
         */
        static createDocumentUri(databaseId, collectionId, documentId) {
            documentId = Helper$$1.trimSlashFromLeftAndRight(documentId);
            Helper$$1.validateResourceId(documentId);
            return (this.createDocumentCollectionUri(databaseId, collectionId) +
                "/" +
                Constants.Path.DocumentsPathSegment +
                "/" +
                documentId);
        }
        /**
         * Given a database, collection and document id, this creates a document link.
         * @param {string} databaseId    -The database Id
         * @param {string} userId        -The user Id
         * @param {string} permissionId  - The permissionId
         * @returns {string} A permission link in the format of dbs/{0}/users/{1}/permissions/{2} \
         * with {0} being a Uri escaped version of the databaseId, {1} being userId and {2} being permissionId
         * @description Would be used when replacing or deleting a Permission in Azure Cosmos DB database service.
         */
        static createPermissionUri(databaseId, userId, permissionId) {
            permissionId = Helper$$1.trimSlashFromLeftAndRight(permissionId);
            Helper$$1.validateResourceId(permissionId);
            return this.createUserUri(databaseId, userId) + "/" + Constants.Path.PermissionsPathSegment + "/" + permissionId;
        }
        /**
         * Given a database, collection and stored proc id, this creates a stored proc link.
         * @param {string} databaseId        -The database Id
         * @param {string} collectionId      -The collection Id
         * @param {string} storedProcedureId -The stored procedure Id
         * @returns {string}                 -A stored procedure link in the format of \
         * dbs/{0}/colls/{1}/sprocs/{2} with {0} being a Uri escaped version of the databaseId, \
         * {1} being collectionId and {2} being the storedProcedureId
         * @description Would be used when replacing, executing, or deleting a StoredProcedure in \
         * Azure Cosmos DB database service.
         */
        static createStoredProcedureUri(databaseId, collectionId, storedProcedureId) {
            storedProcedureId = Helper$$1.trimSlashFromLeftAndRight(storedProcedureId);
            Helper$$1.validateResourceId(storedProcedureId);
            return (UriFactory$$1.createDocumentCollectionUri(databaseId, collectionId) +
                "/" +
                Constants.Path.StoredProceduresPathSegment +
                "/" +
                storedProcedureId);
        }
        /**
         * @summary Given a database, collection and trigger id, this creates a trigger link.
         * @param {string} databaseId        -The database Id
         * @param {string} collectionId      -The collection Id
         * @param {string} triggerId         -The trigger Id
         * @returns {string}                 -A trigger link in the format of \
         * dbs/{0}/colls/{1}/triggers/{2} with {0} being a Uri escaped version of the databaseId, \
         * {1} being collectionId and {2} being the triggerId
         * @description Would be used when replacing, executing, or deleting a Trigger in Azure Cosmos DB database service
         */
        static createTriggerUri(databaseId, collectionId, triggerId) {
            triggerId = Helper$$1.trimSlashFromLeftAndRight(triggerId);
            Helper$$1.validateResourceId(triggerId);
            return (this.createDocumentCollectionUri(databaseId, collectionId) +
                "/" +
                Constants.Path.TriggersPathSegment +
                "/" +
                triggerId);
        }
        /**
         * @summary Given a database, collection and udf id, this creates a udf link.
         * @param {string} databaseId        -The database Id
         * @param {string} collectionId      -The collection Id
         * @param {string} udfId             -The User Defined Function Id
         * @returns {string}                 -A udf link in the format of dbs/{0}/colls/{1}/udfs/{2} \
         * with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the udfId
         * @description Would be used when replacing, executing, or deleting a UserDefinedFunction in \
         * Azure Cosmos DB database service
         */
        static createUserDefinedFunctionUri(databaseId, collectionId, udfId) {
            udfId = Helper$$1.trimSlashFromLeftAndRight(udfId);
            Helper$$1.validateResourceId(udfId);
            return (this.createDocumentCollectionUri(databaseId, collectionId) +
                "/" +
                Constants.Path.UserDefinedFunctionsPathSegment +
                "/" +
                udfId);
        }
        /**
         * @summary Given a database, collection and conflict id, this creates a conflict link.
         * @param {string} databaseId        -The database Id
         * @param {string} collectionId      -The collection Id
         * @param {string} conflictId        -The conflict Id
         * @returns {string}                 -A conflict link in the format of dbs/{0}/colls/{1}/conflicts/{2} \
         * with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the conflictId
         * @description Would be used when creating a Conflict in Azure Cosmos DB database service.
         */
        static createConflictUri(databaseId, collectionId, conflictId) {
            conflictId = Helper$$1.trimSlashFromLeftAndRight(conflictId);
            Helper$$1.validateResourceId(conflictId);
            return (this.createDocumentCollectionUri(databaseId, collectionId) +
                "/" +
                Constants.Path.ConflictsPathSegment +
                "/" +
                conflictId);
        }
        /**
         * @summary Given a database, collection and conflict id, this creates a conflict link.
         * @param {string} databaseId        -The database Id
         * @param {string} collectionId      -The collection Id
         * @param {string} documentId        -The document Id\
         * @param {string} attachmentId      -The attachment Id
         * @returns {string}                 -A conflict link in the format of dbs/{0}/colls/{1}/conflicts/{2} \
         * with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the conflictId
         * @description Would be used when creating a Conflict in Azure Cosmos DB database service.
         */
        static createAttachmentUri(databaseId, collectionId, documentId, attachmentId) {
            attachmentId = Helper$$1.trimSlashFromLeftAndRight(attachmentId);
            Helper$$1.validateResourceId(attachmentId);
            return (this.createDocumentUri(databaseId, collectionId, documentId) +
                "/" +
                Constants.Path.AttachmentsPathSegment +
                "/" +
                attachmentId);
        }
        /**
         * @summary Given a database and collection, this creates a partition key ranges link in\
         *  the Azure Cosmos DB database service.
         * @param {string} databaseId        -The database Id
         * @param {string} collectionId      -The collection Id
         * @returns {string}                 -A partition key ranges link in the format of \
         * dbs/{0}/colls/{1}/pkranges with {0} being a Uri escaped version of the databaseId and {1} being collectionId
         */
        static createPartitionKeyRangesUri(databaseId, collectionId) {
            return (this.createDocumentCollectionUri(databaseId, collectionId) + "/" + Constants.Path.PartitionKeyRangesPathSegment);
        }
    }

    /** @hidden */
    class Platform$$1 {
        static getPlatformDefaultHeaders() {
            const defaultHeaders = {};
            defaultHeaders[Constants.HttpHeaders.UserAgent] = Platform$$1.getUserAgent();
            return defaultHeaders;
        }
        static getDecodedDataLength(encodedData) {
            const buffer = Buffer.from(encodedData, "base64");
            return buffer.length;
        }
        static getUserAgent() {
            // gets the user agent in the following format
            // "{OSName}/{OSVersion} Nodejs/{NodejsVersion} documentdb-nodejs-sdk/{SDKVersion}"
            // for example:
            // "linux/3.4.0+ Nodejs/v0.10.25 documentdb-nodejs-sdk/1.10.0"
            // "win32/10.0.14393 Nodejs/v4.4.7 documentdb-nodejs-sdk/1.10.0"
            const osName = Platform$$1._getSafeUserAgentSegmentInfo(os.platform());
            const osVersion = Platform$$1._getSafeUserAgentSegmentInfo(os.release());
            const nodejsVersion = Platform$$1._getSafeUserAgentSegmentInfo(process.version);
            const userAgent = `${osName}/${osVersion} Nodejs/${nodejsVersion} ${Constants.SDKName}/${Constants.SDKVersion}`;
            return userAgent;
        }
        static _getSafeUserAgentSegmentInfo(s) {
            // catch null, undefined, etc
            if (typeof s !== "string") {
                s = "unknown";
            }
            // remove all white spaces
            s = s.replace(/\s+/g, "");
            if (!s) {
                s = "unknown";
            }
            return s;
        }
    }

    /**
     * This class implements the retry policy for endpoint discovery.
     * @hidden
     */
    class EndpointDiscoveryRetryPolicy {
        /**
         * @constructor EndpointDiscoveryRetryPolicy
         * @param {object} globalEndpointManager The GlobalEndpointManager instance.
         */
        constructor(globalEndpointManager, request) {
            this.globalEndpointManager = globalEndpointManager;
            this.request = request;
            this.maxRetryAttemptCount = EndpointDiscoveryRetryPolicy.maxRetryAttemptCount;
            this.currentRetryAttemptCount = 0;
            this.retryAfterInMilliseconds = EndpointDiscoveryRetryPolicy.retryAfterInMilliseconds;
        }
        /**
         * Determines whether the request should be retried or not.
         * @param {object} err - Error returned by the request.
         */
        shouldRetry(err, retryContext, locationEndpoint) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!err) {
                    return false;
                }
                if (!retryContext || !locationEndpoint) {
                    return false;
                }
                if (!this.globalEndpointManager.enableEndpointDiscovery) {
                    return false;
                }
                if (this.currentRetryAttemptCount >= this.maxRetryAttemptCount) {
                    return false;
                }
                this.currentRetryAttemptCount++;
                if (Helper$$1.isReadRequest(this.request)) {
                    this.globalEndpointManager.markCurrentLocationUnavailableForRead(locationEndpoint);
                }
                else {
                    this.globalEndpointManager.markCurrentLocationUnavailableForWrite(locationEndpoint);
                }
                // Check location index increment
                // TODO: Tracing
                // console.log("Write region was changed, refreshing the regions list from database account
                // and will retry the request.");
                yield this.globalEndpointManager.refreshEndpointList();
                retryContext.retryCount = this.currentRetryAttemptCount;
                retryContext.clearSessionTokenNotAvailable = false;
                retryContext.retryRequestOnPreferredLocations = false;
                return true;
            });
        }
    }
    EndpointDiscoveryRetryPolicy.maxRetryAttemptCount = 120; // TODO: Constant?
    EndpointDiscoveryRetryPolicy.retryAfterInMilliseconds = 1000;

    /**
     * This class implements the resource throttle retry policy for requests.
     * @hidden
     */
    class ResourceThrottleRetryPolicy {
        /**
         * @constructor ResourceThrottleRetryPolicy
         * @param {int} maxRetryAttemptCount               - Max number of retries to be performed for a request.
         * @param {int} fixedRetryIntervalInMilliseconds   - Fixed retry interval in milliseconds to wait between each \
         * retry ignoring the retryAfter returned as part of the response.
         * @param {int} maxWaitTimeInSeconds               - Max wait time in seconds to wait for a request while the \
         * retries are happening.
         */
        constructor(maxRetryAttemptCount, fixedRetryIntervalInMilliseconds, maxWaitTimeInSeconds) {
            this.maxRetryAttemptCount = maxRetryAttemptCount;
            this.fixedRetryIntervalInMilliseconds = fixedRetryIntervalInMilliseconds;
            /** Current retry attempt count. */
            this.currentRetryAttemptCount = 0;
            /** Cummulative wait time in milliseconds for a request while the retries are happening. */
            this.cummulativeWaitTimeinMilliseconds = 0;
            /** Max wait time in milliseconds to wait for a request while the retries are happening. */
            this.retryAfterInMilliseconds = 0;
            this.maxWaitTimeInMilliseconds = maxWaitTimeInSeconds * 1000;
            this.currentRetryAttemptCount = 0;
            this.cummulativeWaitTimeinMilliseconds = 0;
        }
        /**
         * Determines whether the request should be retried or not.
         * @param {object} err - Error returned by the request.
         */
        shouldRetry(err) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // TODO: any custom error object
                if (err) {
                    if (this.currentRetryAttemptCount < this.maxRetryAttemptCount) {
                        this.currentRetryAttemptCount++;
                        this.retryAfterInMilliseconds = 0;
                        if (this.fixedRetryIntervalInMilliseconds) {
                            this.retryAfterInMilliseconds = this.fixedRetryIntervalInMilliseconds;
                        }
                        else if (err.retryAfterInMilliseconds) {
                            this.retryAfterInMilliseconds = err.retryAfterInMilliseconds;
                        }
                        if (this.cummulativeWaitTimeinMilliseconds < this.maxWaitTimeInMilliseconds) {
                            this.cummulativeWaitTimeinMilliseconds += this.retryAfterInMilliseconds;
                            return true;
                        }
                    }
                }
                return false;
            });
        }
    }

    /**
     * This class implements the retry policy for session consistent reads.
     * @hidden
     */
    class SessionRetryPolicy {
        /**
         * @constructor SessionReadRetryPolicy
         * @param {object} globalEndpointManager                           - The GlobalEndpointManager instance.
         * @property {object} request                                      - The Http request information
         */
        constructor(globalEndpointManager, request, connectionPolicy) {
            this.globalEndpointManager = globalEndpointManager;
            this.request = request;
            this.connectionPolicy = connectionPolicy;
            /** Current retry attempt count. */
            this.currentRetryAttemptCount = 0;
            /** Retry interval in milliseconds. */
            this.retryAfterInMilliseconds = 0;
        }
        /**
         * Determines whether the request should be retried or not.
         * @param {object} err - Error returned by the request.
         * @param {function} callback - The callback function which takes bool argument which specifies whether the request\
         * will be retried or not.
         */
        shouldRetry(err, retryContext) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!err) {
                    return false;
                }
                if (!retryContext) {
                    return false;
                }
                if (!this.connectionPolicy.EnableEndpointDiscovery) {
                    return false;
                }
                if (this.globalEndpointManager.canUseMultipleWriteLocations(this.request)) {
                    // If we can write to multiple locations, we should against every write endpoint until we succeed
                    const endpoints = Helper$$1.isReadRequest(this.request)
                        ? yield this.globalEndpointManager.getReadEndpoints()
                        : yield this.globalEndpointManager.getWriteEndpoints();
                    if (this.currentRetryAttemptCount > endpoints.length) {
                        return false;
                    }
                    else {
                        retryContext.retryCount = ++this.currentRetryAttemptCount - 1;
                        retryContext.retryRequestOnPreferredLocations = this.currentRetryAttemptCount > 1;
                        retryContext.clearSessionTokenNotAvailable = this.currentRetryAttemptCount === endpoints.length;
                        return true;
                    }
                }
                else {
                    if (this.currentRetryAttemptCount > 1) {
                        return false;
                    }
                    else {
                        retryContext.retryCount = ++this.currentRetryAttemptCount - 1;
                        retryContext.retryRequestOnPreferredLocations = false; // Forces all operations to primary write endpoint
                        retryContext.clearSessionTokenNotAvailable = true;
                        return true;
                    }
                }
            });
        }
    }

    class LocationRouting {
        get ignorePreferredLocation() {
            return this.pIgnorePreferredLocation;
        }
        get locationIndexToRoute() {
            return this.pLocationIndexToRoute;
        }
        get locationEndpointToRoute() {
            return this.pLocationEndpointToRoute;
        }
        routeToLocation(endpointOrIndex, ignorePreferredLocation) {
            if (arguments.length === 2 && util.isNumber(endpointOrIndex)) {
                this.pLocationIndexToRoute = endpointOrIndex;
                this.pIgnorePreferredLocation = ignorePreferredLocation;
                this.pLocationEndpointToRoute = undefined;
            }
            else if (arguments.length === 1 && util.isString(endpointOrIndex)) {
                this.pLocationEndpointToRoute = endpointOrIndex;
                this.pLocationIndexToRoute = undefined;
                this.pIgnorePreferredLocation = undefined;
            }
            else {
                throw new Error("Invalid arguments passed to routeToLocation");
            }
        }
        clearRouteToLocation() {
            this.pLocationEndpointToRoute = undefined;
            this.pLocationIndexToRoute = undefined;
            this.pIgnorePreferredLocation = undefined;
        }
    }

    /**
     * This class implements the default connection retry policy for requests.
     * @property {int} currentRetryAttemptCount           - Current retry attempt count.
     * @hidden
     */
    class DefaultRetryPolicy {
        /**
         * @constructor ResourceThrottleRetryPolicy
         * @param {string} operationType - The type of operation being performed.
         */
        constructor(operationType) {
            this.operationType = operationType;
            this.maxRetryAttemptCount = 10;
            this.currentRetryAttemptCount = 0;
            this.retryAfterInMilliseconds = 1000;
            // Windows Socket Error Codes
            this.WindowsInterruptedFunctionCall = 10004;
            this.WindowsFileHandleNotValid = 10009;
            this.WindowsPermissionDenied = 10013;
            this.WindowsBadAddress = 10014;
            this.WindowsInvalidArgumnet = 10022;
            this.WindowsResourceTemporarilyUnavailable = 10035;
            this.WindowsOperationNowInProgress = 10036;
            this.WindowsAddressAlreadyInUse = 10048;
            this.WindowsConnectionResetByPeer = 10054;
            this.WindowsCannotSendAfterSocketShutdown = 10058;
            this.WindowsConnectionTimedOut = 10060;
            this.WindowsConnectionRefused = 10061;
            this.WindowsNameTooLong = 10063;
            this.WindowsHostIsDown = 10064;
            this.WindowsNoRouteTohost = 10065;
            // Linux Error Codes
            this.LinuxConnectionReset = "ECONNRESET";
            this.CONNECTION_ERROR_CODES = [
                this.WindowsInterruptedFunctionCall,
                this.WindowsFileHandleNotValid,
                this.WindowsPermissionDenied,
                this.WindowsBadAddress,
                this.WindowsInvalidArgumnet,
                this.WindowsResourceTemporarilyUnavailable,
                this.WindowsOperationNowInProgress,
                this.WindowsAddressAlreadyInUse,
                this.WindowsConnectionResetByPeer,
                this.WindowsCannotSendAfterSocketShutdown,
                this.WindowsConnectionTimedOut,
                this.WindowsConnectionRefused,
                this.WindowsNameTooLong,
                this.WindowsHostIsDown,
                this.WindowsNoRouteTohost,
                this.LinuxConnectionReset
            ];
        }
        /**
         * Determines whether the request should be retried or not.
         * @param {object} err - Error returned by the request.
         * @param {function} callback - The callback function which takes bool argument which
         *                              specifies whether the request will be retried or not.
         */
        shouldRetry(err) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (err) {
                    if (this.currentRetryAttemptCount < this.maxRetryAttemptCount && this.needs_retry(err.code)) {
                        this.currentRetryAttemptCount++;
                        return true;
                    }
                }
                return false;
            });
        }
        needs_retry(code) {
            if ((this.operationType === "read" || this.operationType === "query") &&
                this.CONNECTION_ERROR_CODES.indexOf(code) !== -1) {
                return true;
            }
            else {
                return false;
            }
        }
    }

    /** @hidden */
    class RetryUtility$$1 {
        /**
         * Executes the retry policy for the created request object.
         * @param {object} globalEndpointManager - an instance of GlobalEndpointManager class.
         * @param {object} body - a dictionary containing 'buffer' and 'stream' keys to hold corresponding buffer or\
         *  stream body, null otherwise.
         * @param {function} createRequestObjectStub - stub function that creates the request object.
         * @param {object} connectionPolicy - an instance of ConnectionPolicy that has the connection configs.
         * @param {RequestOptions} requestOptions - The request options.
         * @param {function} callback - the callback that will be called when the request is finished executing.
         */
        static execute(globalEndpointManager, body, createRequestObjectFunc, connectionPolicy, requestOptions, request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // TODO: any request
                const r = typeof request !== "string" ? request : { path: "", operationType: "nonReadOps" };
                const endpointDiscoveryRetryPolicy = new EndpointDiscoveryRetryPolicy(globalEndpointManager, r);
                const resourceThrottleRetryPolicy = new ResourceThrottleRetryPolicy(connectionPolicy.RetryOptions.MaxRetryAttemptCount, connectionPolicy.RetryOptions.FixedRetryIntervalInMilliseconds, connectionPolicy.RetryOptions.MaxWaitTimeInSeconds);
                const sessionReadRetryPolicy = new SessionRetryPolicy(globalEndpointManager, r, connectionPolicy);
                const defaultRetryPolicy = new DefaultRetryPolicy(request.operationType);
                return this.apply(body, createRequestObjectFunc, connectionPolicy, requestOptions, endpointDiscoveryRetryPolicy, resourceThrottleRetryPolicy, sessionReadRetryPolicy, defaultRetryPolicy, globalEndpointManager, request, {});
            });
        }
        /**
         * Applies the retry policy for the created request object.
         * @param {object} body - a dictionary containing 'buffer' and 'stream' keys to hold corresponding buffer or \
         * stream body, null otherwise.
         * @param {function} createRequestObjectFunc - function that creates the request object.
         * @param {object} connectionPolicy - an instance of ConnectionPolicy that has the connection configs.
         * @param {RequestOptions} requestOptions - The request options.
         * @param {EndpointDiscoveryRetryPolicy} endpointDiscoveryRetryPolicy - The endpoint discovery retry policy \
         * instance.
         * @param {ResourceThrottleRetryPolicy} resourceThrottleRetryPolicy - The resource throttle retry policy instance.
         * @param {function} callback - the callback that will be called when the response is retrieved and processed.
         */
        static apply(body, createRequestObjectFunc, connectionPolicy, requestOptions, endpointDiscoveryRetryPolicy, resourceThrottleRetryPolicy, sessionReadRetryPolicy, defaultRetryPolicy, globalEndpointManager, request, retryContext) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // TODO: any response
                const httpsRequest = createRequestObjectFunc(connectionPolicy, requestOptions, body);
                if (!request.locationRouting) {
                    request.locationRouting = new LocationRouting();
                }
                request.locationRouting.clearRouteToLocation();
                if (retryContext) {
                    request.locationRouting.routeToLocation(retryContext.retryCount || 0, !retryContext.retryRequestOnPreferredLocations);
                    if (retryContext.clearSessionTokenNotAvailable) {
                        request.client.clearSessionToken(request.path);
                    }
                }
                const locationEndpoint = yield globalEndpointManager.resolveServiceEndpoint(request);
                requestOptions = this.modifyRequestOptions(requestOptions, url.parse(locationEndpoint));
                request.locationRouting.routeToLocation(locationEndpoint);
                try {
                    const { result, headers } = yield httpsRequest;
                    headers[Constants.ThrottleRetryCount] = resourceThrottleRetryPolicy.currentRetryAttemptCount;
                    headers[Constants.ThrottleRetryWaitTimeInMs] = resourceThrottleRetryPolicy.cummulativeWaitTimeinMilliseconds;
                    return { result, headers };
                }
                catch (err) {
                    // TODO: any error
                    let retryPolicy = null;
                    const headers = err.headers || {};
                    if (err.code === StatusCodes.Forbidden && err.substatus === SubStatusCodes.WriteForbidden) {
                        retryPolicy = endpointDiscoveryRetryPolicy;
                    }
                    else if (err.code === StatusCodes.TooManyRequests) {
                        retryPolicy = resourceThrottleRetryPolicy;
                    }
                    else if (err.code === StatusCodes.NotFound && err.substatus === SubStatusCodes.ReadSessionNotAvailable) {
                        retryPolicy = sessionReadRetryPolicy;
                    }
                    else {
                        retryPolicy = defaultRetryPolicy;
                    }
                    const results = yield retryPolicy.shouldRetry(err, retryContext);
                    if (!results) {
                        headers[Constants.ThrottleRetryCount] = resourceThrottleRetryPolicy.currentRetryAttemptCount;
                        headers[Constants.ThrottleRetryWaitTimeInMs] = resourceThrottleRetryPolicy.cummulativeWaitTimeinMilliseconds;
                        err.headers = Object.assign({}, err.headers, headers);
                        throw err;
                    }
                    else {
                        request.retryCount++;
                        const newUrl = results[1]; // TODO: any hack
                        yield Helper$$1.sleep(retryPolicy.retryAfterInMilliseconds);
                        return this.apply(body, createRequestObjectFunc, connectionPolicy, requestOptions, endpointDiscoveryRetryPolicy, resourceThrottleRetryPolicy, sessionReadRetryPolicy, defaultRetryPolicy, globalEndpointManager, request, retryContext);
                    }
                }
            });
        }
        static modifyRequestOptions(oldRequestOptions, // TODO: any hack is bad
        newUrl) {
            // TODO: any hack is bad
            const properties = Object.keys(newUrl);
            for (const index in properties) {
                if (properties[index] !== "path") {
                    oldRequestOptions[properties[index]] = newUrl[properties[index]];
                }
            }
            return oldRequestOptions;
        }
    }

    /**
     * Represents the Connection policy associated with a CosmosClient in the Azure Cosmos DB database service.
     */
    class ConnectionPolicy$$1 {
        constructor() {
            /** Determines which mode to connect to Cosmos with. (Currently only supports Gateway option) */
            this.ConnectionMode = exports.ConnectionMode.Gateway;
            /** Attachment content (aka media) download mode. Should be one of the values of {@link MediaReadMode} */
            this.MediaReadMode = exports.MediaReadMode.Buffered;
            /** Time to wait for response from network peer for attachment content (aka media) operations. Represented in milliseconds. */
            this.MediaRequestTimeout = ConnectionPolicy$$1.defaultMediaRequestTimeout;
            /** Request timeout (time to wait for response from network peer). Represented in milliseconds. */
            this.RequestTimeout = ConnectionPolicy$$1.defaultRequestTimeout;
            /** Flag to enable/disable automatic redirecting of requests based on read/write operations. */
            this.EnableEndpointDiscovery = true;
            /** List of azure regions to be used as preferred locations for read requests. */
            this.PreferredLocations = [];
            /** RetryOptions instance which defines several configurable properties used during retry. */
            this.RetryOptions = new RetryOptions();
            /**
             * Flag to disable SSL verification for the requests. SSL verification is enabled by default. Don't set this when targeting production endpoints.
             * This is intended to be used only when targeting emulator endpoint to avoid failing your requests with SSL related error.
             */
            this.DisableSSLVerification = false;
            /** Http/Https proxy url */
            this.ProxyUrl = "";
            /**
             * The flag that enables writes on any locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service.
             * Default is `false`.
             */
            this.UseMultipleWriteLocations = false;
        }
    }
    ConnectionPolicy$$1.defaultRequestTimeout = 60000;
    ConnectionPolicy$$1.defaultMediaRequestTimeout = 300000;

    /**
     * Represents the consistency levels supported for Azure Cosmos DB client operations.<br>
     * The requested ConsistencyLevel must match or be weaker than that provisioned for the database account.
     * Consistency levels.
     *
     * Consistency levels by order of strength are Strong, BoundedStaleness, Session, Consistent Prefix, and Eventual.
     *
     * See https://aka.ms/cosmos-consistency for more detailed documentation on Consistency Levels.
     */
    (function (ConsistencyLevel) {
        /**
         * Strong Consistency guarantees that read operations always return the value that was last written.
         */
        ConsistencyLevel["Strong"] = "Strong";
        /**
         * Bounded Staleness guarantees that reads are not too out-of-date.
         * This can be configured based on number of operations (MaxStalenessPrefix) or time (MaxStalenessIntervalInSeconds).
         */
        ConsistencyLevel["BoundedStaleness"] = "BoundedStaleness";
        /**
         * Session Consistency guarantees monotonic reads (you never read old data, then new, then old again),
         * monotonic writes (writes are ordered) and read your writes (your writes are immediately visible to your reads)
         * within any single session.
         */
        ConsistencyLevel["Session"] = "Session";
        /**
         * Eventual Consistency guarantees that reads will return a subset of writes.
         * All writes will be eventually be available for reads.
         */
        ConsistencyLevel["Eventual"] = "Eventual";
        /**
         * ConsistentPrefix Consistency guarantees that reads will return some prefix of all writes with no gaps.
         * All writes will be eventually be available for reads.`
         */
        ConsistencyLevel["ConsistentPrefix"] = "ConsistentPrefix";
    })(exports.ConsistencyLevel || (exports.ConsistencyLevel = {}));

    /**
     * Represents a DatabaseAccount in the Azure Cosmos DB database service.
     */
    class DatabaseAccount$$1 {
        // TODO: body - any
        constructor(body, headers) {
            /** The list of writable locations for a geo-replicated database account. */
            this.writableLocations = [];
            /** The list of readable locations for a geo-replicated database account. */
            this.readableLocations = [];
            this.DatabasesLink = "/dbs/";
            this.MediaLink = "/media/";
            this.MaxMediaStorageUsageInMB = headers[Constants.HttpHeaders.MaxMediaStorageUsageInMB];
            this.CurrentMediaStorageUsageInMB = headers[Constants.HttpHeaders.CurrentMediaStorageUsageInMB];
            this.ConsistencyPolicy = body.UserConsistencyPolicy
                ? body.UserConsistencyPolicy.defaultConsistencyLevel
                : exports.ConsistencyLevel.Session;
            if (body[Constants.WritableLocations] && body.id !== "localhost") {
                this.writableLocations = body[Constants.WritableLocations];
            }
            if (body[Constants.ReadableLocations] && body.id !== "localhost") {
                this.readableLocations = body[Constants.ReadableLocations];
            }
            if (body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS]) {
                this.enableMultipleWritableLocations =
                    body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === true ||
                        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === "true";
            }
        }
    }

    /** Defines a target data type of an index path specification in the Azure Cosmos DB service. */
    (function (DataType) {
        /** Represents a numeric data type. */
        DataType["Number"] = "Number";
        /** Represents a string data type. */
        DataType["String"] = "String";
        /** Represents a point data type. */
        DataType["Point"] = "Point";
        /** Represents a line string data type. */
        DataType["LineString"] = "LineString";
        /** Represents a polygon data type. */
        DataType["Polygon"] = "Polygon";
        /** Represents a multi-polygon data type. */
        DataType["MultiPolygon"] = "MultiPolygon";
    })(exports.DataType || (exports.DataType = {}));

    /**
     * Specifies the supported indexing modes.
     * @property Consistent
     * @property Lazy
     */
    (function (IndexingMode) {
        /**
         * Index is updated synchronously with a create or update operation.
         *
         * With consistent indexing, query behavior is the same as the default consistency level for the container.
         * The index is always kept up to date with the data.
         */
        IndexingMode["consistent"] = "consistent";
        /**
         * Index is updated asynchronously with respect to a create or update operation.
         *
         * With lazy indexing, queries are eventually consistent. The index is updated when the container is idle.
         */
        IndexingMode["lazy"] = "lazy";
        /** No Index is provided. */
        IndexingMode["none"] = "none";
    })(exports.IndexingMode || (exports.IndexingMode = {}));

    /**
     * Specifies the supported Index types.
     */
    (function (IndexKind) {
        /**
         * This is supplied for a path which has no sorting requirement. This kind of an index has better precision than corresponding range index.
         */
        IndexKind["Hash"] = "Hash";
        /**
         * This is supplied for a path which requires sorting.
         */
        IndexKind["Range"] = "Range";
        /**
         * This is supplied for a path which requires geospatial indexing.
         */
        IndexKind["Spatial"] = "Spatial";
    })(exports.IndexKind || (exports.IndexKind = {}));

    /**
     * Enum for media read mode values.
     */
    (function (MediaReadMode) {
        /**
         * Content is buffered at the client and not directly streamed from the content store.
         * <p>Use Buffered to reduce the time taken to read and write media files.</p>
         */
        MediaReadMode["Buffered"] = "Buffered";
        /**
         * Content is directly streamed from the content store without any buffering at the client.
         * <p>Use Streamed to reduce the client memory overhead of reading and writing media files. </p>
         */
        MediaReadMode["Streamed"] = "Streamed";
    })(exports.MediaReadMode || (exports.MediaReadMode = {}));

    (function (PartitionKind) {
        PartitionKind["Hash"] = "Hash";
    })(exports.PartitionKind || (exports.PartitionKind = {}));

    /**
     * Enum for permission mode values.
     */
    (function (PermissionMode) {
        /** Permission not valid. */
        PermissionMode["None"] = "none";
        /** Permission applicable for read operations only. */
        PermissionMode["Read"] = "read";
        /** Permission applicable for all operations. */
        PermissionMode["All"] = "all";
    })(exports.PermissionMode || (exports.PermissionMode = {}));

    // TODO: Should we remove this?
    (function (QueryCompatibilityMode) {
        QueryCompatibilityMode[QueryCompatibilityMode["Default"] = 0] = "Default";
        QueryCompatibilityMode[QueryCompatibilityMode["Query"] = 1] = "Query";
        QueryCompatibilityMode[QueryCompatibilityMode["SqlQuery"] = 2] = "SqlQuery";
    })(exports.QueryCompatibilityMode || (exports.QueryCompatibilityMode = {}));

    /**
     * Enum for trigger operation values.
     * specifies the operations on which a trigger should be executed.
     */
    (function (TriggerOperation) {
        /** All operations. */
        TriggerOperation["All"] = "all";
        /** Create operations only. */
        TriggerOperation["Create"] = "create";
        /** Update operations only. */
        TriggerOperation["Update"] = "update";
        /** Delete operations only. */
        TriggerOperation["Delete"] = "delete";
        /** Replace operations only. */
        TriggerOperation["Replace"] = "replace";
    })(exports.TriggerOperation || (exports.TriggerOperation = {}));

    /**
     * Enum for trigger type values.
     * Specifies the type of the trigger.
     */
    (function (TriggerType) {
        /** Trigger should be executed before the associated operation(s). */
        TriggerType["Pre"] = "pre";
        /** Trigger should be executed after the associated operation(s). */
        TriggerType["Post"] = "post";
    })(exports.TriggerType || (exports.TriggerType = {}));

    /**
     * Enum for udf type values.
     * Specifies the types of user defined functions.
     */
    (function (UserDefinedFunctionType) {
        /** The User Defined Function is written in JavaScript. This is currently the only option. */
        UserDefinedFunctionType["Javascript"] = "Javascript";
    })(exports.UserDefinedFunctionType || (exports.UserDefinedFunctionType = {}));

    class ClientSideMetrics {
        constructor(requestCharge) {
            this.requestCharge = requestCharge;
        }
        /**
         * Adds one or more ClientSideMetrics to a copy of this instance and returns the result.
         */
        add(...clientSideMetricsArray) {
            if (arguments == null || arguments.length === 0) {
                throw new Error("arguments was null or empty");
            }
            let requestCharge = this.requestCharge;
            for (const clientSideMetrics of clientSideMetricsArray) {
                if (clientSideMetrics == null) {
                    throw new Error("clientSideMetrics has null or undefined item(s)");
                }
                requestCharge += clientSideMetrics.requestCharge;
            }
            return new ClientSideMetrics(requestCharge);
        }
        static createFromArray(...clientSideMetricsArray) {
            if (clientSideMetricsArray == null) {
                throw new Error("clientSideMetricsArray is null or undefined item(s)");
            }
            return this.zero.add(...clientSideMetricsArray);
        }
    }
    ClientSideMetrics.zero = new ClientSideMetrics(0);

    var QueryMetricsConstants = {
        // QueryMetrics
        RetrievedDocumentCount: "retrievedDocumentCount",
        RetrievedDocumentSize: "retrievedDocumentSize",
        OutputDocumentCount: "outputDocumentCount",
        OutputDocumentSize: "outputDocumentSize",
        IndexHitRatio: "indexUtilizationRatio",
        IndexHitDocumentCount: "indexHitDocumentCount",
        TotalQueryExecutionTimeInMs: "totalExecutionTimeInMs",
        // QueryPreparationTimes
        QueryCompileTimeInMs: "queryCompileTimeInMs",
        LogicalPlanBuildTimeInMs: "queryLogicalPlanBuildTimeInMs",
        PhysicalPlanBuildTimeInMs: "queryPhysicalPlanBuildTimeInMs",
        QueryOptimizationTimeInMs: "queryOptimizationTimeInMs",
        // QueryTimes
        IndexLookupTimeInMs: "indexLookupTimeInMs",
        DocumentLoadTimeInMs: "documentLoadTimeInMs",
        VMExecutionTimeInMs: "VMExecutionTimeInMs",
        DocumentWriteTimeInMs: "writeOutputTimeInMs",
        // RuntimeExecutionTimes
        QueryEngineTimes: "queryEngineTimes",
        SystemFunctionExecuteTimeInMs: "systemFunctionExecuteTimeInMs",
        UserDefinedFunctionExecutionTimeInMs: "userFunctionExecuteTimeInMs",
        // QueryMetrics Text
        RetrievedDocumentCountText: "Retrieved Document Count",
        RetrievedDocumentSizeText: "Retrieved Document Size",
        OutputDocumentCountText: "Output Document Count",
        OutputDocumentSizeText: "Output Document Size",
        IndexUtilizationText: "Index Utilization",
        TotalQueryExecutionTimeText: "Total Query Execution Time",
        // QueryPreparationTimes Text
        QueryPreparationTimesText: "Query Preparation Times",
        QueryCompileTimeText: "Query Compilation Time",
        LogicalPlanBuildTimeText: "Logical Plan Build Time",
        PhysicalPlanBuildTimeText: "Physical Plan Build Time",
        QueryOptimizationTimeText: "Query Optimization Time",
        // QueryTimes Text
        QueryEngineTimesText: "Query Engine Times",
        IndexLookupTimeText: "Index Lookup Time",
        DocumentLoadTimeText: "Document Load Time",
        WriteOutputTimeText: "Document Write Time",
        // RuntimeExecutionTimes Text
        RuntimeExecutionTimesText: "Runtime Execution Times",
        TotalExecutionTimeText: "Query Engine Execution Time",
        SystemFunctionExecuteTimeText: "System Function Execution Time",
        UserDefinedFunctionExecutionTimeText: "User-defined Function Execution Time",
        // ClientSideQueryMetrics Text
        ClientSideQueryMetricsText: "Client Side Metrics",
        RetriesText: "Retry Count",
        RequestChargeText: "Request Charge",
        FetchExecutionRangesText: "Partition Execution Timeline",
        SchedulingMetricsText: "Scheduling Metrics"
    };

    // Ported this implementation to javascript:
    // https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,83e476c1ae112117
    /** @hidden */
    const ticksPerMillisecond = 10000;
    /** @hidden */
    const millisecondsPerTick = 1.0 / ticksPerMillisecond;
    /** @hidden */
    const ticksPerSecond = ticksPerMillisecond * 1000; // 10,000,000
    /** @hidden */
    const secondsPerTick = 1.0 / ticksPerSecond; // 0.0001
    /** @hidden */
    const ticksPerMinute = ticksPerSecond * 60; // 600,000,000
    /** @hidden */
    const minutesPerTick = 1.0 / ticksPerMinute; // 1.6666666666667e-9
    /** @hidden */
    const ticksPerHour = ticksPerMinute * 60; // 36,000,000,000
    /** @hidden */
    const hoursPerTick = 1.0 / ticksPerHour; // 2.77777777777777778e-11
    /** @hidden */
    const ticksPerDay = ticksPerHour * 24; // 864,000,000,000
    /** @hidden */
    const daysPerTick = 1.0 / ticksPerDay; // 1.1574074074074074074e-12
    /** @hidden */
    const millisPerSecond = 1000;
    /** @hidden */
    const millisPerMinute = millisPerSecond * 60; //     60,000
    /** @hidden */
    const millisPerHour = millisPerMinute * 60; //  3,600,000
    /** @hidden */
    const millisPerDay = millisPerHour * 24; // 86,400,000
    /** @hidden */
    const maxMilliSeconds = Number.MAX_SAFE_INTEGER / ticksPerMillisecond;
    /** @hidden */
    const minMilliSeconds = Number.MIN_SAFE_INTEGER / ticksPerMillisecond;
    /**
     * Represents a time interval.
     *
     * @constructor TimeSpan
     * @param {number} days                 - Number of days.
     * @param {number} hours                - Number of hours.
     * @param {number} minutes              - Number of minutes.
     * @param {number} seconds              - Number of seconds.
     * @param {number} milliseconds         - Number of milliseconds.
     * @ignore
     */
    class TimeSpan {
        constructor(days, hours, minutes, seconds, milliseconds) {
            // Constructor
            if (!Number.isInteger(days)) {
                throw new Error("days is not an integer");
            }
            if (!Number.isInteger(hours)) {
                throw new Error("hours is not an integer");
            }
            if (!Number.isInteger(minutes)) {
                throw new Error("minutes is not an integer");
            }
            if (!Number.isInteger(seconds)) {
                throw new Error("seconds is not an integer");
            }
            if (!Number.isInteger(milliseconds)) {
                throw new Error("milliseconds is not an integer");
            }
            const totalMilliSeconds = (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;
            if (totalMilliSeconds > maxMilliSeconds || totalMilliSeconds < minMilliSeconds) {
                throw new Error("Total number of milliseconds was either too large or too small");
            }
            this._ticks = totalMilliSeconds * ticksPerMillisecond;
        }
        /**
         * Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance.
         * @param {TimeSpan} ts              - The time interval to add.
         * @memberof TimeSpan
         * @instance
         */
        add(ts) {
            if (TimeSpan.additionDoesOverflow(this._ticks, ts._ticks)) {
                throw new Error("Adding the two timestamps causes an overflow.");
            }
            const results = this._ticks + ts._ticks;
            return TimeSpan.fromTicks(results);
        }
        /**
         * Returns a new TimeSpan object whose value is the difference of the specified TimeSpan object and this instance.
         * @param {TimeSpan} ts              - The time interval to subtract.
         * @memberof TimeSpan
         * @instance
         */
        subtract(ts) {
            if (TimeSpan.subtractionDoesUnderflow(this._ticks, ts._ticks)) {
                throw new Error("Subtracting the two timestamps causes an underflow.");
            }
            const results = this._ticks - ts._ticks;
            return TimeSpan.fromTicks(results);
        }
        /**
         * Compares this instance to a specified object and returns an integer that indicates whether this
         * instance is shorter than, equal to, or longer than the specified object.
         * @param {TimeSpan} value              - The time interval to add.
         * @memberof TimeSpan
         * @instance
         */
        compareTo(value) {
            if (value == null) {
                return 1;
            }
            if (!TimeSpan.isTimeSpan(value)) {
                throw new Error("Argument must be a TimeSpan object");
            }
            return TimeSpan.compare(this, value);
        }
        /**
         * Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.
         * @memberof TimeSpan
         * @instance
         */
        duration() {
            return TimeSpan.fromTicks(this._ticks >= 0 ? this._ticks : -this._ticks);
        }
        /**
         * Returns a value indicating whether this instance is equal to a specified object.
         * @memberof TimeSpan
         * @param {TimeSpan} value              - The time interval to check for equality.
         * @instance
         */
        equals(value) {
            if (TimeSpan.isTimeSpan(value)) {
                return this._ticks === value._ticks;
            }
            return false;
        }
        /**
         * Returns a new TimeSpan object whose value is the negated value of this instance.
         * @memberof TimeSpan
         * @param {TimeSpan} value              - The time interval to check for equality.
         * @instance
         */
        negate() {
            return TimeSpan.fromTicks(-this._ticks);
        }
        days() {
            return Math.floor(this._ticks / ticksPerDay);
        }
        hours() {
            return Math.floor(this._ticks / ticksPerHour);
        }
        milliseconds() {
            return Math.floor(this._ticks / ticksPerMillisecond);
        }
        seconds() {
            return Math.floor(this._ticks / ticksPerSecond);
        }
        ticks() {
            return this._ticks;
        }
        totalDays() {
            return this._ticks * daysPerTick;
        }
        totalHours() {
            return this._ticks * hoursPerTick;
        }
        totalMilliseconds() {
            return this._ticks * millisecondsPerTick;
        }
        totalMinutes() {
            return this._ticks * minutesPerTick;
        }
        totalSeconds() {
            return this._ticks * secondsPerTick;
        }
        static fromTicks(value) {
            const timeSpan = new TimeSpan(0, 0, 0, 0, 0);
            timeSpan._ticks = value;
            return timeSpan;
        }
        static isTimeSpan(timespan) {
            return timespan._ticks;
        }
        static additionDoesOverflow(a, b) {
            const c = a + b;
            return a !== c - b || b !== c - a;
        }
        static subtractionDoesUnderflow(a, b) {
            const c = a - b;
            return a !== c + b || b !== a - c;
        }
        static compare(t1, t2) {
            if (t1._ticks > t2._ticks) {
                return 1;
            }
            if (t1._ticks < t2._ticks) {
                return -1;
            }
            return 0;
        }
        static interval(value, scale) {
            if (isNaN(value)) {
                throw new Error("value must be a number");
            }
            const milliseconds = value * scale;
            if (milliseconds > maxMilliSeconds || milliseconds < minMilliSeconds) {
                throw new Error("timespan too long");
            }
            return TimeSpan.fromTicks(Math.floor(milliseconds * ticksPerMillisecond));
        }
        static fromMilliseconds(value) {
            return TimeSpan.interval(value, 1);
        }
        static fromSeconds(value) {
            return TimeSpan.interval(value, millisPerSecond);
        }
        static fromMinutes(value) {
            return TimeSpan.interval(value, millisPerMinute);
        }
        static fromHours(value) {
            return TimeSpan.interval(value, millisPerHour);
        }
        static fromDays(value) {
            return TimeSpan.interval(value, millisPerDay);
        }
    }
    TimeSpan.zero = new TimeSpan(0, 0, 0, 0, 0);
    TimeSpan.maxValue = TimeSpan.fromTicks(Number.MAX_SAFE_INTEGER);
    TimeSpan.minValue = TimeSpan.fromTicks(Number.MIN_SAFE_INTEGER);

    class QueryMetricsUtils {
        static parseDelimitedString(delimitedString) {
            if (delimitedString == null) {
                throw new Error("delimitedString is null or undefined");
            }
            const metrics = {};
            const headerAttributes = delimitedString.split(";");
            for (const attribute of headerAttributes) {
                const attributeKeyValue = attribute.split("=");
                if (attributeKeyValue.length !== 2) {
                    throw new Error("recieved a malformed delimited string");
                }
                const attributeKey = attributeKeyValue[0];
                const attributeValue = parseFloat(attributeKeyValue[1]);
                metrics[attributeKey] = attributeValue;
            }
            return metrics;
        }
        static timeSpanFromMetrics(metrics /* TODO: any */, key) {
            if (key in metrics) {
                return TimeSpan.fromMilliseconds(metrics[key]);
            }
            return TimeSpan.zero;
        }
        static isNumeric(input) {
            return !isNaN(parseFloat(input)) && isFinite(input);
        }
    }

    class QueryPreparationTimes {
        constructor(queryCompilationTime, logicalPlanBuildTime, physicalPlanBuildTime, queryOptimizationTime) {
            this.queryCompilationTime = queryCompilationTime;
            this.logicalPlanBuildTime = logicalPlanBuildTime;
            this.physicalPlanBuildTime = physicalPlanBuildTime;
            this.queryOptimizationTime = queryOptimizationTime;
        }
        /**
         * returns a new QueryPreparationTimes instance that is the addition of this and the arguments.
         */
        add(...queryPreparationTimesArray) {
            if (arguments == null || arguments.length === 0) {
                throw new Error("arguments was null or empty");
            }
            let queryCompilationTime = this.queryCompilationTime;
            let logicalPlanBuildTime = this.logicalPlanBuildTime;
            let physicalPlanBuildTime = this.physicalPlanBuildTime;
            let queryOptimizationTime = this.queryOptimizationTime;
            for (const queryPreparationTimes of queryPreparationTimesArray) {
                if (queryPreparationTimes == null) {
                    throw new Error("queryPreparationTimesArray has null or undefined item(s)");
                }
                queryCompilationTime = queryCompilationTime.add(queryPreparationTimes.queryCompilationTime);
                logicalPlanBuildTime = logicalPlanBuildTime.add(queryPreparationTimes.logicalPlanBuildTime);
                physicalPlanBuildTime = physicalPlanBuildTime.add(queryPreparationTimes.physicalPlanBuildTime);
                queryOptimizationTime = queryOptimizationTime.add(queryPreparationTimes.queryOptimizationTime);
            }
            return new QueryPreparationTimes(queryCompilationTime, logicalPlanBuildTime, physicalPlanBuildTime, queryOptimizationTime);
        }
        /**
         * Output the QueryPreparationTimes as a delimited string.
         */
        toDelimitedString() {
            return (`${QueryMetricsConstants.QueryCompileTimeInMs}=${this.queryCompilationTime.totalMilliseconds()};` +
                `${QueryMetricsConstants.LogicalPlanBuildTimeInMs}=${this.logicalPlanBuildTime.totalMilliseconds()};` +
                `${QueryMetricsConstants.PhysicalPlanBuildTimeInMs}=${this.physicalPlanBuildTime.totalMilliseconds()};` +
                `${QueryMetricsConstants.QueryOptimizationTimeInMs}=${this.queryOptimizationTime.totalMilliseconds()}`);
        }
        /**
         * Returns a new instance of the QueryPreparationTimes class that is the
         * aggregation of an array of QueryPreparationTimes.
         * @memberof QueryMetrics
         * @instance
         */
        static createFromArray(queryPreparationTimesArray) {
            if (queryPreparationTimesArray == null) {
                throw new Error("queryPreparationTimesArray is null or undefined item(s)");
            }
            return QueryPreparationTimes.zero.add(...queryPreparationTimesArray);
        }
        /**
         * Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.
         * @memberof QueryMetrics
         * @instance
         */
        static createFromDelimitedString(delimitedString) {
            const metrics = QueryMetricsUtils.parseDelimitedString(delimitedString);
            return new QueryPreparationTimes(QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryCompileTimeInMs), QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.LogicalPlanBuildTimeInMs), QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.PhysicalPlanBuildTimeInMs), QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryOptimizationTimeInMs));
        }
    }
    QueryPreparationTimes.zero = new QueryPreparationTimes(TimeSpan.zero, TimeSpan.zero, TimeSpan.zero, TimeSpan.zero);

    class RuntimeExecutionTimes {
        constructor(queryEngineExecutionTime, systemFunctionExecutionTime, userDefinedFunctionExecutionTime) {
            this.queryEngineExecutionTime = queryEngineExecutionTime;
            this.systemFunctionExecutionTime = systemFunctionExecutionTime;
            this.userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime;
        }
        /**
         * returns a new RuntimeExecutionTimes instance that is the addition of this and the arguments.
         */
        add(...runtimeExecutionTimesArray) {
            if (arguments == null || arguments.length === 0) {
                throw new Error("arguments was null or empty");
            }
            let queryEngineExecutionTime = this.queryEngineExecutionTime;
            let systemFunctionExecutionTime = this.systemFunctionExecutionTime;
            let userDefinedFunctionExecutionTime = this.userDefinedFunctionExecutionTime;
            for (const runtimeExecutionTimes of runtimeExecutionTimesArray) {
                if (runtimeExecutionTimes == null) {
                    throw new Error("runtimeExecutionTimes has null or undefined item(s)");
                }
                queryEngineExecutionTime = queryEngineExecutionTime.add(runtimeExecutionTimes.queryEngineExecutionTime);
                systemFunctionExecutionTime = systemFunctionExecutionTime.add(runtimeExecutionTimes.systemFunctionExecutionTime);
                userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime.add(runtimeExecutionTimes.userDefinedFunctionExecutionTime);
            }
            return new RuntimeExecutionTimes(queryEngineExecutionTime, systemFunctionExecutionTime, userDefinedFunctionExecutionTime);
        }
        /**
         * Output the RuntimeExecutionTimes as a delimited string.
         */
        toDelimitedString() {
            // tslint:disable-next-line:max-line-length
            return (`${QueryMetricsConstants.SystemFunctionExecuteTimeInMs}=${this.systemFunctionExecutionTime.totalMilliseconds()};` +
                // tslint:disable-next-line:max-line-length
                `${QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs}=${this.userDefinedFunctionExecutionTime.totalMilliseconds()}`);
        }
        /**
         * Returns a new instance of the RuntimeExecutionTimes class that is
         *  the aggregation of an array of RuntimeExecutionTimes.
         */
        static createFromArray(runtimeExecutionTimesArray) {
            if (runtimeExecutionTimesArray == null) {
                throw new Error("runtimeExecutionTimesArray is null or undefined item(s)");
            }
            return RuntimeExecutionTimes.zero.add(...runtimeExecutionTimesArray);
        }
        /**
         * Returns a new instance of the RuntimeExecutionTimes class this is deserialized from a delimited string.
         */
        static createFromDelimitedString(delimitedString) {
            const metrics = QueryMetricsUtils.parseDelimitedString(delimitedString);
            const vmExecutionTime = QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs);
            const indexLookupTime = QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs);
            const documentLoadTime = QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs);
            const documentWriteTime = QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs);
            let queryEngineExecutionTime = TimeSpan.zero;
            queryEngineExecutionTime = queryEngineExecutionTime.add(vmExecutionTime);
            queryEngineExecutionTime = queryEngineExecutionTime.subtract(indexLookupTime);
            queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentLoadTime);
            queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentWriteTime);
            return new RuntimeExecutionTimes(queryEngineExecutionTime, QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.SystemFunctionExecuteTimeInMs), QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs));
        }
    }
    RuntimeExecutionTimes.zero = new RuntimeExecutionTimes(TimeSpan.zero, TimeSpan.zero, TimeSpan.zero);

    class QueryMetrics {
        constructor(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitDocumentCount, totalQueryExecutionTime, queryPreparationTimes, indexLookupTime, documentLoadTime, vmExecutionTime, runtimeExecutionTimes, documentWriteTime, clientSideMetrics) {
            this.retrievedDocumentCount = retrievedDocumentCount;
            this.retrievedDocumentSize = retrievedDocumentSize;
            this.outputDocumentCount = outputDocumentCount;
            this.outputDocumentSize = outputDocumentSize;
            this.indexHitDocumentCount = indexHitDocumentCount;
            this.totalQueryExecutionTime = totalQueryExecutionTime;
            this.queryPreparationTimes = queryPreparationTimes;
            this.indexLookupTime = indexLookupTime;
            this.documentLoadTime = documentLoadTime;
            this.vmExecutionTime = vmExecutionTime;
            this.runtimeExecutionTimes = runtimeExecutionTimes;
            this.documentWriteTime = documentWriteTime;
            this.clientSideMetrics = clientSideMetrics;
        }
        /**
         * Gets the IndexHitRatio
         * @memberof QueryMetrics
         * @instance
         * @ignore
         */
        get indexHitRatio() {
            return this.retrievedDocumentCount === 0 ? 1 : this.indexHitDocumentCount / this.retrievedDocumentCount;
        }
        /**
         * returns a new QueryMetrics instance that is the addition of this and the arguments.
         */
        add(queryMetricsArray) {
            if (arguments == null || arguments.length === 0) {
                throw new Error("arguments was null or empty");
            }
            let retrievedDocumentCount = 0;
            let retrievedDocumentSize = 0;
            let outputDocumentCount = 0;
            let outputDocumentSize = 0;
            let indexHitDocumentCount = 0;
            let totalQueryExecutionTime = TimeSpan.zero;
            const queryPreparationTimesArray = [];
            let indexLookupTime = TimeSpan.zero;
            let documentLoadTime = TimeSpan.zero;
            let vmExecutionTime = TimeSpan.zero;
            const runtimeExecutionTimesArray = [];
            let documentWriteTime = TimeSpan.zero;
            const clientSideQueryMetricsArray = [];
            queryMetricsArray.push(this);
            for (const queryMetrics of queryMetricsArray) {
                if (queryMetrics == null) {
                    throw new Error("queryMetricsArray has null or undefined item(s)");
                }
                retrievedDocumentCount += queryMetrics.retrievedDocumentCount;
                retrievedDocumentSize += queryMetrics.retrievedDocumentSize;
                outputDocumentCount += queryMetrics.outputDocumentCount;
                outputDocumentSize += queryMetrics.outputDocumentSize;
                indexHitDocumentCount += queryMetrics.indexHitDocumentCount;
                totalQueryExecutionTime = totalQueryExecutionTime.add(queryMetrics.totalQueryExecutionTime);
                queryPreparationTimesArray.push(queryMetrics.queryPreparationTimes);
                indexLookupTime = indexLookupTime.add(queryMetrics.indexLookupTime);
                documentLoadTime = documentLoadTime.add(queryMetrics.documentLoadTime);
                vmExecutionTime = vmExecutionTime.add(queryMetrics.vmExecutionTime);
                runtimeExecutionTimesArray.push(queryMetrics.runtimeExecutionTimes);
                documentWriteTime = documentWriteTime.add(queryMetrics.documentWriteTime);
                clientSideQueryMetricsArray.push(queryMetrics.clientSideMetrics);
            }
            return new QueryMetrics(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitDocumentCount, totalQueryExecutionTime, QueryPreparationTimes.createFromArray(queryPreparationTimesArray), indexLookupTime, documentLoadTime, vmExecutionTime, RuntimeExecutionTimes.createFromArray(runtimeExecutionTimesArray), documentWriteTime, ClientSideMetrics.createFromArray(...clientSideQueryMetricsArray));
        }
        /**
         * Output the QueryMetrics as a delimited string.
         * @memberof QueryMetrics
         * @instance
         * @ignore
         */
        toDelimitedString() {
            return (QueryMetricsConstants.RetrievedDocumentCount +
                "=" +
                this.retrievedDocumentCount +
                ";" +
                QueryMetricsConstants.RetrievedDocumentSize +
                "=" +
                this.retrievedDocumentSize +
                ";" +
                QueryMetricsConstants.OutputDocumentCount +
                "=" +
                this.outputDocumentCount +
                ";" +
                QueryMetricsConstants.OutputDocumentSize +
                "=" +
                this.outputDocumentSize +
                ";" +
                QueryMetricsConstants.IndexHitRatio +
                "=" +
                this.indexHitRatio +
                ";" +
                QueryMetricsConstants.TotalQueryExecutionTimeInMs +
                "=" +
                this.totalQueryExecutionTime.totalMilliseconds() +
                ";" +
                this.queryPreparationTimes.toDelimitedString() +
                ";" +
                QueryMetricsConstants.IndexLookupTimeInMs +
                "=" +
                this.indexLookupTime.totalMilliseconds() +
                ";" +
                QueryMetricsConstants.DocumentLoadTimeInMs +
                "=" +
                this.documentLoadTime.totalMilliseconds() +
                ";" +
                QueryMetricsConstants.VMExecutionTimeInMs +
                "=" +
                this.vmExecutionTime.totalMilliseconds() +
                ";" +
                this.runtimeExecutionTimes.toDelimitedString() +
                ";" +
                QueryMetricsConstants.DocumentWriteTimeInMs +
                "=" +
                this.documentWriteTime.totalMilliseconds());
        }
        /**
         * Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.
         * @memberof QueryMetrics
         * @instance
         */
        static createFromArray(queryMetricsArray) {
            if (queryMetricsArray == null) {
                throw new Error("queryMetricsArray is null or undefined item(s)");
            }
            return QueryMetrics.zero.add(queryMetricsArray);
        }
        /**
         * Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.
         * @memberof QueryMetrics
         * @instance
         */
        static createFromDelimitedString(delimitedString, clientSideMetrics) {
            const metrics = QueryMetricsUtils.parseDelimitedString(delimitedString);
            const indexHitRatio = metrics[QueryMetricsConstants.IndexHitRatio] || 0;
            const retrievedDocumentCount = metrics[QueryMetricsConstants.RetrievedDocumentCount] || 0;
            const indexHitCount = indexHitRatio * retrievedDocumentCount;
            const outputDocumentCount = metrics[QueryMetricsConstants.OutputDocumentCount] || 0;
            const outputDocumentSize = metrics[QueryMetricsConstants.OutputDocumentSize] || 0;
            const retrievedDocumentSize = metrics[QueryMetricsConstants.RetrievedDocumentSize] || 0;
            const totalQueryExecutionTime = QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.TotalQueryExecutionTimeInMs);
            return new QueryMetrics(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitCount, totalQueryExecutionTime, QueryPreparationTimes.createFromDelimitedString(delimitedString), QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs), QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs), QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs), RuntimeExecutionTimes.createFromDelimitedString(delimitedString), QueryMetricsUtils.timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs), clientSideMetrics || ClientSideMetrics.zero);
        }
    }
    QueryMetrics.zero = new QueryMetrics(0, 0, 0, 0, 0, TimeSpan.zero, QueryPreparationTimes.zero, TimeSpan.zero, TimeSpan.zero, TimeSpan.zero, RuntimeExecutionTimes.zero, TimeSpan.zero, ClientSideMetrics.zero);

    /** @hidden */
    // TODO: docs
    class HeaderUtils {
        static getRequestChargeIfAny(headers) {
            if (typeof headers === "number") {
                return headers;
            }
            else if (typeof headers === "string") {
                return parseFloat(headers);
            }
            if (headers) {
                const rc = headers[Constants.HttpHeaders.RequestCharge];
                if (rc) {
                    return parseFloat(rc);
                }
                else {
                    return 0;
                }
            }
            else {
                return 0;
            }
        }
        static getInitialHeader() {
            const headers = {};
            headers[Constants.HttpHeaders.RequestCharge] = 0;
            headers[Constants.HttpHeaders.QueryMetrics] = {};
            return headers;
        }
        // TODO: The name of this method isn't very accurate to what it does
        static mergeHeaders(headers, toBeMergedHeaders) {
            if (headers[Constants.HttpHeaders.RequestCharge] === undefined) {
                headers[Constants.HttpHeaders.RequestCharge] = 0;
            }
            if (headers[Constants.HttpHeaders.QueryMetrics] === undefined) {
                headers[Constants.HttpHeaders.QueryMetrics] = QueryMetrics.zero;
            }
            if (!toBeMergedHeaders) {
                return;
            }
            headers[Constants.HttpHeaders.RequestCharge] += HeaderUtils.getRequestChargeIfAny(toBeMergedHeaders);
            if (toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed]) {
                headers[Constants.HttpHeaders.IsRUPerMinuteUsed] = toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed];
            }
            if (Constants.HttpHeaders.QueryMetrics in toBeMergedHeaders) {
                const headerQueryMetrics = headers[Constants.HttpHeaders.QueryMetrics];
                const toBeMergedHeaderQueryMetrics = toBeMergedHeaders[Constants.HttpHeaders.QueryMetrics];
                for (const partitionId in toBeMergedHeaderQueryMetrics) {
                    if (partitionId in headerQueryMetrics) {
                        const combinedQueryMetrics = headerQueryMetrics[partitionId].add(toBeMergedHeaderQueryMetrics[partitionId]);
                        headerQueryMetrics[partitionId] = combinedQueryMetrics;
                    }
                    else {
                        headerQueryMetrics[partitionId] = toBeMergedHeaderQueryMetrics[partitionId];
                    }
                }
            }
        }
    }

    /** @hidden */
    var STATES;
    (function (STATES) {
        STATES["start"] = "start";
        STATES["inProgress"] = "inProgress";
        STATES["ended"] = "ended";
    })(STATES || (STATES = {}));
    /** @hidden */
    class DefaultQueryExecutionContext {
        /**
         * Provides the basic Query Execution Context.
         * This wraps the internal logic query execution using provided fetch functions
         * @constructor DefaultQueryExecutionContext
         * @param {ClientContext} clientContext          - Is used to read the partitionKeyRanges for split proofing
         * @param {SqlQuerySpec | string} query          - A SQL query.
         * @param {FeedOptions} [options]                - Represents the feed options.
         * @param {callback | callback[]} fetchFunctions - A function to retrieve each page of data.
         *                          An array of functions may be used to query more than one partition.
         * @ignore
         */
        constructor(clientContext, query, options, fetchFunctions) {
            this.clientContext = clientContext;
            // TODO: any options
            this.query = query;
            this.resources = [];
            this.currentIndex = 0;
            this.currentPartitionIndex = 0;
            this.fetchFunctions = Array.isArray(fetchFunctions) ? fetchFunctions : [fetchFunctions];
            this.options = options || {};
            this.continuation = this.options.continuation || null;
            this.state = DefaultQueryExecutionContext.STATES.start;
        }
        /**
         * Execute a provided callback on the next element in the execution context.
         * @memberof DefaultQueryExecutionContext
         * @instance
         */
        nextItem() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                ++this.currentIndex;
                const response = yield this.current();
                return response;
            });
        }
        /**
         * Retrieve the current element on the execution context.
         * @memberof DefaultQueryExecutionContext
         * @instance
         */
        current() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.currentIndex < this.resources.length) {
                    return {
                        result: this.resources[this.currentIndex],
                        headers: undefined
                    };
                }
                if (this._canFetchMore()) {
                    const { result: resources, headers } = yield this.fetchMore();
                    // if (err) {
                    //     return callback(err, undefined, headers);
                    // }
                    // TODO: returning data and error is an anti-pattern
                    this.resources = resources;
                    if (this.resources.length === 0) {
                        if (!this.continuation && this.currentPartitionIndex >= this.fetchFunctions.length) {
                            this.state = DefaultQueryExecutionContext.STATES.ended;
                            return { result: undefined, headers };
                        }
                        else {
                            return this.current();
                        }
                    }
                    return { result: this.resources[this.currentIndex], headers };
                }
                else {
                    this.state = DefaultQueryExecutionContext.STATES.ended;
                    return { result: undefined, headers: undefined };
                }
            });
        }
        /**
         * Determine if there are still remaining resources to processs based on
         * the value of the continuation token or the elements remaining on the current batch in the execution context.
         * @memberof DefaultQueryExecutionContext
         * @instance
         * @returns {Boolean} true if there is other elements to process in the DefaultQueryExecutionContext.
         */
        hasMoreResults() {
            return (this.state === DefaultQueryExecutionContext.STATES.start ||
                this.continuation !== undefined ||
                this.currentIndex < this.resources.length - 1 ||
                this.currentPartitionIndex < this.fetchFunctions.length);
        }
        /**
         * Fetches the next batch of the feed and pass them as an array to a callback
         * @memberof DefaultQueryExecutionContext
         * @instance
         */
        fetchMore() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.currentPartitionIndex >= this.fetchFunctions.length) {
                    return { headers: undefined, result: undefined };
                }
                // Keep to the original continuation and to restore the value after fetchFunction call
                const originalContinuation = this.options.continuation;
                this.options.continuation = this.continuation;
                // Return undefined if there is no more results
                if (this.currentPartitionIndex >= this.fetchFunctions.length) {
                    return { headers: undefined, result: undefined };
                }
                const fetchFunction = this.fetchFunctions[this.currentPartitionIndex];
                let resources;
                let responseHeaders;
                try {
                    const response = yield fetchFunction(this.options);
                    resources = response.result;
                    responseHeaders = response.headers;
                }
                catch (err) {
                    this.state = DefaultQueryExecutionContext.STATES.ended;
                    // return callback(err, undefined, responseHeaders);
                    // TODO: Error and data being returned is an antipattern, this might broken
                    throw err;
                }
                this.continuation = responseHeaders[Constants.HttpHeaders.Continuation];
                if (!this.continuation) {
                    ++this.currentPartitionIndex;
                }
                this.state = DefaultQueryExecutionContext.STATES.inProgress;
                this.currentIndex = 0;
                this.options.continuation = originalContinuation;
                // deserializing query metrics so that we aren't working with delimited strings in the rest of the code base
                if (Constants.HttpHeaders.QueryMetrics in responseHeaders) {
                    const delimitedString = responseHeaders[Constants.HttpHeaders.QueryMetrics];
                    let queryMetrics = QueryMetrics.createFromDelimitedString(delimitedString);
                    // Add the request charge to the query metrics so that we can have per partition request charge.
                    if (Constants.HttpHeaders.RequestCharge in responseHeaders) {
                        queryMetrics = new QueryMetrics(queryMetrics.retrievedDocumentCount, queryMetrics.retrievedDocumentSize, queryMetrics.outputDocumentCount, queryMetrics.outputDocumentSize, queryMetrics.indexHitDocumentCount, queryMetrics.totalQueryExecutionTime, queryMetrics.queryPreparationTimes, queryMetrics.indexLookupTime, queryMetrics.documentLoadTime, queryMetrics.vmExecutionTime, queryMetrics.runtimeExecutionTimes, queryMetrics.documentWriteTime, new ClientSideMetrics(responseHeaders[Constants.HttpHeaders.RequestCharge]));
                    }
                    // Wraping query metrics in a object where the key is '0' just so single partition
                    // and partition queries have the same response schema
                    responseHeaders[Constants.HttpHeaders.QueryMetrics] = {};
                    responseHeaders[Constants.HttpHeaders.QueryMetrics]["0"] = queryMetrics;
                }
                return { result: resources, headers: responseHeaders };
            });
        }
        _canFetchMore() {
            const res = this.state === DefaultQueryExecutionContext.STATES.start ||
                (this.continuation && this.state === DefaultQueryExecutionContext.STATES.inProgress) ||
                (this.currentPartitionIndex < this.fetchFunctions.length &&
                    this.state === DefaultQueryExecutionContext.STATES.inProgress);
            return res;
        }
    }
    DefaultQueryExecutionContext.STATES = STATES;

    /** @hidden */
    class AverageAggregator {
        /**
         * Add the provided item to aggregation result.
         * @memberof AverageAggregator
         * @instance
         * @param other
         */
        aggregate(other) {
            if (other == null || other.sum == null) {
                return;
            }
            if (this.sum == null) {
                this.sum = 0.0;
                this.count = 0;
            }
            this.sum += other.sum;
            this.count += other.count;
        }
        /**
         * Get the aggregation result.
         * @memberof AverageAggregator
         * @instance
         */
        getResult() {
            if (this.sum == null || this.count <= 0) {
                return undefined;
            }
            return this.sum / this.count;
        }
    }

    /** @hidden */
    class CountAggregator {
        /**
         * Represents an aggregator for COUNT operator.
         * @constructor CountAggregator
         * @ignore
         */
        constructor() {
            this.value = 0;
        }
        /**
         * Add the provided item to aggregation result.
         * @memberof CountAggregator
         * @instance
         * @param other
         */
        aggregate(other) {
            this.value += other;
        }
        /**
         * Get the aggregation result.
         * @memberof CountAggregator
         * @instance
         */
        getResult() {
            return this.value;
        }
    }

    // TODO: this smells funny
    /** @hidden */
    const TYPEORDCOMPARATOR = Object.freeze({
        NoValue: {
            ord: 0
        },
        undefined: {
            ord: 1
        },
        boolean: {
            ord: 2,
            compFunc: (a, b) => {
                return a === b ? 0 : a > b ? 1 : -1;
            }
        },
        number: {
            ord: 4,
            compFunc: (a, b) => {
                return a === b ? 0 : a > b ? 1 : -1;
            }
        },
        string: {
            ord: 5,
            compFunc: (a, b) => {
                return a === b ? 0 : a > b ? 1 : -1;
            }
        }
    });
    /** @hidden */
    class OrderByDocumentProducerComparator {
        constructor(sortOrder) {
            this.sortOrder = sortOrder;
        } // TODO: This should be an enum
        targetPartitionKeyRangeDocProdComparator(docProd1, docProd2) {
            const a = docProd1.getTargetParitionKeyRange()["minInclusive"];
            const b = docProd2.getTargetParitionKeyRange()["minInclusive"];
            return a === b ? 0 : a > b ? 1 : -1;
        }
        compare(docProd1, docProd2) {
            // Need to check for split, since we don't want to dereference "item" of undefined / exception
            if (docProd1.gotSplit()) {
                return -1;
            }
            if (docProd2.gotSplit()) {
                return 1;
            }
            const orderByItemsRes1 = this.getOrderByItems(docProd1.peekBufferedItems()[0]);
            const orderByItemsRes2 = this.getOrderByItems(docProd2.peekBufferedItems()[0]);
            // validate order by items and types
            // TODO: once V1 order by on different types is fixed this need to change
            this.validateOrderByItems(orderByItemsRes1, orderByItemsRes2);
            // no async call in the for loop
            for (let i = 0; i < orderByItemsRes1.length; i++) {
                // compares the orderby items one by one
                const compRes = this.compareOrderByItem(orderByItemsRes1[i], orderByItemsRes2[i]);
                if (compRes !== 0) {
                    if (this.sortOrder[i] === "Ascending") {
                        return compRes;
                    }
                    else if (this.sortOrder[i] === "Descending") {
                        return -compRes;
                    }
                }
            }
            return this.targetPartitionKeyRangeDocProdComparator(docProd1, docProd2);
        }
        // TODO: This smells funny
        compareValue(item1, type1, item2, type2) {
            const type1Ord = TYPEORDCOMPARATOR[type1].ord;
            const type2Ord = TYPEORDCOMPARATOR[type2].ord;
            const typeCmp = type1Ord - type2Ord;
            if (typeCmp !== 0) {
                // if the types are different, use type ordinal
                return typeCmp;
            }
            // both are of the same type
            if (type1Ord === TYPEORDCOMPARATOR["undefined"].ord || type1Ord === TYPEORDCOMPARATOR["NoValue"].ord) {
                // if both types are undefined or Null they are equal
                return 0;
            }
            const compFunc = TYPEORDCOMPARATOR[type1].compFunc;
            assert.notEqual(compFunc, undefined, "cannot find the comparison function");
            // same type and type is defined compare the items
            return compFunc(item1, item2);
        }
        compareOrderByItem(orderByItem1, orderByItem2) {
            const type1 = this.getType(orderByItem1);
            const type2 = this.getType(orderByItem2);
            return this.compareValue(orderByItem1["item"], type1, orderByItem2["item"], type2);
        }
        validateOrderByItems(res1, res2) {
            this._throwIf(res1.length !== res2.length, util.format("Expected %s, but got %s.", res1.length, res2.length));
            this._throwIf(res1.length !== this.sortOrder.length, "orderByItems cannot have a different size than sort orders.");
            for (let i = 0; i < this.sortOrder.length; i++) {
                const type1 = this.getType(res1[i]);
                const type2 = this.getType(res2[i]);
                this._throwIf(type1 !== type2, util.format("Expected %s, but got %s.", type1, type2));
            }
        }
        getType(orderByItem) {
            // TODO: any item?
            if (orderByItem === undefined || orderByItem.item === undefined) {
                return "NoValue";
            }
            const type = typeof orderByItem.item;
            this._throwIf(TYPEORDCOMPARATOR[type] === undefined, util.format("unrecognizable type %s", type));
            return type;
        }
        getOrderByItems(res) {
            // TODO: any res?
            return res["orderByItems"];
        }
        // TODO: this should be done differently...
        _throwIf(condition, msg) {
            if (condition) {
                throw Error(msg);
            }
        }
    }

    /** @hidden */
    class MaxAggregator {
        /**
         * Represents an aggregator for MAX operator.
         * @constructor MaxAggregator
         * @ignore
         */
        constructor() {
            this.value = undefined;
            this.comparer = new OrderByDocumentProducerComparator(["Ascending"]);
        }
        /**
         * Add the provided item to aggregation result.
         * @memberof MaxAggregator
         * @instance
         * @param other
         */
        aggregate(other) {
            if (this.value === undefined) {
                this.value = other;
            }
            else if (this.comparer.compareValue(other, typeof other, this.value, typeof this.value) > 0) {
                this.value = other;
            }
        }
        /**
         * Get the aggregation result.
         * @memberof MaxAggregator
         * @instance
         */
        getResult() {
            return this.value;
        }
    }

    /** @hidden */
    class MinAggregator {
        /**
         * Represents an aggregator for MIN operator.
         * @constructor MinAggregator
         * @ignore
         */
        constructor() {
            this.value = undefined;
            this.comparer = new OrderByDocumentProducerComparator(["Ascending"]);
        }
        /**
         * Add the provided item to aggregation result.
         * @memberof MinAggregator
         * @instance
         * @param other
         */
        aggregate(other) {
            if (this.value === undefined) {
                this.value = other;
            }
            else {
                const otherType = other == null ? "NoValue" : typeof other;
                if (this.comparer.compareValue(other, otherType, this.value, typeof this.value) < 0) {
                    this.value = other;
                }
            }
        }
        /**
         * Get the aggregation result.
         * @memberof MinAggregator
         * @instance
         */
        getResult() {
            return this.value;
        }
    }

    /** @hidden */
    class SumAggregator {
        /**
         * Add the provided item to aggregation result.
         * @memberof SumAggregator
         * @instance
         * @param other
         */
        aggregate(other) {
            if (other === undefined) {
                return;
            }
            if (this.sum === undefined) {
                this.sum = other;
            }
            else {
                this.sum += other;
            }
        }
        /**
         * Get the aggregation result.
         * @memberof SumAggregator
         * @instance
         */
        getResult() {
            return this.sum;
        }
    }

    /** @hidden */
    class AggregateEndpointComponent {
        /**
         * Represents an endpoint in handling aggregate queries.
         * @constructor AggregateEndpointComponent
         * @param { object } executionContext - Underlying Execution Context
         * @ignore
         */
        constructor(executionContext, aggregateOperators) {
            this.executionContext = executionContext;
            // TODO: any
            this.executionContext = executionContext;
            this.localAggregators = [];
            aggregateOperators.forEach((aggregateOperator) => {
                switch (aggregateOperator) {
                    case "Average":
                        this.localAggregators.push(new AverageAggregator());
                        break;
                    case "Count":
                        this.localAggregators.push(new CountAggregator());
                        break;
                    case "Max":
                        this.localAggregators.push(new MaxAggregator());
                        break;
                    case "Min":
                        this.localAggregators.push(new MinAggregator());
                        break;
                    case "Sum":
                        this.localAggregators.push(new SumAggregator());
                        break;
                }
            });
        }
        /**
         * Populate the aggregated values
         * @ignore
         */
        _getAggregateResult() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                this.toArrayTempResources = [];
                this.aggregateValues = [];
                this.aggregateValuesIndex = -1;
                try {
                    const { result: resources, headers } = yield this._getQueryResults();
                    resources.forEach((resource) => {
                        // TODO: any
                        this.localAggregators.forEach(aggregator => {
                            let itemValue;
                            // Get the value of the first property if it exists
                            if (resource && Object.keys(resource).length > 0) {
                                const key = Object.keys(resource)[0];
                                itemValue = resource[key];
                            }
                            aggregator.aggregate(itemValue);
                        });
                    });
                    // Get the aggregated results
                    this.localAggregators.forEach(aggregator => {
                        this.aggregateValues.push(aggregator.getResult());
                    });
                    return { result: this.aggregateValues, headers };
                }
                catch (err) {
                    throw err;
                }
            });
        }
        /**
         * Get the results of queries from all partitions
         * @ignore
         */
        _getQueryResults() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const { result: item, headers } = yield this.executionContext.nextItem();
                    if (item === undefined) {
                        // no more results
                        return { result: this.toArrayTempResources, headers };
                    }
                    this.toArrayTempResources = this.toArrayTempResources.concat(item);
                    return this._getQueryResults();
                }
                catch (err) {
                    throw err;
                }
            });
        }
        /**
         * Execute a provided function on the next element in the AggregateEndpointComponent.
         * @memberof AggregateEndpointComponent
         * @instance
         * @param {callback} callback - Function to execute for each element. \
         * the function takes two parameters error, element.
         */
        nextItem() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    let resHeaders;
                    let resources;
                    if (this.aggregateValues === undefined) {
                        ({ result: resources, headers: resHeaders } = yield this._getAggregateResult());
                    }
                    const resource = this.aggregateValuesIndex < this.aggregateValues.length
                        ? this.aggregateValues[++this.aggregateValuesIndex]
                        : undefined;
                    return { result: resource, headers: resHeaders };
                }
                catch (err) {
                    throw err;
                }
            });
        }
        /**
         * Retrieve the current element on the AggregateEndpointComponent.
         * @memberof AggregateEndpointComponent
         * @instance
         * @param {callback} callback - Function to execute for the current element. \
         * the function takes two parameters error, element.
         */
        current() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.aggregateValues === undefined) {
                    const { result: resouces, headers } = yield this._getAggregateResult();
                    return {
                        result: this.aggregateValues[this.aggregateValuesIndex],
                        headers
                    };
                }
                else {
                    return {
                        result: this.aggregateValues[this.aggregateValuesIndex],
                        headers: undefined
                    };
                }
            });
        }
        /**
         * Determine if there are still remaining resources to processs.
         * @memberof AggregateEndpointComponent
         * @instance
         * @returns {Boolean} true if there is other elements to process in the AggregateEndpointComponent.
         */
        hasMoreResults() {
            return this.aggregateValues != null && this.aggregateValuesIndex < this.aggregateValues.length - 1;
        }
    }

    /** @hidden */
    class OrderByEndpointComponent {
        /**
         * Represents an endpoint in handling an order by query. For each processed orderby \
         * result it returns 'payload' item of the result
         * @constructor OrderByEndpointComponent
         * @param {object} executionContext              - Underlying Execution Context
         * @ignore
         */
        constructor(executionContext) {
            this.executionContext = executionContext;
        }
        /**
         * Execute a provided function on the next element in the OrderByEndpointComponent.
         * @memberof OrderByEndpointComponent
         * @instance
         * @param {callback} callback - Function to execute for each element. the function \
         * takes two parameters error, element.
         */
        nextItem() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const { result: item, headers } = yield this.executionContext.nextItem();
                    return {
                        result: item !== undefined ? item.payload : undefined,
                        headers
                    };
                }
                catch (err) {
                    throw err;
                }
            });
        }
        /**
         * Retrieve the current element on the OrderByEndpointComponent.
         * @memberof OrderByEndpointComponent
         * @instance
         * @param {callback} callback - Function to execute for the current element. \
         * the function takes two parameters error, element.
         */
        current() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const { result: item, headers } = yield this.executionContext.current();
                    return {
                        result: item !== undefined ? item.payload : undefined,
                        headers
                    };
                }
                catch (err) {
                    throw err;
                }
            });
        }
        /**
         * Determine if there are still remaining resources to processs.
         * @memberof OrderByEndpointComponent
         * @instance
         * @returns {Boolean} true if there is other elements to process in the OrderByEndpointComponent.
         */
        hasMoreResults() {
            return this.executionContext.hasMoreResults();
        }
    }

    /** @hidden */
    class TopEndpointComponent {
        /**
         * Represents an endpoint in handling top query. It only returns as many results as top arg specified.
         * @constructor TopEndpointComponent
         * @param { object } executionContext - Underlying Execution Context
         * @ignore
         */
        constructor(executionContext, topCount) {
            this.executionContext = executionContext;
            this.topCount = topCount;
        }
        /**
         * Execute a provided function on the next element in the TopEndpointComponent.
         * @memberof TopEndpointComponent
         * @instance
         * @param {callback} callback - Function to execute for each element. \
         * the function takes two parameters error, element.
         */
        nextItem() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.topCount <= 0) {
                    return { result: undefined, headers: undefined };
                }
                this.topCount--;
                try {
                    return this.executionContext.nextItem();
                }
                catch (err) {
                    throw err;
                }
            });
        }
        /**
         * Retrieve the current element on the TopEndpointComponent.
         * @memberof TopEndpointComponent
         * @instance
         * @param {callback} callback - Function to execute for the current element. \
         * the function takes two parameters error, element.
         */
        current() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.topCount <= 0) {
                    return { result: undefined, headers: undefined };
                }
                try {
                    return this.executionContext.current();
                }
                catch (err) {
                    throw err;
                }
            });
        }
        /**
         * Determine if there are still remaining resources to processs.
         * @memberof TopEndpointComponent
         * @instance
         * @returns {Boolean} true if there is other elements to process in the TopEndpointComponent.
         */
        hasMoreResults() {
            return this.topCount > 0 && this.executionContext.hasMoreResults();
        }
    }

    /** @hidden */
    var FetchResultType;
    (function (FetchResultType) {
        FetchResultType[FetchResultType["Done"] = 0] = "Done";
        FetchResultType[FetchResultType["Exception"] = 1] = "Exception";
        FetchResultType[FetchResultType["Result"] = 2] = "Result";
    })(FetchResultType || (FetchResultType = {}));
    /** @hidden */
    class FetchResult {
        /**
         * Wraps fetch results for the document producer.
         * This allows the document producer to buffer exceptions so that actual results don't get flushed during splits.
         * @constructor DocumentProducer
         * @param {object} feedReponse                  - The response the document producer got back on a successful fetch
         * @param {object} error                        - The exception meant to be buffered on an unsuccessful fetch
         * @ignore
         */
        constructor(feedResponse, error) {
            // TODO: feedResponse/error
            if (feedResponse) {
                this.feedResponse = feedResponse;
                this.fetchResultType = FetchResultType.Result;
            }
            else {
                this.error = error;
                this.fetchResultType = FetchResultType.Exception;
            }
        }
    }

    /** @hidden */
    var DocumentProducerStates;
    (function (DocumentProducerStates) {
        DocumentProducerStates["started"] = "started";
        DocumentProducerStates["inProgress"] = "inProgress";
        DocumentProducerStates["ended"] = "ended";
    })(DocumentProducerStates || (DocumentProducerStates = {}));
    /** @hidden */
    class DocumentProducer {
        /**
         * Provides the Target Partition Range Query Execution Context.
         * @constructor DocumentProducer
         * @param {ClientContext} clientContext        - The service endpoint to use to create the client.
         * @param {String} collectionLink                - Represents collection link
         * @param {SqlQuerySpec | string} query          - A SQL query.
         * @param {object} targetPartitionKeyRange       - Query Target Partition key Range
         * @ignore
         */
        constructor(clientContext, collectionLink, query, targetPartitionKeyRange, // TODO: any partition key range
        options) {
            this.clientContext = clientContext;
            this.fetchFunction = (options) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.collectionLink, "docs");
                const id = Helper$$1.getIdFromLink(this.collectionLink);
                return this.clientContext.queryFeed(path, "docs", id, (result) => result.Documents, // TODO: any
                this.query, options, this.targetPartitionKeyRange["id"]);
            });
            // TODO: any options
            this.collectionLink = collectionLink;
            this.query = query;
            this.targetPartitionKeyRange = targetPartitionKeyRange;
            this.fetchResults = [];
            this.state = DocumentProducer.STATES.started;
            this.allFetched = false;
            this.err = undefined;
            this.previousContinuationToken = undefined;
            this.continuationToken = undefined;
            this.respHeaders = HeaderUtils.getInitialHeader();
            // tslint:disable-next-line:no-shadowed-variable
            this.internalExecutionContext = new DefaultQueryExecutionContext(clientContext, query, options, this.fetchFunction);
            this.state = DocumentProducer.STATES.inProgress;
        }
        /**
         * Synchronously gives the contiguous buffered results (stops at the first non result) if any
         * @returns {Object}       - buffered current items if any
         * @ignore
         */
        peekBufferedItems() {
            const bufferedResults = [];
            for (let i = 0, done = false; i < this.fetchResults.length && !done; i++) {
                const fetchResult = this.fetchResults[i];
                switch (fetchResult.fetchResultType) {
                    case FetchResultType.Done:
                        done = true;
                        break;
                    case FetchResultType.Exception:
                        done = true;
                        break;
                    case FetchResultType.Result:
                        bufferedResults.push(fetchResult.feedResponse);
                        break;
                }
            }
            return bufferedResults;
        }
        hasMoreResults() {
            return this.internalExecutionContext.hasMoreResults() || this.fetchResults.length !== 0;
        }
        gotSplit() {
            const fetchResult = this.fetchResults[0];
            if (fetchResult.fetchResultType === FetchResultType.Exception) {
                if (DocumentProducer._needPartitionKeyRangeCacheRefresh(fetchResult.error)) {
                    return true;
                }
            }
            return false;
        }
        _getAndResetActiveResponseHeaders() {
            const ret = this.respHeaders;
            this.respHeaders = HeaderUtils.getInitialHeader();
            return ret;
        }
        _updateStates(err, allFetched) {
            // TODO: any Error
            if (err) {
                this.state = DocumentProducer.STATES.ended;
                this.err = err;
                return;
            }
            if (allFetched) {
                this.allFetched = true;
            }
            if (this.allFetched && this.peekBufferedItems().length === 0) {
                this.state = DocumentProducer.STATES.ended;
            }
            if (this.internalExecutionContext.continuation === this.continuationToken) {
                // nothing changed
                return;
            }
            this.previousContinuationToken = this.continuationToken;
            this.continuationToken = this.internalExecutionContext.continuation;
        }
        static _needPartitionKeyRangeCacheRefresh(error) {
            // TODO: error
            return (error.code === StatusCodes.Gone &&
                "substatus" in error &&
                error["substatus"] === SubStatusCodes.PartitionKeyRangeGone);
        }
        /**
         * Fetches and bufferes the next page of results and executes the given callback
         * @memberof DocumentProducer
         * @instance
         */
        bufferMore() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.err) {
                    throw this.err;
                }
                try {
                    const { result: resources, headers: headerResponse } = yield this.internalExecutionContext.fetchMore();
                    this._updateStates(undefined, resources === undefined);
                    if (resources !== undefined) {
                        // some more results
                        resources.forEach((element) => {
                            // TODO: resources any
                            this.fetchResults.push(new FetchResult(element, undefined));
                        });
                    }
                    // need to modify the header response so that the query metrics are per partition
                    if (headerResponse != null && Constants.HttpHeaders.QueryMetrics in headerResponse) {
                        // "0" is the default partition before one is actually assigned.
                        const queryMetrics = headerResponse[Constants.HttpHeaders.QueryMetrics]["0"];
                        // Wraping query metrics in a object where the keys are the partition key range.
                        headerResponse[Constants.HttpHeaders.QueryMetrics] = {};
                        headerResponse[Constants.HttpHeaders.QueryMetrics][this.targetPartitionKeyRange.id] = queryMetrics;
                    }
                    return { result: resources, headers: headerResponse };
                }
                catch (err) {
                    // TODO: any error
                    if (DocumentProducer._needPartitionKeyRangeCacheRefresh(err)) {
                        // Split just happend
                        // Buffer the error so the execution context can still get the feedResponses in the itemBuffer
                        const bufferedError = new FetchResult(undefined, err);
                        this.fetchResults.push(bufferedError);
                        // Putting a dummy result so that the rest of code flows
                        return { result: [bufferedError], headers: err.headers };
                    }
                    else {
                        this._updateStates(err, err.resources === undefined);
                        throw err;
                    }
                }
            });
        }
        /**
         * Synchronously gives the bufferend current item if any
         * @returns {Object}       - buffered current item if any
         * @ignore
         */
        getTargetParitionKeyRange() {
            return this.targetPartitionKeyRange;
        }
        /**
         * Execute a provided function on the next element in the DocumentProducer.
         * @memberof DocumentProducer
         * @instance
         * @param {callback} callback - Function to execute for each element. the function \
         * takes two parameters error, element.
         */
        nextItem() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.err) {
                    this._updateStates(this.err, undefined);
                    throw this.err;
                }
                try {
                    const { result, headers } = yield this.current();
                    const fetchResult = this.fetchResults.shift();
                    this._updateStates(undefined, result === undefined);
                    assert.equal(fetchResult.feedResponse, result);
                    switch (fetchResult.fetchResultType) {
                        case FetchResultType.Done:
                            return { result: undefined, headers };
                        case FetchResultType.Exception:
                            fetchResult.error.headers = headers;
                            throw fetchResult.error;
                        case FetchResultType.Result:
                            return { result: fetchResult.feedResponse, headers };
                    }
                }
                catch (err) {
                    this._updateStates(err, err.item === undefined);
                    throw err;
                }
            });
        }
        /**
         * Retrieve the current element on the DocumentProducer.
         * @memberof DocumentProducer
         * @instance
         * @param {callback} callback - Function to execute for the current element. \
         * the function takes two parameters error, element.
         */
        current() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // If something is buffered just give that
                if (this.fetchResults.length > 0) {
                    const fetchResult = this.fetchResults[0];
                    // Need to unwrap fetch results
                    switch (fetchResult.fetchResultType) {
                        case FetchResultType.Done:
                            return {
                                result: undefined,
                                headers: this._getAndResetActiveResponseHeaders()
                            };
                        case FetchResultType.Exception:
                            fetchResult.error.headers = this._getAndResetActiveResponseHeaders();
                            throw fetchResult.error;
                        case FetchResultType.Result:
                            return {
                                result: fetchResult.feedResponse,
                                headers: this._getAndResetActiveResponseHeaders()
                            };
                    }
                }
                // If there isn't anymore items left to fetch then let the user know.
                if (this.allFetched) {
                    return {
                        result: undefined,
                        headers: this._getAndResetActiveResponseHeaders()
                    };
                }
                // If there are no more bufferd items and there are still items to be fetched then buffer more
                try {
                    const { result, headers } = yield this.bufferMore();
                    if (result === undefined) {
                        return { result: undefined, headers };
                    }
                    HeaderUtils.mergeHeaders(this.respHeaders, headers);
                    return this.current();
                }
                catch (err) {
                    throw err;
                }
            });
        }
    }
    // // Static Members
    // STATES: Object.freeze({ started: "started", inProgress: "inProgress", ended: "ended" })
    DocumentProducer.STATES = DocumentProducerStates;

    /** @hidden */
    const PartitionedQueryContants = {
        QueryInfoPath: "queryInfo",
        TopPath: ["queryInfo", "top"],
        OrderByPath: ["queryInfo", "orderBy"],
        AggregatePath: ["queryInfo", "aggregates"],
        QueryRangesPath: "queryRanges",
        RewrittenQueryPath: ["queryInfo", "rewrittenQuery"]
    };
    // TODO: any partitionedQueryExecutionInfo
    /** @hidden */
    class PartitionedQueryExecutionContextInfoParser {
        static parseRewrittenQuery(partitionedQueryExecutionInfo) {
            return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.RewrittenQueryPath);
        }
        static parseQueryRanges(partitionedQueryExecutionInfo) {
            return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.QueryRangesPath);
        }
        static parseOrderBy(partitionedQueryExecutionInfo) {
            return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.OrderByPath);
        }
        static parseAggregates(partitionedQueryExecutionInfo) {
            return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.AggregatePath);
        }
        static parseTop(partitionedQueryExecutionInfo) {
            return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.TopPath);
        }
        static _extract(partitionedQueryExecutionInfo, path) {
            let item = partitionedQueryExecutionInfo;
            if (typeof path === "string") {
                return item[path];
            }
            assert.ok(Array.isArray(path), util.format("%s is expected to be an array", JSON.stringify(path)));
            for (const p of path) {
                item = item[p];
                if (item === undefined) {
                    return;
                }
            }
            return item;
        }
    }

    /** @hidden */
    class QueryRange {
        /**
         * Represents a QueryRange.
         * @constructor QueryRange
         * @param {string} rangeMin                - min
         * @param {string} rangeMin                - max
         * @param {boolean} isMinInclusive         - isMinInclusive
         * @param {boolean} isMaxInclusive         - isMaxInclusive
         * @ignore
         */
        constructor(rangeMin, rangeMax, isMinInclusive, isMaxInclusive) {
            this.min = rangeMin;
            this.max = rangeMax;
            this.isMinInclusive = isMinInclusive;
            this.isMaxInclusive = isMaxInclusive;
        }
        overlaps(other) {
            // tslint:disable-next-line:no-this-assignment
            const range1 = this;
            const range2 = other;
            if (range1 === undefined || range2 === undefined) {
                return false;
            }
            if (range1.isEmpty() || range2.isEmpty()) {
                return false;
            }
            if (range1.min <= range2.max || range2.min <= range1.max) {
                if ((range1.min === range2.max && !(range1.isMinInclusive && range2.isMaxInclusive)) ||
                    (range2.min === range1.max && !(range2.isMinInclusive && range1.isMaxInclusive))) {
                    return false;
                }
                return true;
            }
            return false;
        }
        isEmpty() {
            return !(this.isMinInclusive && this.isMaxInclusive) && this.min === this.max;
        }
        /**
         * Parse a QueryRange from a partitionKeyRange
         * @returns QueryRange
         * @ignore
         */
        static parsePartitionKeyRange(partitionKeyRange) {
            // TODO: paritionkeyrange
            return new QueryRange(partitionKeyRange[Constants.PartitionKeyRange.MinInclusive], partitionKeyRange[Constants.PartitionKeyRange.MaxExclusive], true, false);
        }
        /**
         * Parse a QueryRange from a dictionary
         * @returns QueryRange
         * @ignore
         */
        static parseFromDict(queryRangeDict) {
            // TODO: queryRangeDictionary
            return new QueryRange(queryRangeDict.min, queryRangeDict.max, queryRangeDict.isMinInclusive, queryRangeDict.isMaxInclusive);
        }
    }

    function compareRanges(a, b) {
        const aVal = a[0][Constants.PartitionKeyRange.MinInclusive];
        const bVal = b[0][Constants.PartitionKeyRange.MinInclusive];
        if (aVal > bVal) {
            return 1;
        }
        if (aVal < bVal) {
            return -1;
        }
        return 0;
    }
    /** @hidden */
    class CollectionRoutingMapFactory$$1 {
        static createCompleteRoutingMap(partitionKeyRangeInfoTuppleList, collectionUniqueId) {
            const rangeById = {}; // TODO: any
            const rangeByInfo = {}; // TODO: any
            let sortedRanges = [];
            // the for loop doesn't invoke any async callback
            for (const r of partitionKeyRangeInfoTuppleList) {
                rangeById[r[0][Constants.PartitionKeyRange.Id]] = r;
                rangeByInfo[r[1]] = r[0];
                sortedRanges.push(r);
            }
            sortedRanges = sortedRanges.sort(compareRanges);
            const partitionKeyOrderedRange = sortedRanges.map(r => r[0]);
            const orderedPartitionInfo = sortedRanges.map(r => r[1]);
            if (!this._isCompleteSetOfRange(partitionKeyOrderedRange)) {
                return undefined;
            }
            return new InMemoryCollectionRoutingMap(rangeById, rangeByInfo, partitionKeyOrderedRange, orderedPartitionInfo, collectionUniqueId);
        }
        static _isCompleteSetOfRange(partitionKeyOrderedRange) {
            // TODO: any
            let isComplete = false;
            if (partitionKeyOrderedRange.length > 0) {
                const firstRange = partitionKeyOrderedRange[0];
                const lastRange = partitionKeyOrderedRange[partitionKeyOrderedRange.length - 1];
                isComplete =
                    firstRange[Constants.PartitionKeyRange.MinInclusive] ===
                        Constants.EffectiveParitionKeyConstants.MinimumInclusiveEffectivePartitionKey;
                isComplete =
                    isComplete &&
                        lastRange[Constants.PartitionKeyRange.MaxExclusive] ===
                            Constants.EffectiveParitionKeyConstants.MaximumExclusiveEffectivePartitionKey;
                for (let i = 1; i < partitionKeyOrderedRange.length; i++) {
                    const previousRange = partitionKeyOrderedRange[i - 1];
                    const currentRange = partitionKeyOrderedRange[i];
                    isComplete =
                        isComplete &&
                            previousRange[Constants.PartitionKeyRange.MaxExclusive] ===
                                currentRange[Constants.PartitionKeyRange.MinInclusive];
                    if (!isComplete) {
                        if (previousRange[Constants.PartitionKeyRange.MaxExclusive] >
                            currentRange[Constants.PartitionKeyRange.MinInclusive]) {
                            throw Error("Ranges overlap");
                        }
                        break;
                    }
                }
            }
            return isComplete;
        }
    }

    /** @hidden */
    class InMemoryCollectionRoutingMap {
        /**
         * Represents a InMemoryCollectionRoutingMap Object,
         * Stores partition key ranges in an efficient way with some additional information and provides
         * convenience methods for working with set of ranges.
         */
        constructor(rangeById, rangeByInfo, orderedPartitionKeyRanges, orderedPartitionInfo, collectionUniqueId) {
            this.rangeById = rangeById;
            this.rangeByInfo = rangeByInfo;
            this.orderedPartitionKeyRanges = orderedPartitionKeyRanges;
            this.orderedRanges = orderedPartitionKeyRanges.map(pkr => {
                return new QueryRange(pkr[Constants.PartitionKeyRange.MinInclusive], pkr[Constants.PartitionKeyRange.MaxExclusive], true, false);
            });
            this.orderedPartitionInfo = orderedPartitionInfo;
            this.collectionUniqueId = collectionUniqueId;
        }
        getOrderedParitionKeyRanges() {
            return this.orderedPartitionKeyRanges;
        }
        getRangeByEffectivePartitionKey(effectivePartitionKeyValue) {
            if (Constants.EffectiveParitionKeyConstants.MinimumInclusiveEffectivePartitionKey === effectivePartitionKeyValue) {
                return this.orderedPartitionKeyRanges[0];
            }
            if (Constants.EffectiveParitionKeyConstants.MaximumExclusiveEffectivePartitionKey === effectivePartitionKeyValue) {
                return undefined;
            }
            const sortedLow = this.orderedRanges.map(r => {
                return { v: r.min, b: !r.isMinInclusive };
            });
            const index = bs.le(sortedLow, { v: effectivePartitionKeyValue, b: true }, InMemoryCollectionRoutingMap._vbCompareFunction);
            // that's an error
            assert.ok(index >= 0, "error in collection routing map, queried partition key is less than the start range.");
            return this.orderedPartitionKeyRanges[index];
        }
        static _vbCompareFunction(x, y) {
            // TODO: What is x & y? A bs type?
            if (x.v > y.v) {
                return 1;
            }
            if (x.v < y.v) {
                return -1;
            }
            if (x.b > y.b) {
                return 1;
            }
            if (x.b < y.b) {
                return -1;
            }
            return 0;
        }
        getOverlappingRanges(providedQueryRanges) {
            const pqr = Array.isArray(providedQueryRanges) ? providedQueryRanges : [providedQueryRanges];
            const minToPartitionRange = {}; // TODO: any
            const sortedLow = this.orderedRanges.map(r => {
                return { v: r.min, b: !r.isMinInclusive };
            });
            const sortedHigh = this.orderedRanges.map(r => {
                return { v: r.max, b: r.isMaxInclusive };
            });
            // this for loop doesn't invoke any async callback
            for (const queryRange of pqr) {
                if (queryRange.isEmpty()) {
                    continue;
                }
                const minIndex = bs.le(sortedLow, { v: queryRange.min, b: !queryRange.isMinInclusive }, InMemoryCollectionRoutingMap._vbCompareFunction);
                assert.ok(minIndex >= 0, "error in collection routing map, queried value is less than the start range.");
                const maxIndex = bs.ge(sortedHigh, { v: queryRange.max, b: queryRange.isMaxInclusive }, InMemoryCollectionRoutingMap._vbCompareFunction);
                assert.ok(maxIndex < sortedHigh.length, "error in collection routing map, queried value is greater than the end range.");
                // the for loop doesn't invoke any async callback
                for (let j = minIndex; j < maxIndex + 1; j++) {
                    if (queryRange.overlaps(this.orderedRanges[j])) {
                        minToPartitionRange[this.orderedPartitionKeyRanges[j][Constants.PartitionKeyRange.MinInclusive]] = this.orderedPartitionKeyRanges[j];
                    }
                }
            }
            const overlappingPartitionKeyRanges = Object.keys(minToPartitionRange).map(k => minToPartitionRange[k]);
            return overlappingPartitionKeyRanges.sort(r => {
                return r[Constants.PartitionKeyRange.MinInclusive];
            });
        }
    }

    /** @hidden */
    class PartitionKeyRangeCache$$1 {
        constructor(clientContext) {
            this.clientContext = clientContext;
            this.collectionRoutingMapByCollectionId = {};
            this.sem = semaphore(1);
        }
        /**
         * Finds or Instantiates the requested Collection Routing Map and invokes callback
         * @param {callback} callback                - Function to execute for the collection routing map.
         *                                             the function takes two parameters error, collectionRoutingMap.
         * @param {string} collectionLink            - Requested collectionLink
         * @ignore
         */
        onCollectionRoutingMap(collectionLink) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const collectionId = Helper$$1.getIdFromLink(collectionLink);
                let collectionRoutingMap = this.collectionRoutingMapByCollectionId[collectionId];
                if (collectionRoutingMap === undefined) {
                    // attempt to consturct collection routing map
                    collectionRoutingMap = yield new Promise((resolve, reject) => {
                        const semaphorizedFuncCollectionMapInstantiator = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                            let crm = this.collectionRoutingMapByCollectionId[collectionId];
                            if (crm === undefined) {
                                try {
                                    const { result: resources } = yield this.clientContext.queryPartitionKeyRanges(collectionLink).toArray();
                                    crm = CollectionRoutingMapFactory$$1.createCompleteRoutingMap(resources.map(r => [r, true]), collectionId);
                                    this.collectionRoutingMapByCollectionId[collectionId] = crm;
                                    this.sem.leave();
                                    resolve(crm);
                                }
                                catch (err) {
                                    this.sem.leave();
                                    reject(err);
                                }
                            }
                            else {
                                // sanity gaurd
                                this.sem.leave();
                                // TODO: it looks like this code should never be reached...
                                // return resolve(collectionRoutingMap.getOverlappingRanges(partitionKeyRanges));
                                reject(new Error("Not yet implemented"));
                            }
                        });
                        // We want only one attempt to construct collectionRoutingMap
                        // so we pass the consturction in the semaphore take
                        this.sem.take(semaphorizedFuncCollectionMapInstantiator);
                    });
                }
                return collectionRoutingMap;
            });
        }
        /**
         * Given the query ranges and a collection, invokes the callback on the list of overlapping partition key ranges
         * @param {callback} callback - Function execute on the overlapping partition key ranges result,
         *                                  takes two parameters error, partition key ranges
         * @param collectionLink
         * @param queryRanges
         * @ignore
         */
        getOverlappingRanges(collectionLink, queryRanges) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const crm = yield this.onCollectionRoutingMap(collectionLink);
                return crm.getOverlappingRanges(queryRanges);
            });
        }
    }

    /** @hidden */
    const PARITIONKEYRANGE$$1 = Constants.PartitionKeyRange;
    /** @hidden */
    class SmartRoutingMapProvider$$1 {
        constructor(clientContext) {
            this.partitionKeyRangeCache = new PartitionKeyRangeCache$$1(clientContext);
        }
        static _secondRangeIsAfterFirstRange(range1, range2) {
            assert.notEqual(range1.max, undefined, "invalid arg");
            assert.notEqual(range2.min, undefined, "invalid arg");
            if (range1.max > range2.min) {
                // r.min < #previous_r.max
                return false;
            }
            else {
                if (range1.max === range2.min && range1.isMaxInclusive && range2.isMinInclusive) {
                    // the inclusive ending endpoint of previous_r is the same as the inclusive beginning endpoint of r
                    // they share a point
                    return false;
                }
                return true;
            }
        }
        static _isSortedAndNonOverlapping(ranges) {
            for (let idx = 1; idx < ranges.length; idx++) {
                const previousR = ranges[idx - 1];
                const r = ranges[idx];
                if (!this._secondRangeIsAfterFirstRange(previousR, r)) {
                    return false;
                }
            }
            return true;
        }
        static _stringMax(a, b) {
            return a >= b ? a : b;
        }
        static _stringCompare(a, b) {
            return a === b ? 0 : a > b ? 1 : -1;
        }
        static _subtractRange(r, partitionKeyRange) {
            const left = this._stringMax(partitionKeyRange[PARITIONKEYRANGE$$1.MaxExclusive], r.min);
            const leftInclusive = this._stringCompare(left, r.min) === 0 ? r.isMinInclusive : false;
            return new QueryRange(left, r.max, leftInclusive, r.isMaxInclusive);
        }
        /**
         * Given the sorted ranges and a collection, invokes the callback on the list of overlapping partition key ranges
         * @param {callback} callback - Function execute on the overlapping partition key ranges result,
         *                              takes two parameters error, partition key ranges
         * @param collectionLink
         * @param sortedRanges
         * @ignore
         */
        getOverlappingRanges(collectionLink, sortedRanges) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // validate if the list is non- overlapping and sorted                             TODO: any PartitionKeyRanges
                if (!SmartRoutingMapProvider$$1._isSortedAndNonOverlapping(sortedRanges)) {
                    throw new Error("the list of ranges is not a non-overlapping sorted ranges");
                }
                let partitionKeyRanges = []; // TODO: any ParitionKeyRanges
                if (sortedRanges.length === 0) {
                    return partitionKeyRanges;
                }
                const collectionRoutingMap = yield this.partitionKeyRangeCache.onCollectionRoutingMap(collectionLink);
                let index = 0;
                let currentProvidedRange = sortedRanges[index];
                while (true) {
                    if (currentProvidedRange.isEmpty()) {
                        // skip and go to the next item
                        if (++index >= sortedRanges.length) {
                            return partitionKeyRanges;
                        }
                        currentProvidedRange = sortedRanges[index];
                        continue;
                    }
                    let queryRange;
                    if (partitionKeyRanges.length > 0) {
                        queryRange = SmartRoutingMapProvider$$1._subtractRange(currentProvidedRange, partitionKeyRanges[partitionKeyRanges.length - 1]);
                    }
                    else {
                        queryRange = currentProvidedRange;
                    }
                    const overlappingRanges = collectionRoutingMap.getOverlappingRanges(queryRange);
                    assert.ok(overlappingRanges.length > 0, `error: returned overlapping ranges for queryRange ${queryRange} is empty`);
                    partitionKeyRanges = partitionKeyRanges.concat(overlappingRanges);
                    const lastKnownTargetRange = QueryRange.parsePartitionKeyRange(partitionKeyRanges[partitionKeyRanges.length - 1]);
                    assert.notEqual(lastKnownTargetRange, undefined);
                    // the overlapping ranges must contain the requested range
                    assert.ok(SmartRoutingMapProvider$$1._stringCompare(currentProvidedRange.max, lastKnownTargetRange.max) <= 0, `error: returned overlapping ranges ${overlappingRanges} \
                    does not contain the requested range ${queryRange}`);
                    // the current range is contained in partitionKeyRanges just move forward
                    if (++index >= sortedRanges.length) {
                        return partitionKeyRanges;
                    }
                    currentProvidedRange = sortedRanges[index];
                    while (SmartRoutingMapProvider$$1._stringCompare(currentProvidedRange.max, lastKnownTargetRange.max) <= 0) {
                        // the current range is covered too.just move forward
                        if (++index >= sortedRanges.length) {
                            return partitionKeyRanges;
                        }
                        currentProvidedRange = sortedRanges[index];
                    }
                }
            });
        }
    }

    /** @hidden */
    var ParallelQueryExecutionContextBaseStates$$1;
    (function (ParallelQueryExecutionContextBaseStates$$1) {
        ParallelQueryExecutionContextBaseStates$$1["started"] = "started";
        ParallelQueryExecutionContextBaseStates$$1["inProgress"] = "inProgress";
        ParallelQueryExecutionContextBaseStates$$1["ended"] = "ended";
    })(ParallelQueryExecutionContextBaseStates$$1 || (ParallelQueryExecutionContextBaseStates$$1 = {}));
    /** @hidden */
    class ParallelQueryExecutionContextBase$$1 {
        /**
         * Provides the ParallelQueryExecutionContextBase.
         * This is the base class that ParallelQueryExecutionContext and OrderByQueryExecutionContext will derive from.
         *
         * When handling a parallelized query, it instantiates one instance of
         * DocumentProcuder per target partition key range and aggregates the result of each.
         *
         * @constructor ParallelQueryExecutionContext
         * @param {ClientContext} clientContext        - The service endpoint to use to create the client.
         * @param {string} collectionLink                - The Collection Link
         * @param {FeedOptions} [options]                - Represents the feed options.
         * @param {object} partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo
         * @ignore
         */
        constructor(clientContext, collectionLink, query, // TODO: any - It's not SQLQuerySpec
        options, partitionedQueryExecutionInfo) {
            this.clientContext = clientContext;
            this.collectionLink = collectionLink;
            this.query = query;
            this.options = options;
            this.partitionedQueryExecutionInfo = partitionedQueryExecutionInfo;
            this.clientContext = clientContext;
            this.collectionLink = collectionLink;
            this.query = query;
            this.options = options;
            this.partitionedQueryExecutionInfo = partitionedQueryExecutionInfo;
            this.err = undefined;
            this.state = ParallelQueryExecutionContextBase$$1.STATES.started;
            this.routingProvider = new SmartRoutingMapProvider$$1(this.clientContext);
            this.sortOrders = PartitionedQueryExecutionContextInfoParser.parseOrderBy(this.partitionedQueryExecutionInfo);
            if (options === undefined || options["maxItemCount"] === undefined) {
                this.pageSize = ParallelQueryExecutionContextBase$$1.DEFAULT_PAGE_SIZE;
                this.options["maxItemCount"] = this.pageSize;
            }
            else {
                this.pageSize = options["maxItemCount"];
            }
            this.requestContinuation = options ? options.continuation : null;
            // response headers of undergoing operation
            this.respHeaders = HeaderUtils.getInitialHeader();
            // Make priority queue for documentProducers
            // The comparator is supplied by the derived class
            this.orderByPQ = new PriorityQueue((a, b) => this.documentProducerComparator(b, a));
            // Creating the documentProducers
            this.sem = semaphore(1);
            // Creating callback for semaphore
            // TODO: Code smell
            const createDocumentProducersAndFillUpPriorityQueueFunc = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                // ensure the lock is released after finishing up
                try {
                    const targetPartitionRanges = yield this._onTargetPartitionRanges();
                    this.waitingForInternalExecutionContexts = targetPartitionRanges.length;
                    // default to 1 if none is provided.
                    const maxDegreeOfParallelism = options.maxDegreeOfParallelism > 0
                        ? Math.min(options.maxDegreeOfParallelism, targetPartitionRanges.length)
                        : targetPartitionRanges.length;
                    const parallelismSem = semaphore(maxDegreeOfParallelism);
                    let filteredPartitionKeyRanges = [];
                    // The document producers generated from filteredPartitionKeyRanges
                    const targetPartitionQueryExecutionContextList = [];
                    if (this.requestContinuation) {
                        // Need to create the first documentProducer with the suppliedCompositeContinuationToken
                        try {
                            const suppliedCompositeContinuationToken = JSON.parse(this.requestContinuation);
                            filteredPartitionKeyRanges = this.getPartitionKeyRangesForContinuation(suppliedCompositeContinuationToken, targetPartitionRanges);
                            if (filteredPartitionKeyRanges.length > 0) {
                                targetPartitionQueryExecutionContextList.push(this._createTargetPartitionQueryExecutionContext(filteredPartitionKeyRanges[0], suppliedCompositeContinuationToken.token));
                                // Slicing the first element off, since we already made a documentProducer for it
                                filteredPartitionKeyRanges = filteredPartitionKeyRanges.slice(1);
                            }
                        }
                        catch (e) {
                            this.err = e;
                            this.sem.leave();
                        }
                    }
                    else {
                        filteredPartitionKeyRanges = targetPartitionRanges;
                    }
                    // Create one documentProducer for each partitionTargetRange
                    filteredPartitionKeyRanges.forEach((partitionTargetRange) => {
                        // TODO: any partitionTargetRange
                        // no async callback
                        targetPartitionQueryExecutionContextList.push(this._createTargetPartitionQueryExecutionContext(partitionTargetRange));
                    });
                    // Fill up our priority queue with documentProducers
                    targetPartitionQueryExecutionContextList.forEach(documentProducer => {
                        // has async callback
                        const throttledFunc = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                            try {
                                const { result: document, headers } = yield documentProducer.current();
                                this._mergeWithActiveResponseHeaders(headers);
                                if (document === undefined) {
                                    // no results on this one
                                    return;
                                }
                                // if there are matching results in the target ex range add it to the priority queue
                                try {
                                    this.orderByPQ.enq(documentProducer);
                                }
                                catch (e) {
                                    this.err = e;
                                }
                            }
                            catch (err) {
                                this._mergeWithActiveResponseHeaders(err.headers);
                                this.err = err;
                            }
                            finally {
                                parallelismSem.leave();
                                this._decrementInitiationLock();
                            }
                        });
                        parallelismSem.take(throttledFunc);
                    });
                }
                catch (err) {
                    this.err = err;
                    // release the lock
                    this.sem.leave();
                    return;
                }
            });
            this.sem.take(createDocumentProducersAndFillUpPriorityQueueFunc);
        }
        //                                          TODO: any                                TODO: any
        getPartitionKeyRangesForContinuation(suppliedCompositeContinuationToken, partitionKeyRanges) {
            const startRange = {}; // TODO: any
            startRange[PARITIONKEYRANGE$$1.MinInclusive] = suppliedCompositeContinuationToken.range.min;
            startRange[PARITIONKEYRANGE$$1.MaxExclusive] = suppliedCompositeContinuationToken.range.max;
            const vbCompareFunction = (x, y) => {
                // TODO: any
                if (x[PARITIONKEYRANGE$$1.MinInclusive] > y[PARITIONKEYRANGE$$1.MinInclusive]) {
                    return 1;
                }
                if (x[PARITIONKEYRANGE$$1.MinInclusive] < y[PARITIONKEYRANGE$$1.MinInclusive]) {
                    return -1;
                }
                return 0;
            };
            const minIndex = bs.le(partitionKeyRanges, startRange, vbCompareFunction);
            // that's an error
            if (minIndex > 0) {
                throw new Error("BadRequestException: InvalidContinuationToken");
            }
            // return slice of the partition key ranges
            return partitionKeyRanges.slice(minIndex, partitionKeyRanges.length - minIndex);
        }
        _decrementInitiationLock() {
            // decrements waitingForInternalExecutionContexts
            // if waitingForInternalExecutionContexts reaches 0 releases the semaphore and changes the state
            this.waitingForInternalExecutionContexts = this.waitingForInternalExecutionContexts - 1;
            if (this.waitingForInternalExecutionContexts === 0) {
                this.sem.leave();
                if (this.orderByPQ.size() === 0) {
                    this.state = ParallelQueryExecutionContextBase$$1.STATES.inProgress;
                }
            }
        }
        _mergeWithActiveResponseHeaders(headers) {
            HeaderUtils.mergeHeaders(this.respHeaders, headers);
        }
        _getAndResetActiveResponseHeaders() {
            const ret = this.respHeaders;
            this.respHeaders = HeaderUtils.getInitialHeader();
            return ret;
        }
        _onTargetPartitionRanges() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // invokes the callback when the target partition ranges are ready
                const parsedRanges = PartitionedQueryExecutionContextInfoParser.parseQueryRanges(this.partitionedQueryExecutionInfo);
                const queryRanges = parsedRanges.map((item) => QueryRange.parseFromDict(item)); // TODO: any
                return this.routingProvider.getOverlappingRanges(this.collectionLink, queryRanges);
            });
        }
        /**
         * Gets the replacement ranges for a partitionkeyrange that has been split
         * @memberof ParallelQueryExecutionContextBase
         * @instance
         */
        _getReplacementPartitionKeyRanges(documentProducer) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const routingMapProvider = this.clientContext.partitionKeyDefinitionCache;
                const partitionKeyRange = documentProducer.targetPartitionKeyRange;
                // Download the new routing map
                this.routingProvider = new SmartRoutingMapProvider$$1(this.clientContext);
                // Get the queryRange that relates to this partitionKeyRange
                const queryRange = QueryRange.parsePartitionKeyRange(partitionKeyRange);
                return this.routingProvider.getOverlappingRanges(this.collectionLink, [queryRange]);
            });
        }
        // TODO: P0 Code smell - can barely tell what this is doing
        /**
         * Removes the current document producer from the priqueue,
         * replaces that document producer with child document producers,
         * then reexecutes the originFunction with the corrrected executionContext
         * @memberof ParallelQueryExecutionContextBase
         * @instance
         */
        _repairExecutionContext(originFunction) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // TODO: any
                // Get the replacement ranges
                // Removing the invalid documentProducer from the orderByPQ
                const parentDocumentProducer = this.orderByPQ.deq();
                try {
                    const replacementPartitionKeyRanges = yield this._getReplacementPartitionKeyRanges(parentDocumentProducer);
                    const replacementDocumentProducers = [];
                    // Create the replacement documentProducers
                    replacementPartitionKeyRanges.forEach(partitionKeyRange => {
                        // Create replacment document producers with the parent's continuationToken
                        const replacementDocumentProducer = this._createTargetPartitionQueryExecutionContext(partitionKeyRange, parentDocumentProducer.continuationToken);
                        replacementDocumentProducers.push(replacementDocumentProducer);
                    });
                    // We need to check if the documentProducers even has anything left to fetch from before enqueing them
                    const checkAndEnqueueDocumentProducer = (documentProducerToCheck, checkNextDocumentProducerCallback) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        try {
                            const { result: afterItem, headers } = yield documentProducerToCheck.current();
                            if (afterItem === undefined) ;
                            else {
                                // Safe to put document producer back in the queue
                                this.orderByPQ.enq(documentProducerToCheck);
                            }
                            yield checkNextDocumentProducerCallback();
                        }
                        catch (err) {
                            this.err = err;
                            return;
                        }
                    });
                    const checkAndEnqueueDocumentProducers = (rdp) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        if (rdp.length > 0) {
                            // We still have a replacementDocumentProducer to check
                            const replacementDocumentProducer = rdp.shift();
                            yield checkAndEnqueueDocumentProducer(replacementDocumentProducer, () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                                yield checkAndEnqueueDocumentProducers(rdp);
                            }));
                        }
                        else {
                            // reexecutes the originFunction with the corrrected executionContext
                            return originFunction();
                        }
                    });
                    // Invoke the recursive function to get the ball rolling
                    yield checkAndEnqueueDocumentProducers(replacementDocumentProducers);
                }
                catch (err) {
                    this.err = err;
                    throw err;
                }
            });
        }
        static _needPartitionKeyRangeCacheRefresh(error) {
            // TODO: any error
            return (error.code === StatusCodes.Gone &&
                "substatus" in error &&
                error["substatus"] === SubStatusCodes.PartitionKeyRangeGone);
        }
        /**
         * Checks to see if the executionContext needs to be repaired.
         * if so it repairs the execution context and executes the ifCallback,
         * else it continues with the current execution context and executes the elseCallback
         * @memberof ParallelQueryExecutionContextBase
         * @instance
         */
        _repairExecutionContextIfNeeded(ifCallback, elseCallback) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const documentProducer = this.orderByPQ.peek();
                // Check if split happened
                try {
                    const { result: element, headers } = yield documentProducer.current();
                    elseCallback();
                }
                catch (err) {
                    if (ParallelQueryExecutionContextBase$$1._needPartitionKeyRangeCacheRefresh(err)) {
                        // Split has happened so we need to repair execution context before continueing
                        return this._repairExecutionContext(ifCallback);
                    }
                    else {
                        // Something actually bad happened ...
                        this.err = err;
                        throw err;
                    }
                }
            });
        }
        /**
         * Execute a provided function on the next element in the ParallelQueryExecutionContextBase.
         * @memberof ParallelQueryExecutionContextBase
         * @instance
         * @param {callback} callback - Function to execute for each element. the function takes two \
         * parameters error, element.
         */
        nextItem() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.err) {
                    // if there is a prior error return error
                    throw this.err;
                }
                return new Promise((resolve, reject) => {
                    this.sem.take(() => {
                        // NOTE: lock must be released before invoking quitting
                        if (this.err) {
                            // release the lock before invoking callback
                            this.sem.leave();
                            // if there is a prior error return error
                            this.err.headers = this._getAndResetActiveResponseHeaders();
                            reject(this.err);
                            return;
                        }
                        if (this.orderByPQ.size() === 0) {
                            // there is no more results
                            this.state = ParallelQueryExecutionContextBase$$1.STATES.ended;
                            // release the lock before invoking callback
                            this.sem.leave();
                            return resolve({
                                result: undefined,
                                headers: this._getAndResetActiveResponseHeaders()
                            });
                        }
                        const ifCallback = () => {
                            // Release the semaphore to avoid deadlock
                            this.sem.leave();
                            // Reexcute the function
                            return resolve(this.nextItem());
                        };
                        const elseCallback = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                            let documentProducer;
                            try {
                                documentProducer = this.orderByPQ.deq();
                            }
                            catch (e) {
                                // if comparing elements of the priority queue throws exception
                                // set that error and return error
                                this.err = e;
                                // release the lock before invoking callback
                                this.sem.leave();
                                this.err.headers = this._getAndResetActiveResponseHeaders();
                                reject(this.err);
                                return;
                            }
                            let item;
                            let headers;
                            try {
                                const response = yield documentProducer.nextItem();
                                item = response.result;
                                headers = response.headers;
                                this._mergeWithActiveResponseHeaders(headers);
                                if (item === undefined) {
                                    // this should never happen
                                    // because the documentProducer already has buffered an item
                                    // assert item !== undefined
                                    this.err = new Error(util.format(`Extracted DocumentProducer from the priority queue \
                                            doesn't have any buffered item!`));
                                    // release the lock before invoking callback
                                    this.sem.leave();
                                    return resolve({
                                        result: undefined,
                                        headers: this._getAndResetActiveResponseHeaders()
                                    });
                                }
                            }
                            catch (err) {
                                this.err = new Error(`Extracted DocumentProducer from the priority queue fails to get the \
                                    buffered item. Due to ${JSON.stringify(err)}`);
                                this.err.headers = this._getAndResetActiveResponseHeaders();
                                // release the lock before invoking callback
                                this.sem.leave();
                                reject(this.err);
                                return;
                            }
                            // we need to put back the document producer to the queue if it has more elements.
                            // the lock will be released after we know document producer must be put back in the queue or not
                            try {
                                const { result: afterItem, headers: currentHeaders } = yield documentProducer.current();
                                if (afterItem === undefined) ;
                                else {
                                    try {
                                        const headItem = documentProducer.fetchResults[0];
                                        assert.notStrictEqual(headItem, undefined, "Extracted DocumentProducer from PQ is invalid state with no result!");
                                        this.orderByPQ.enq(documentProducer);
                                    }
                                    catch (e) {
                                        // if comparing elements in priority queue throws exception
                                        // set error
                                        this.err = e;
                                    }
                                }
                            }
                            catch (err) {
                                if (ParallelQueryExecutionContextBase$$1._needPartitionKeyRangeCacheRefresh(err)) {
                                    // We want the document producer enqueued
                                    // So that later parts of the code can repair the execution context
                                    this.orderByPQ.enq(documentProducer);
                                }
                                else {
                                    // Something actually bad happened
                                    this.err = err;
                                    reject(this.err);
                                }
                            }
                            finally {
                                // release the lock before returning
                                this.sem.leave();
                            }
                            // invoke the callback on the item
                            return resolve({
                                result: item,
                                headers: this._getAndResetActiveResponseHeaders()
                            });
                        });
                        this._repairExecutionContextIfNeeded(ifCallback, elseCallback).catch(reject);
                    });
                });
            });
        }
        /**
         * Retrieve the current element on the ParallelQueryExecutionContextBase.
         * @memberof ParallelQueryExecutionContextBase
         * @instance
         * @param {callback} callback - Function to execute for the current element. \
         * the function takes two parameters error, element.
         */
        current() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (this.err) {
                    this.err.headerse = this._getAndResetActiveResponseHeaders();
                    throw this.err;
                }
                return new Promise((resolve, reject) => {
                    this.sem.take(() => {
                        try {
                            if (this.err) {
                                this.err = this._getAndResetActiveResponseHeaders();
                                throw this.err;
                            }
                            if (this.orderByPQ.size() === 0) {
                                return resolve({
                                    result: undefined,
                                    headers: this._getAndResetActiveResponseHeaders()
                                });
                            }
                            const ifCallback = () => {
                                // Reexcute the function
                                return resolve(this.current());
                            };
                            const elseCallback = () => {
                                const documentProducer = this.orderByPQ.peek();
                                return resolve(documentProducer.current());
                            };
                            this._repairExecutionContextIfNeeded(ifCallback, elseCallback).catch(reject);
                        }
                        finally {
                            this.sem.leave();
                        }
                    });
                });
            });
        }
        /**
         * Determine if there are still remaining resources to processs based on the value of the continuation \
         * token or the elements remaining on the current batch in the QueryIterator.
         * @memberof ParallelQueryExecutionContextBase
         * @instance
         * @returns {Boolean} true if there is other elements to process in the ParallelQueryExecutionContextBase.
         */
        hasMoreResults() {
            return !(this.state === ParallelQueryExecutionContextBase$$1.STATES.ended || this.err !== undefined);
        }
        /**
         * Creates document producers
         */
        _createTargetPartitionQueryExecutionContext(partitionKeyTargetRange, continuationToken) {
            // TODO: any
            // creates target partition range Query Execution Context
            let rewrittenQuery = PartitionedQueryExecutionContextInfoParser.parseRewrittenQuery(this.partitionedQueryExecutionInfo);
            let query = this.query;
            if (typeof query === "string") {
                query = { query };
            }
            const formatPlaceHolder = "{documentdb-formattableorderbyquery-filter}";
            if (rewrittenQuery) {
                query = JSON.parse(JSON.stringify(query));
                // We hardcode the formattable filter to true for now
                rewrittenQuery = rewrittenQuery.replace(formatPlaceHolder, "true");
                query["query"] = rewrittenQuery;
            }
            const options = JSON.parse(JSON.stringify(this.options));
            options.continuationToken = continuationToken;
            return new DocumentProducer(this.clientContext, this.collectionLink, query, partitionKeyTargetRange, options);
        }
    }
    ParallelQueryExecutionContextBase$$1.DEFAULT_PAGE_SIZE = 10;
    ParallelQueryExecutionContextBase$$1.STATES = ParallelQueryExecutionContextBaseStates$$1;

    /** @hidden */
    class ParallelQueryExecutionContext$$1 extends ParallelQueryExecutionContextBase$$1 {
        /**
         * Provides the ParallelQueryExecutionContext.
         * This class is capable of handling parallelized queries and dervives from ParallelQueryExecutionContextBase.
         *
         * @constructor ParallelQueryExecutionContext
         * @param {ClientContext} clientContext        - The service endpoint to use to create the client.
         * @param {string} collectionLink                - The Collection Link
         * @param {FeedOptions} [options]                - Represents the feed options.
         * @param {object} partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo
         * @ignore
         */
        constructor(clientContext, collectionLink, query, options, partitionedQueryExecutionInfo) {
            // Calling on base class constructor
            super(clientContext, collectionLink, query, options, partitionedQueryExecutionInfo);
        }
        // Instance members are inherited
        // Overriding documentProducerComparator for ParallelQueryExecutionContexts
        /**
         * Provides a Comparator for document producers using the min value of the corresponding target partition.
         * @returns {object}        - Comparator Function
         * @ignore
         */
        documentProducerComparator(docProd1, docProd2) {
            const a = docProd1.getTargetParitionKeyRange()["minInclusive"];
            const b = docProd2.getTargetParitionKeyRange()["minInclusive"];
            return a === b ? 0 : a > b ? 1 : -1;
        }
        _buildContinuationTokenFrom(documentProducer) {
            // given the document producer constructs the continuation token
            if (documentProducer.allFetched && documentProducer.peekBufferedItems().length === 0) {
                return undefined;
            }
            const min = documentProducer.targetPartitionKeyRange[PARITIONKEYRANGE$$1.MinInclusive];
            const max = documentProducer.targetPartitionKeyRange[PARITIONKEYRANGE$$1.MaxExclusive];
            const range = {
                min,
                max,
                id: documentProducer.targetPartitionKeyRange.id
            };
            // TODO: static method
            const withNullDefault = (token) => {
                if (token) {
                    return token;
                }
                else if (token === null || token === undefined) {
                    return null;
                }
            };
            const documentProducerContinuationToken = documentProducer.peekBufferedItems().length > 0
                ? documentProducer.previousContinuationToken
                : documentProducer.continuationToken;
            return {
                token: withNullDefault(documentProducerContinuationToken),
                range
            };
        }
    }

    /** @hidden */
    class OrderByQueryExecutionContext$$1 extends ParallelQueryExecutionContextBase$$1 {
        /**
         * Provides the OrderByQueryExecutionContext.
         * This class is capable of handling orderby queries and dervives from ParallelQueryExecutionContextBase.
         *
         * When handling a parallelized query, it instantiates one instance of
         * DocumentProcuder per target partition key range and aggregates the result of each.
         *
         * @constructor ParallelQueryExecutionContext
         * @param {ClientContext} clientContext        - The service endpoint to use to create the client.
         * @param {string} collectionLink                - The Collection Link
         * @param {FeedOptions} [options]                - Represents the feed options.
         * @param {object} partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo
         * @ignore
         */
        constructor(clientContext, collectionLink, query, // TODO: any query
        options, // TODO: any options
        partitionedQueryExecutionInfo) {
            // Calling on base class constructor
            super(clientContext, collectionLink, query, options, partitionedQueryExecutionInfo);
            this.orderByComparator = new OrderByDocumentProducerComparator(this.sortOrders);
        }
        // Instance members are inherited
        // Overriding documentProducerComparator for OrderByQueryExecutionContexts
        /**
         * Provides a Comparator for document producers which respects orderby sort order.
         * @returns {object}        - Comparator Function
         * @ignore
         */
        documentProducerComparator(docProd1, docProd2) {
            return this.orderByComparator.compare(docProd1, docProd2);
        }
    }

    /** @hidden */
    class PipelinedQueryExecutionContext$$1 {
        constructor(clientContext, collectionLink, query, // TODO: any query
        options, // TODO: any options
        partitionedQueryExecutionInfo) {
            this.clientContext = clientContext;
            this.collectionLink = collectionLink;
            this.query = query;
            this.options = options;
            this.partitionedQueryExecutionInfo = partitionedQueryExecutionInfo;
            this.endpoint = null;
            this.pageSize = options["maxItemCount"];
            if (this.pageSize === undefined) {
                this.pageSize = PipelinedQueryExecutionContext$$1.DEFAULT_PAGE_SIZE;
            }
            // Pick between parallel vs order by execution context
            const sortOrders = PartitionedQueryExecutionContextInfoParser.parseOrderBy(partitionedQueryExecutionInfo);
            if (Array.isArray(sortOrders) && sortOrders.length > 0) {
                // Need to wrap orderby execution context in endpoint component, since the data is nested as a \
                //      "payload" property.
                this.endpoint = new OrderByEndpointComponent(new OrderByQueryExecutionContext$$1(this.clientContext, this.collectionLink, this.query, this.options, this.partitionedQueryExecutionInfo));
            }
            else {
                this.endpoint = new ParallelQueryExecutionContext$$1(this.clientContext, this.collectionLink, this.query, this.options, this.partitionedQueryExecutionInfo);
            }
            // If aggregate then add that to the pipeline
            const aggregates = PartitionedQueryExecutionContextInfoParser.parseAggregates(partitionedQueryExecutionInfo);
            if (Array.isArray(aggregates) && aggregates.length > 0) {
                this.endpoint = new AggregateEndpointComponent(this.endpoint, aggregates);
            }
            // If top then add that to the pipeline
            const top = PartitionedQueryExecutionContextInfoParser.parseTop(partitionedQueryExecutionInfo);
            if (typeof top === "number") {
                this.endpoint = new TopEndpointComponent(this.endpoint, top);
            }
        }
        nextItem() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return this.endpoint.nextItem();
            });
        }
        current() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return this.endpoint.current();
            });
        }
        // Removed callback here beacuse it wouldn't have ever worked...
        hasMoreResults() {
            return this.endpoint.hasMoreResults();
        }
        fetchMore() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // if the wrapped endpoint has different implementation for fetchMore use that
                // otherwise use the default implementation
                if (typeof this.endpoint.fetchMore === "function") {
                    return this.endpoint.fetchMore();
                }
                else {
                    this.fetchBuffer = [];
                    this.fetchMoreRespHeaders = HeaderUtils.getInitialHeader();
                    return this._fetchMoreImplementation();
                }
            });
        }
        _fetchMoreImplementation() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const { result: item, headers } = yield this.endpoint.nextItem();
                    HeaderUtils.mergeHeaders(this.fetchMoreRespHeaders, headers);
                    if (item === undefined) {
                        // no more results
                        if (this.fetchBuffer.length === 0) {
                            return {
                                result: undefined,
                                headers: this.fetchMoreRespHeaders
                            };
                        }
                        else {
                            // Just give what we have
                            const temp = this.fetchBuffer;
                            this.fetchBuffer = [];
                            return { result: temp, headers: this.fetchMoreRespHeaders };
                        }
                    }
                    else {
                        // append the result
                        this.fetchBuffer.push(item);
                        if (this.fetchBuffer.length >= this.pageSize) {
                            // fetched enough results
                            const temp = this.fetchBuffer.slice(0, this.pageSize);
                            this.fetchBuffer = this.fetchBuffer.splice(this.pageSize);
                            return { result: temp, headers: this.fetchMoreRespHeaders };
                        }
                        else {
                            // recursively fetch more
                            // TODO: is recursion a good idea?
                            return this._fetchMoreImplementation();
                        }
                    }
                }
                catch (err) {
                    HeaderUtils.mergeHeaders(this.fetchMoreRespHeaders, err.headers);
                    err.headers = this.fetchMoreRespHeaders;
                    if (err) {
                        throw err;
                    }
                }
            });
        }
    }
    PipelinedQueryExecutionContext$$1.DEFAULT_PAGE_SIZE = 10;

    /** @hidden */
    class ProxyQueryExecutionContext$$1 {
        constructor(clientContext, query, options, // TODO: any options
        fetchFunctions, resourceLink) {
            this.clientContext = clientContext;
            this.query = query;
            this.options = options;
            this.fetchFunctions = fetchFunctions;
            this.resourceLink = resourceLink;
            this.query = query;
            this.fetchFunctions = fetchFunctions;
            // clone options
            this.options = JSON.parse(JSON.stringify(options || {}));
            this.resourceLink = resourceLink;
            this.queryExecutionContext = new DefaultQueryExecutionContext(this.clientContext, this.query, this.options, this.fetchFunctions);
        }
        /**
         * Execute a provided function on the next element in the ProxyQueryExecutionContext.
         * @memberof ProxyQueryExecutionContext
         * @instance
         * @param {callback} callback - Function to execute for each element. \
         * the function takes two parameters error, element.
         */
        nextItem() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const r = yield this.queryExecutionContext.nextItem();
                    return r;
                }
                catch (err) {
                    if (this._hasPartitionedExecutionInfo(err)) {
                        // if this's a partitioned execution info switches the execution context
                        const partitionedExecutionInfo = this._getParitionedExecutionInfo(err);
                        this.queryExecutionContext = this._createPipelinedExecutionContext(partitionedExecutionInfo);
                        try {
                            // TODO: recusion might be bad...
                            return this.nextItem();
                        }
                        catch (e) {
                            throw e;
                        }
                    }
                    else {
                        throw err;
                    }
                }
            });
        }
        _createPipelinedExecutionContext(partitionedExecutionInfo) {
            assert.notStrictEqual(this.resourceLink, undefined, "for top/orderby resourceLink is required.");
            assert.ok(!Array.isArray(this.resourceLink) || this.resourceLink.length === 1, "for top/orderby exactly one collectionLink is required");
            const collectionLink = Array.isArray(this.resourceLink) ? this.resourceLink[0] : this.resourceLink;
            return new PipelinedQueryExecutionContext$$1(this.clientContext, collectionLink, this.query, this.options, partitionedExecutionInfo);
        }
        /**
         * Retrieve the current element on the ProxyQueryExecutionContext.
         * @memberof ProxyQueryExecutionContext
         * @instance
         * @param {callback} callback - Function to execute for the current element. \
         * the function takes two parameters error, element.
         */
        current() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    return yield this.queryExecutionContext.current();
                }
                catch (err) {
                    if (this._hasPartitionedExecutionInfo(err)) {
                        // if this's a partitioned execution info switches the execution context
                        const partitionedExecutionInfo = this._getParitionedExecutionInfo(err);
                        this.queryExecutionContext = this._createPipelinedExecutionContext(partitionedExecutionInfo);
                        // TODO: recursion
                        try {
                            return this.current();
                        }
                        catch (e) {
                            throw e;
                        }
                    }
                    else {
                        throw err;
                    }
                }
            });
        }
        /**
         * Determine if there are still remaining resources to process.
         * @memberof ProxyQueryExecutionContext
         * @instance
         * @returns {Boolean} true if there is other elements to process in the ProxyQueryExecutionContext.
         */
        hasMoreResults() {
            return this.queryExecutionContext.hasMoreResults();
        }
        fetchMore() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    return yield this.queryExecutionContext.fetchMore();
                }
                catch (err) {
                    if (this._hasPartitionedExecutionInfo(err)) {
                        // if this's a partitioned execution info switches the execution context
                        const partitionedExecutionInfo = this._getParitionedExecutionInfo(err);
                        this.queryExecutionContext = this._createPipelinedExecutionContext(partitionedExecutionInfo);
                        try {
                            // TODO: maybe should move the others to use this pattern as it avoid the recursion issue.
                            return this.queryExecutionContext.fetchMore();
                        }
                        catch (e) {
                            throw e;
                        }
                    }
                    else {
                        throw err;
                    }
                }
            });
        }
        _hasPartitionedExecutionInfo(error) {
            // TODO: any error
            return (error.code === StatusCodes.BadRequest &&
                "substatus" in error &&
                error["substatus"] === SubStatusCodes.CrossPartitionQueryNotServable);
        }
        _getParitionedExecutionInfo(error) {
            // TODO: any error
            return JSON.parse(JSON.parse(error.body).additionalErrorInfo);
        }
    }

    /**
     * Represents a QueryIterator Object, an implmenetation of feed or query response that enables
     * traversal and iterating over the response
     * in the Azure Cosmos DB database service.
     */
    class QueryIterator {
        /**
         * @hidden
         */
        constructor(clientContext, query, options, // TODO: any options
        fetchFunctions, resourceLink) {
            this.clientContext = clientContext;
            this.query = query;
            this.options = options;
            this.fetchFunctions = fetchFunctions;
            this.resourceLink = resourceLink;
            this.query = query;
            this.fetchFunctions = fetchFunctions;
            this.options = options;
            this.resourceLink = resourceLink;
            this.queryExecutionContext = this._createQueryExecutionContext();
        }
        /**
         * Calls a specified callback for each item returned from the query.
         * Runs serially; each callback blocks the next.
         *
         * @param callback Specified callback.
         * First param is the result,
         * second param (optional) is the current headers object state,
         * third param (optional) is current index.
         * No more callbacks will be called if one of them results false.
         *
         * @returns Promise<void> - you should await or .catch the Promise in case there are any errors
         *
         * @example Iterate over all databases
         * ```typescript
         * await client.databases.readAll().forEach((db, headers, index) => {
         *   console.log(`Got ${db.id} from forEach`);
         * })
         * ```
         */
        forEach(callback) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                this.reset();
                let index = 0;
                while (this.queryExecutionContext.hasMoreResults()) {
                    const result = yield this.queryExecutionContext.nextItem();
                    if (result.result === undefined) {
                        return;
                    }
                    if (callback(result.result, result.headers, index) === false) {
                        return;
                    }
                    else {
                        ++index;
                    }
                }
            });
        }
        /**
         * Gets an async iterator that will yield results until completion.
         *
         * NOTE: AsyncIterators are a very new feature and you might need to
         * use polyfils/etc. in order to use them in your code.
         *
         * If you're using TypeScript, you can use the following polyfill as long
         * as you target ES6 or higher and are running on Node 6 or higher.
         *
         * ```typescript
         * if (!Symbol || !Symbol.asyncIterator) {
         *   (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
         * }
         * ```
         *
         * @see QueryIterator.forEach for very similar functionality.
         *
         * @example Iterate over all databases
         * ```typescript
         * for await(const {result: db} in client.databases.readAll().getAsyncIterator()) {
         *   console.log(`Got ${db.id} from AsyncIterator`);
         * }
         * ```
         */
        getAsyncIterator() {
            return tslib_1.__asyncGenerator(this, arguments, function* getAsyncIterator_1() {
                this.reset();
                while (this.queryExecutionContext.hasMoreResults()) {
                    const result = yield tslib_1.__await(this.queryExecutionContext.nextItem());
                    if (result.result === undefined) {
                        return yield tslib_1.__await(void 0);
                    }
                    yield yield tslib_1.__await(result);
                }
            });
        }
        /**
         * Execute a provided function on the next element in the QueryIterator.
         */
        nextItem() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return this.queryExecutionContext.nextItem();
            });
        }
        /**
         * Retrieve the current element on the QueryIterator.
         */
        current() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return this.queryExecutionContext.current();
            });
        }
        // TODO: why is has more results deprecated?
        /**
         * @deprecated Instead check if nextItem() or current() returns undefined.
         *
         * Determine if there are still remaining resources to processs based on the value of the continuation token or the\
         * elements remaining on the current batch in the QueryIterator.
         * @returns {Boolean} true if there is other elements to process in the QueryIterator.
         */
        hasMoreResults() {
            return this.queryExecutionContext.hasMoreResults();
        }
        /**
         * Retrieve all the elements of the feed and pass them as an array to a function
         */
        toArray() {
            return tslib_1.__awaiter(this, arguments, void 0, function* () {
                if (arguments.length !== 0) {
                    throw new Error("toArray takes no arguments");
                }
                this.reset();
                this.toArrayTempResources = [];
                return this._toArrayImplementation();
            });
        }
        /**
         * Retrieve the next batch of the feed and pass them as an array to a function
         */
        executeNext() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return this.queryExecutionContext.fetchMore();
            });
        }
        /**
         * Reset the QueryIterator to the beginning and clear all the resources inside it
         */
        reset() {
            this.queryExecutionContext = this._createQueryExecutionContext();
        }
        _toArrayImplementation() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                while (this.queryExecutionContext.hasMoreResults()) {
                    const { result, headers } = yield this.queryExecutionContext.nextItem();
                    // concatinate the results and fetch more
                    this.toArrayLastResHeaders = headers;
                    if (result === undefined) {
                        // no more results
                        break;
                    }
                    this.toArrayTempResources.push(result);
                }
                return {
                    result: this.toArrayTempResources,
                    headers: this.toArrayLastResHeaders
                };
            });
        }
        _createQueryExecutionContext() {
            return new ProxyQueryExecutionContext$$1(this.clientContext, this.query, this.options, this.fetchFunctions, this.resourceLink);
        }
    }

    /**
     * Use to read or delete a given {@link Conflict} by id.
     *
     * @see {@link Conflicts} to query or read all conflicts.
     */
    class Conflict {
        /**
         * @hidden
         * @param container The parent {@link Container}.
         * @param id The id of the given {@link Conflict}.
         */
        constructor(container, id, clientContext) {
            this.container = container;
            this.id = id;
            this.clientContext = clientContext;
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return `/${this.container.url}/${Constants.Path.ConflictsPathSegment}/${this.id}`;
        }
        /**
         * Read the {@link ConflictDefinition} for the given {@link Conflict}.
         * @param options
         */
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url, "conflicts");
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.read(path, "users", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, conflict: this };
            });
        }
        /**
         * Delete the given {@link ConflictDefinition}.
         * @param options
         */
        delete(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.delete(path, "conflicts", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, conflict: this };
            });
        }
    }

    /**
     * Use to query or read all conflicts.
     *
     * @see {@link Conflict} to read or delete a given {@link Conflict} by id.
     */
    class Conflicts {
        constructor(container, clientContext) {
            this.container = container;
            this.clientContext = clientContext;
        }
        query(query, options) {
            const path = Helper$$1.getPathFromLink(this.container.url, "conflicts");
            const id = Helper$$1.getIdFromLink(this.container.url);
            return new QueryIterator(this.clientContext, query, options, innerOptions => {
                return this.clientContext.queryFeed(path, "conflicts", id, result => result.Conflicts, query, innerOptions);
            });
        }
        /**
         * Reads all conflicts
         * @param options Use to set options like response page size, continuation tokens, etc.
         */
        readAll(options) {
            return this.query(undefined, options);
        }
    }

    (function (ConflictResolutionMode) {
        ConflictResolutionMode["Custom"] = "Custom";
        ConflictResolutionMode["LastWriterWins"] = "LastWriterWins";
    })(exports.ConflictResolutionMode || (exports.ConflictResolutionMode = {}));

    /**
     * Used to perform operations on a specific item.
     *
     * @see {@link Items} for operations on all items; see `container.items`.
     */
    class Item {
        /**
         * @hidden
         * @param container The parent {@link Container}.
         * @param id The id of the given {@link Item}.
         * @param primaryKey The primary key of the given {@link Item} (only for partitioned containers).
         */
        constructor(container, id, primaryKey, clientContext) {
            this.container = container;
            this.id = id;
            this.primaryKey = primaryKey;
            this.clientContext = clientContext;
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return UriFactory$$1.createDocumentUri(this.container.database.id, this.container.id, this.id);
        }
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                options = options || {};
                if ((!options || !options.partitionKey) && this.primaryKey) {
                    options.partitionKey = this.primaryKey;
                }
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.read(path, "docs", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    item: this
                };
            });
        }
        replace(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                options = options || {};
                if ((!options || !options.partitionKey) && this.primaryKey) {
                    options.partitionKey = this.primaryKey;
                }
                if (options.partitionKey === undefined && options.skipGetPartitionKeyDefinition !== true) {
                    const { body: partitionKeyDefinition } = yield this.container.getPartitionKeyDefinition();
                    options.partitionKey = this.container.extractPartitionKey(body, partitionKeyDefinition);
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.replace(body, path, "docs", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    item: this
                };
            });
        }
        delete(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                options = options || {};
                if ((!options || !options.partitionKey) && this.primaryKey) {
                    options.partitionKey = this.primaryKey;
                }
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.delete(path, "docs", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    item: this
                };
            });
        }
    }

    /**
     * Operations for creating new items, and reading/querying all items
     *
     * @see {@link Item} for reading, replacing, or deleting an existing container; use `.item(id)`.
     */
    class Items {
        /**
         * Create an instance of {@link Items} linked to the parent {@link Container}.
         * @param container The parent container.
         * @hidden
         */
        constructor(container, clientContext) {
            this.container = container;
            this.clientContext = clientContext;
        }
        query(query, options) {
            const path = Helper$$1.getPathFromLink(this.container.url, "docs");
            const id = Helper$$1.getIdFromLink(this.container.url);
            const fetchFunction = (innerOptions) => {
                return this.clientContext.queryFeed(path, "docs", id, result => (result ? result.Documents : []), query, innerOptions);
            };
            return new QueryIterator(this.clientContext, query, options, fetchFunction, this.container.url);
        }
        readAll(options) {
            return this.query(undefined, options);
        }
        create(body, options = {}) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (options.partitionKey === undefined && options.skipGetPartitionKeyDefinition !== true) {
                    const { body: partitionKeyDefinition } = yield this.container.getPartitionKeyDefinition();
                    options.partitionKey = this.container.extractPartitionKey(body, partitionKeyDefinition);
                }
                // Generate random document id if the id is missing in the payload and
                // options.disableAutomaticIdGeneration != true
                if ((body.id === undefined || body.id === "") && !options.disableAutomaticIdGeneration) {
                    body.id = Helper$$1.generateGuidId();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.container.url, "docs");
                const id = Helper$$1.getIdFromLink(this.container.url);
                const response = yield this.clientContext.create(body, path, "docs", id, undefined, options);
                const ref = new Item(this.container, response.result.id, (options && options.partitionKey), this.clientContext);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref,
                    item: ref
                };
            });
        }
        upsert(body, options = {}) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (options.partitionKey === undefined && options.skipGetPartitionKeyDefinition !== true) {
                    const { body: partitionKeyDefinition } = yield this.container.getPartitionKeyDefinition();
                    options.partitionKey = this.container.extractPartitionKey(body, partitionKeyDefinition);
                }
                // Generate random document id if the id is missing in the payload and
                // options.disableAutomaticIdGeneration != true
                if ((body.id === undefined || body.id === "") && !options.disableAutomaticIdGeneration) {
                    body.id = Helper$$1.generateGuidId();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.container.url, "docs");
                const id = Helper$$1.getIdFromLink(this.container.url);
                const response = (yield this.clientContext.upsert(body, path, "docs", id, undefined, options));
                const ref = new Item(this.container, response.result.id, (options && options.partitionKey), this.clientContext);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref,
                    item: ref
                };
            });
        }
    }

    /**
     * Operations for reading, replacing, deleting, or executing a specific, existing stored procedure by id.
     *
     * For operations to create, upsert, read all, or query Stored Procedures,
     */
    class StoredProcedure {
        /**
         * Creates a new isntance of {@link StoredProcedure} linked to the parent {@link Container}.
         * @param container The parent {@link Container}.
         * @param id The id of the given {@link StoredProcedure}.
         * @hidden
         */
        constructor(container, id, clientContext) {
            this.container = container;
            this.id = id;
            this.clientContext = clientContext;
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return UriFactory$$1.createStoredProcedureUri(this.container.database.id, this.container.id, this.id);
        }
        /**
         * Read the {@link StoredProcedureDefinition} for the given {@link StoredProcedure}.
         * @param options
         */
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.read(path, "sprocs", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, storedProcedure: this, sproc: this };
            });
        }
        /**
         * Replace the given {@link StoredProcedure} with the specified {@link StoredProcedureDefinition}.
         * @param body The specified {@link StoredProcedureDefinition} to replace the existing definition.
         * @param options
         */
        replace(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (body.body) {
                    body.body = body.body.toString();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.replace(body, path, "sprocs", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, storedProcedure: this, sproc: this };
            });
        }
        /**
         * Delete the given {@link StoredProcedure}.
         * @param options
         */
        delete(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.delete(path, "sprocs", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, storedProcedure: this, sproc: this };
            });
        }
        execute(params, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const response = yield this.clientContext.execute(this.url, params, options);
                return { body: response.result, headers: response.headers, ref: this };
            });
        }
    }

    /**
     * Operations for creating, upserting, or reading/querying all Stored Procedures.
     *
     * For operations to read, replace, delete, or execute a specific, existing stored procedure by id, see `container.storedProcedure()`.
     */
    class StoredProcedures {
        /**
         * @param container The parent {@link Container}.
         * @hidden
         */
        constructor(container, clientContext) {
            this.container = container;
            this.clientContext = clientContext;
        }
        query(query, options) {
            const path = Helper$$1.getPathFromLink(this.container.url, "sprocs");
            const id = Helper$$1.getIdFromLink(this.container.url);
            return new QueryIterator(this.clientContext, query, options, innerOptions => {
                return this.clientContext.queryFeed(path, "sprocs", id, result => result.StoredProcedures, query, innerOptions);
            });
        }
        /**
         * Read all stored procedures.
         * @param options
         * @example Read all stored procedures to array.
         * ```typescript
         * const {body: sprocList} = await containers.storedProcedures.readAll().toArray();
         * ```
         */
        readAll(options) {
            return this.query(undefined, options);
        }
        /**
         * Create a StoredProcedure.
         *
         * Azure Cosmos DB allows stored procedures to be executed in the storage tier,
         * directly against an item container. The script
         * gets executed under ACID transactions on the primary storage partition of the
         * specified container. For additional details,
         * refer to the server-side JavaScript API documentation.
         */
        create(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (body.body) {
                    body.body = body.body.toString();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.container.url, "sprocs");
                const id = Helper$$1.getIdFromLink(this.container.url);
                const response = yield this.clientContext.create(body, path, "sprocs", id, undefined, options);
                const ref = new StoredProcedure(this.container, response.result.id, this.clientContext);
                return { body: response.result, headers: response.headers, ref, storedProcedure: ref, sproc: ref };
            });
        }
        /**
         * Upsert a StoredProcedure.
         *
         * Azure Cosmos DB allows stored procedures to be executed in the storage tier,
         * directly against a document container. The script
         * gets executed under ACID transactions on the primary storage partition of the
         *  specified container. For additional details,
         * refer to the server-side JavaScript API documentation.
         *
         */
        upsert(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (body.body) {
                    body.body = body.body.toString();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.container.url, "sprocs");
                const id = Helper$$1.getIdFromLink(this.container.url);
                const response = yield this.clientContext.upsert(body, path, "sprocs", id, undefined, options);
                const ref = new StoredProcedure(this.container, response.result.id, this.clientContext);
                return { body: response.result, headers: response.headers, ref, storedProcedure: ref, sproc: ref };
            });
        }
    }

    /**
     * Operations to read, replace, or delete a {@link Trigger}.
     *
     * Use `container.triggers` to create, upsert, query, or read all.
     */
    class Trigger {
        /**
         * @hidden
         * @param container The parent {@link Container}.
         * @param id The id of the given {@link Trigger}.
         */
        constructor(container, id, clientContext) {
            this.container = container;
            this.id = id;
            this.clientContext = clientContext;
            this.client = this.container.database.client;
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return UriFactory$$1.createTriggerUri(this.container.database.id, this.container.id, this.id);
        }
        /**
         * Read the {@link TriggerDefinition} for the given {@link Trigger}.
         * @param options
         */
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.read(path, "triggers", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, trigger: this };
            });
        }
        /**
         * Replace the given {@link Trigger} with the specified {@link TriggerDefinition}.
         * @param body The specified {@link TriggerDefinition} to replace the existing definition with.
         * @param options
         */
        replace(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (body.body) {
                    body.body = body.body.toString();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.replace(body, path, "triggers", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, trigger: this };
            });
        }
        /**
         * Delete the given {@link Trigger}.
         * @param options
         */
        delete(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.delete(path, "triggers", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, trigger: this };
            });
        }
    }

    /**
     * Operations to create, upsert, query, and read all triggers.
     *
     * Use `container.triggers` to read, replace, or delete a {@link Trigger}.
     */
    class Triggers {
        /**
         * @hidden
         * @param container The parent {@link Container}.
         */
        constructor(container, clientContext) {
            this.container = container;
            this.clientContext = clientContext;
        }
        query(query, options) {
            const path = Helper$$1.getPathFromLink(this.container.url, "triggers");
            const id = Helper$$1.getIdFromLink(this.container.url);
            return new QueryIterator(this.clientContext, query, options, innerOptions => {
                return this.clientContext.queryFeed(path, "triggers", id, result => result.Triggers, query, innerOptions);
            });
        }
        /**
         * Read all Triggers.
         * @param options
         * @example Read all trigger to array.
         * ```typescript
         * const {body: triggerList} = await container.triggers.readAll().toArray();
         * ```
         */
        readAll(options) {
            return this.query(undefined, options);
        }
        /**
         * Create a trigger.
         *
         * Azure Cosmos DB supports pre and post triggers defined in JavaScript to be executed
         * on creates, updates and deletes.
         *
         * For additional details, refer to the server-side JavaScript API documentation.
         * @param body
         * @param options
         */
        create(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (body.body) {
                    body.body = body.body.toString();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.container.url, "triggers");
                const id = Helper$$1.getIdFromLink(this.container.url);
                const response = yield this.clientContext.create(body, path, "triggers", id, undefined, options);
                const ref = new Trigger(this.container, response.result.id, this.clientContext);
                return { body: response.result, headers: response.headers, ref, trigger: ref };
            });
        }
        /**
         * Upsert a trigger.
         *
         * Azure Cosmos DB supports pre and post triggers defined in JavaScript to be
         * executed on creates, updates and deletes.
         *
         * For additional details, refer to the server-side JavaScript API documentation.
         * @param body
         * @param options
         */
        upsert(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (body.body) {
                    body.body = body.body.toString();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.container.url, "triggers");
                const id = Helper$$1.getIdFromLink(this.container.url);
                const response = yield this.clientContext.upsert(body, path, "triggers", id, undefined, options);
                const ref = new Trigger(this.container, response.result.id, this.clientContext);
                return { body: response.result, headers: response.headers, ref, trigger: ref };
            });
        }
    }

    /**
     * Used to read, replace, or delete a specified User Definied Function by id.
     *
     * @see {@link UserDefinedFunction} to create, upsert, query, read all User Defined Functions.
     */
    class UserDefinedFunction {
        /**
         * @hidden
         * @param container The parent {@link Container}.
         * @param id The id of the given {@link UserDefinedFunction}.
         */
        constructor(container, id, clientContext) {
            this.container = container;
            this.id = id;
            this.clientContext = clientContext;
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return UriFactory$$1.createUserDefinedFunctionUri(this.container.database.id, this.container.id, this.id);
        }
        /**
         * Read the {@link UserDefinedFunctionDefinition} for the given {@link UserDefinedFunction}.
         * @param options
         */
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.read(path, "udfs", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, userDefinedFunction: this, udf: this };
            });
        }
        /**
         * Replace the given {@link UserDefinedFunction} with the specified {@link UserDefinedFunctionDefinition}.
         * @param body The specified {@link UserDefinedFunctionDefinition}.
         * @param options
         */
        replace(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (body.body) {
                    body.body = body.body.toString();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.replace(body, path, "udfs", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, userDefinedFunction: this, udf: this };
            });
        }
        /**
         * Delete the given {@link UserDefined}.
         * @param options
         */
        delete(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.delete(path, "udfs", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, userDefinedFunction: this, udf: this };
            });
        }
    }

    /**
     * Used to create, upsert, query, or read all User Defined Functions.
     *
     * @see {@link UserDefinedFunction} to read, replace, or delete a given User Defined Function by id.
     */
    class UserDefinedFunctions {
        /**
         * @hidden
         * @param container The parent {@link Container}.
         */
        constructor(container, clientContext) {
            this.container = container;
            this.clientContext = clientContext;
        }
        query(query, options) {
            const path = Helper$$1.getPathFromLink(this.container.url, "udfs");
            const id = Helper$$1.getIdFromLink(this.container.url);
            return new QueryIterator(this.clientContext, query, options, innerOptions => {
                return this.clientContext.queryFeed(path, "udfs", id, result => result.UserDefinedFunctions, query, innerOptions);
            });
        }
        /**
         * Read all User Defined Functions.
         * @param options
         * @example Read all User Defined Functions to array.
         * ```typescript
         * const {body: udfList} = await container.userDefinedFunctions.readAll().toArray();
         * ```
         */
        readAll(options) {
            return this.query(undefined, options);
        }
        /**
         * Create a UserDefinedFunction.
         *
         * Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers.
         *
         * For additional details, refer to the server-side JavaScript API documentation.
         *
         */
        create(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (body.body) {
                    body.body = body.body.toString();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.container.url, "udfs");
                const id = Helper$$1.getIdFromLink(this.container.url);
                const response = yield this.clientContext.create(body, path, "udfs", id, undefined, options);
                const ref = new UserDefinedFunction(this.container, response.result.id, this.clientContext);
                return { body: response.result, headers: response.headers, ref, userDefinedFunction: ref, udf: ref };
            });
        }
        /**
         * Upsert a UserDefinedFunction.
         *
         * Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers.
         *
         * For additional details, refer to the server-side JavaScript API documentation.
         *
         */
        upsert(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (body.body) {
                    body.body = body.body.toString();
                }
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.container.url, "udfs");
                const id = Helper$$1.getIdFromLink(this.container.url);
                const response = yield this.clientContext.upsert(body, path, "udfs", id, undefined, options);
                const ref = new UserDefinedFunction(this.container, response.result.id, this.clientContext);
                return { body: response.result, headers: response.headers, ref, userDefinedFunction: ref, udf: ref };
            });
        }
    }

    /**
     * Operations for reading, replacing, or deleting a specific, existing container by id.
     *
     * @see {@link Containers} for creating new containers, and reading/querying all containers; use `.containers`.
     *
     * Note: all these operations make calls against a fixed budget.
     * You should design your system such that these calls scale sublinearly with your application.
     * For instance, do not call `container(id).read()` before every single `item.read()` call, to ensure the container exists;
     * do this once on application start up.
     */
    class Container {
        /**
         * Returns a container instance. Note: You should get this from `database.container(id)`, rather than creating your own object.
         * @param database The parent {@link Database}.
         * @param id The id of the given container.
         * @hidden
         */
        constructor(database, id, clientContext) {
            this.database = database;
            this.id = id;
            this.clientContext = clientContext;
            this.items = new Items(this, this.clientContext);
            this.storedProcedures = new StoredProcedures(this, this.clientContext);
            this.triggers = new Triggers(this, this.clientContext);
            this.userDefinedFunctions = new UserDefinedFunctions(this, this.clientContext);
            this.conflicts = new Conflicts(this, this.clientContext);
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return UriFactory$$1.createDocumentCollectionUri(this.database.id, this.id);
        }
        /**
         * Used to read, replace, or delete a specific, existing {@link Item} by id.
         *
         * Use `.items` for creating new items, or querying/reading all items.
         *
         * @param id The id of the {@link Item}.
         * @param partitionKey The partition key of the {@link Item}. (Required for partitioned containers).
         * @example Replace an item
         * const {body: replacedItem} = await container.item("<item id>").replace({id: "<item id>", title: "Updated post", authorID: 5});
         */
        item(id, partitionKey) {
            return new Item(this, id, partitionKey, this.clientContext);
        }
        /**
         * Used to read, replace, or delete a specific, existing {@link UserDefinedFunction} by id.
         *
         * Use `.userDefinedFunctions` for creating new user defined functions, or querying/reading all user defined functions.
         * @param id The id of the {@link UserDefinedFunction}.
         */
        userDefinedFunction(id) {
            return new UserDefinedFunction(this, id, this.clientContext);
        }
        /**
         * Used to read, replace, or delete a specific, existing {@link Conflict} by id.
         *
         * Use `.conflicts` for creating new conflicts, or querying/reading all conflicts.
         * @param id The id of the {@link Conflict}.
         */
        conflict(id) {
            return new Conflict(this, id, this.clientContext);
        }
        /**
         * Used to read, replace, or delete a specific, existing {@link StoredProcedure} by id.
         *
         * Use `.storedProcedures` for creating new stored procedures, or querying/reading all stored procedures.
         * @param id The id of the {@link StoredProcedure}.
         */
        storedProcedure(id) {
            return new StoredProcedure(this, id, this.clientContext);
        }
        /**
         * Used to read, replace, or delete a specific, existing {@link Trigger} by id.
         *
         * Use `.triggers` for creating new triggers, or querying/reading all triggers.
         * @param id The id of the {@link Trigger}.
         */
        trigger(id) {
            return new Trigger(this, id, this.clientContext);
        }
        /** Read the container's definition */
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.read(path, "colls", id, undefined, options);
                this.clientContext.partitionKeyDefinitionCache[this.url] = response.result.partitionKey;
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    container: this
                };
            });
        }
        /** Replace the container's definition */
        replace(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.replace(body, path, "colls", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    container: this
                };
            });
        }
        /** Delete the container */
        delete(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.delete(path, "colls", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    container: this
                };
            });
        }
        /**
         * Gets the partition key definition first by looking into the cache otherwise by reading the collection.
         * @ignore
         * @param {string} collectionLink   - Link to the collection whose partition key needs to be extracted.
         * @param {function} callback       - \
         * The arguments to the callback are(in order): error, partitionKeyDefinition, response object and response headers
         */
        getPartitionKeyDefinition() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // $ISSUE-felixfan-2016-03-17: Make name based path and link based path use the same key
                // $ISSUE-felixfan-2016-03-17: Refresh partitionKeyDefinitionCache when necessary
                if (this.url in this.clientContext.partitionKeyDefinitionCache) {
                    return {
                        body: this.clientContext.partitionKeyDefinitionCache[this.url],
                        ref: this
                    };
                }
                const { headers } = yield this.read();
                return {
                    body: this.clientContext.partitionKeyDefinitionCache[this.url],
                    headers,
                    ref: this
                };
            });
        }
        // TODO: The ParitionKey type is REALLY weird. Now that it's being exported, we should clean it up.
        extractPartitionKey(document, partitionKeyDefinition) {
            // TODO: any
            if (partitionKeyDefinition && partitionKeyDefinition.paths && partitionKeyDefinition.paths.length > 0) {
                const partitionKey = [];
                partitionKeyDefinition.paths.forEach((path) => {
                    const pathParts = Helper$$1.parsePath(path);
                    let obj = document;
                    for (const part of pathParts) {
                        if (!(typeof obj === "object" && part in obj)) {
                            obj = {};
                            break;
                        }
                        obj = obj[part];
                    }
                    partitionKey.push(obj);
                });
                return partitionKey;
            }
            return undefined;
        }
    }

    /**
     * Operations for creating new containers, and reading/querying all containers
     *
     * @see {@link Container} for reading, replacing, or deleting an existing container; use `.container(id)`.
     *
     * Note: all these operations make calls against a fixed budget.
     * You should design your system such that these calls scale sublinearly with your application.
     * For instance, do not call `containers.readAll()` before every single `item.read()` call, to ensure the container exists;
     * do this once on application start up.
     */
    class Containers {
        constructor(database, clientContext) {
            this.database = database;
            this.clientContext = clientContext;
        }
        query(query, options) {
            const path = Helper$$1.getPathFromLink(this.database.url, "colls");
            const id = Helper$$1.getIdFromLink(this.database.url);
            return new QueryIterator(this.clientContext, query, options, innerOptions => {
                return this.clientContext.queryFeed(path, "colls", id, result => result.DocumentCollections, query, innerOptions);
            });
        }
        /**
         * Creates a container.
         *
         * A container is a named logical container for items.
         *
         * A database may contain zero or more named containers and each container consists of
         * zero or more JSON items.
         *
         * Being schema-free, the items in a container do not need to share the same structure or fields.
         *
         *
         * Since containers are application resources, they can be authorized using either the
         * master key or resource keys.
         *
         * @param body Represents the body of the container.
         * @param options Use to set options like response page size, continuation tokens, etc.
         */
        create(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.database.url, "colls");
                const id = Helper$$1.getIdFromLink(this.database.url);
                const response = yield this.clientContext.create(body, path, "colls", id, undefined, options);
                const ref = new Container(this.database, response.result.id, this.clientContext);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref,
                    container: ref
                };
            });
        }
        /**
         * Checks if a Container exists, and, if it doesn't, creates it.
         * This will make a read operation based on the id in the `body`, then if it is not found, a create operation.
         * You should confirm that the output matches the body you passed in for non-default properties (i.e. indexing policy/etc.)
         *
         * A container is a named logical container for items.
         *
         * A database may contain zero or more named containers and each container consists of
         * zero or more JSON items.
         *
         * Being schema-free, the items in a container do not need to share the same structure or fields.
         *
         *
         * Since containers are application resources, they can be authorized using either the
         * master key or resource keys.
         *
         * @param body Represents the body of the container.
         * @param options Use to set options like response page size, continuation tokens, etc.
         */
        createIfNotExists(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!body || body.id === null || body.id === undefined) {
                    throw new Error("body parameter must be an object with an id property");
                }
                /*
                  1. Attempt to read the Database (based on an assumption that most databases will already exist, so its faster)
                  2. If it fails with NotFound error, attempt to create the db. Else, return the read results.
                */
                try {
                    const readResponse = yield this.database.container(body.id).read(options);
                    return readResponse;
                }
                catch (err) {
                    if (err.code === StatusCodes.NotFound) {
                        const createResponse = yield this.create(body, options);
                        // Must merge the headers to capture RU costskaty
                        HeaderUtils.mergeHeaders(createResponse.headers, err.headers);
                        return createResponse;
                    }
                    else {
                        throw err;
                    }
                }
            });
        }
        /**
         * Read all containers.
         * @param options Use to set options like response page size, continuation tokens, etc.
         * @returns {@link QueryIterator} Allows you to return all containers in an array or iterate over them one at a time.
         * @example Read all containers to array.
         * ```typescript
         * const {body: containerList} = await client.database("<db id>").containers.readAll().toArray();
         * ```
         */
        readAll(options) {
            return this.query(undefined, options);
        }
    }

    /**
     * Use to read, replace, or delete a given {@link Permission} by id.
     *
     * @see {@link Permissions} to create, upsert, query, or read all Permissions.
     */
    class Permission {
        /**
         * @hidden
         * @param user The parent {@link User}.
         * @param id The id of the given {@link Permission}.
         */
        constructor(user, id, clientContext) {
            this.user = user;
            this.id = id;
            this.clientContext = clientContext;
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return UriFactory$$1.createPermissionUri(this.user.database.id, this.user.id, this.id);
        }
        /**
         * Read the {@link PermissionDefinition} of the given {@link Permission}.
         * @param options
         */
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.read(path, "permissions", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    permission: this
                };
            });
        }
        /**
         * Replace the given {@link Permission} with the specified {@link PermissionDefinition}.
         * @param body The specified {@link PermissionDefinition}.
         * @param options
         */
        replace(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.replace(body, path, "permissions", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    permission: this
                };
            });
        }
        /**
         * Delete the given {@link Permission}.
         * @param options
         */
        delete(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.delete(path, "permissions", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    permission: this
                };
            });
        }
    }

    /**
     * Use to create, replace, query, and read all Permissions.
     *
     * @see {@link Permission} to read, replace, or delete a specific permission by id.
     */
    class Permissions {
        /**
         * @hidden
         * @param user The parent {@link User}.
         */
        constructor(user, clientContext) {
            this.user = user;
            this.clientContext = clientContext;
        }
        query(query, options) {
            const path = Helper$$1.getPathFromLink(this.user.url, "permissions");
            const id = Helper$$1.getIdFromLink(this.user.url);
            return new QueryIterator(this.clientContext, query, options, innerOptions => {
                return this.clientContext.queryFeed(path, "permissions", id, result => result.Permissions, query, innerOptions);
            });
        }
        /**
         * Read all permissions.
         * @param options
         * @example Read all permissions to array.
         * ```typescript
         * const {body: permissionList} = await user.permissions.readAll().toArray();
         * ```
         */
        readAll(options) {
            return this.query(undefined, options);
        }
        /**
         * Create a permission.
         *
         * A permission represents a per-User Permission to access a specific resource
         * e.g. Item or Container.
         * @param body Represents the body of the permission.
         */
        create(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.user.url, "permissions");
                const id = Helper$$1.getIdFromLink(this.user.url);
                const response = yield this.clientContext.create(body, path, "permissions", id, undefined, options);
                const ref = new Permission(this.user, response.result.id, this.clientContext);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref,
                    permission: ref
                };
            });
        }
        /**
         * Upsert a permission.
         *
         * A permission represents a per-User Permission to access a
         * specific resource e.g. Item or Cotnainer.
         */
        upsert(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.user.url, "permissions");
                const id = Helper$$1.getIdFromLink(this.user.url);
                const response = yield this.clientContext.upsert(body, path, "permissions", id, undefined, options);
                const ref = new Permission(this.user, response.result.id, this.clientContext);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref,
                    permission: ref
                };
            });
        }
    }

    /**
     * Used to read, replace, and delete Users.
     *
     * Additionally, you can access the permissions for a given user via `user.permission` and `user.permissions`.
     *
     * @see {@link Users} to create, upsert, query, or read all.
     */
    class User {
        /**
         * @hidden
         * @param database The parent {@link Database}.
         * @param id
         */
        constructor(database, id, clientContext) {
            this.database = database;
            this.id = id;
            this.clientContext = clientContext;
            this.permissions = new Permissions(this, this.clientContext);
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return UriFactory$$1.createUserUri(this.database.id, this.id);
        }
        /**
         * Operations to read, replace, or delete a specific Permission by id.
         *
         * See `client.permissions` for creating, upserting, querying, or reading all operations.
         * @param id
         */
        permission(id) {
            return new Permission(this, id, this.clientContext);
        }
        /**
         * Read the {@link UserDefinition} for the given {@link User}.
         * @param options
         */
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.read(path, "users", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, user: this };
            });
        }
        /**
         * Replace the given {@link User}'s definition with the specified {@link UserDefinition}.
         * @param body The specified {@link UserDefinition} to replace the definition.
         * @param options
         */
        replace(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.replace(body, path, "users", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, user: this };
            });
        }
        /**
         * Delete the given {@link User}.
         * @param options
         */
        delete(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.delete(path, "users", id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, user: this };
            });
        }
    }

    /**
     * Used to create, upsert, query, and read all users.
     *
     * @see {@link User} to read, replace, or delete a specific User by id.
     */
    class Users {
        /**
         * @hidden
         * @param database The parent {@link Database}.
         */
        constructor(database, clientContext) {
            this.database = database;
            this.clientContext = clientContext;
        }
        query(query, options) {
            const path = Helper$$1.getPathFromLink(this.database.url, "users");
            const id = Helper$$1.getIdFromLink(this.database.url);
            return new QueryIterator(this.clientContext, query, options, innerOptions => {
                return this.clientContext.queryFeed(path, "users", id, result => result.Users, query, innerOptions);
            });
        }
        /**
         * Read all users.
         * @param options
         * @example Read all users to array.
         * ```typescript
         * const {body: usersList} = await database.users.readAll().toArray();
         * ```
         */
        readAll(options) {
            return this.query(undefined, options);
        }
        /**
         * Create a database user with the specified {@link UserDefinition}.
         * @param body The specified {@link UserDefinition}.
         * @param options
         */
        create(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.database.url, "users");
                const id = Helper$$1.getIdFromLink(this.database.url);
                const response = yield this.clientContext.create(body, path, "users", id, undefined, options);
                const ref = new User(this.database, response.result.id, this.clientContext);
                return { body: response.result, headers: response.headers, ref, user: ref };
            });
        }
        /**
         * Upsert a database user with a specified {@link UserDefinition}.
         * @param body The specified {@link UserDefinition}.
         * @param options
         */
        upsert(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = Helper$$1.getPathFromLink(this.database.url, "users");
                const id = Helper$$1.getIdFromLink(this.database.url);
                const response = yield this.clientContext.upsert(body, path, "users", id, undefined, options);
                const ref = new User(this.database, response.result.id, this.clientContext);
                return { body: response.result, headers: response.headers, ref, user: ref };
            });
        }
    }

    /**
     * Operations for reading or deleting an existing database.
     *
     * @see {@link Databases} for creating new databases, and reading/querying all databases; use `client.databases`.
     *
     * Note: all these operations make calls against a fixed budget.
     * You should design your system such that these calls scale sublinearly with your application.
     * For instance, do not call `database.read()` before every single `item.read()` call, to ensure the database exists;
     * do this once on application start up.
     */
    class Database {
        /** Returns a new {@link Database} instance.
         *
         * Note: the intention is to get this object from {@link CosmosClient} via `client.databsae(id)`, not to instaniate it yourself.
         */
        constructor(client, id, clientContext) {
            this.client = client;
            this.id = id;
            this.clientContext = clientContext;
            this.containers = new Containers(this, this.clientContext);
            this.users = new Users(this, this.clientContext);
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return UriFactory$$1.createDatabaseUri(this.id);
        }
        /**
         * Used to read, replace, or delete a specific, existing {@link Database} by id.
         *
         * Use `.containers` creating new containers, or querying/reading all containers.
         *
         * @example Delete a container
         * ```typescript
         * await client.database("<db id>").container("<container id>").delete();
         * ```
         */
        container(id) {
            return new Container(this, id, this.clientContext);
        }
        /**
         * Used to read, replace, or delete a specific, existing {@link User} by id.
         *
         * Use `.users` for creating new users, or querying/reading all users.
         */
        user(id) {
            return new User(this, id, this.clientContext);
        }
        /** Read the definition of the given Database. */
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.read(path, "dbs", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    database: this
                };
            });
        }
        /** Delete the given Database. */
        delete(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const path = Helper$$1.getPathFromLink(this.url);
                const id = Helper$$1.getIdFromLink(this.url);
                const response = yield this.clientContext.delete(path, "dbs", id, undefined, options);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref: this,
                    database: this
                };
            });
        }
    }

    /**
     * Operations for creating new databases, and reading/querying all databases
     *
     * @see {@link Database} for reading or deleting an existing database; use `client.database(id)`.
     *
     * Note: all these operations make calls against a fixed budget.
     * You should design your system such that these calls scale sublinearly with your application.
     * For instance, do not call `databases.readAll()` before every single `item.read()` call, to ensure the database exists;
     * do this once on application start up.
     */
    class Databases {
        /**
         * @hidden
         * @param client The parent {@link CosmosClient} for the Database.
         */
        constructor(client, clientContext) {
            this.client = client;
            this.clientContext = clientContext;
        }
        query(query, options) {
            const cb = innerOptions => {
                return this.clientContext.queryFeed("/dbs", "dbs", "", result => result.Databases, query, innerOptions);
            };
            return new QueryIterator(this.clientContext, query, options, cb);
        }
        /**
         * Send a request for creating a database.
         *
         * A database manages users, permissions and a set of containers.
         * Each Azure Cosmos DB Database Account is able to support multiple independent named databases,
         * with the database being the logical container for data.
         *
         * Each Database consists of one or more containers, each of which in turn contain one or more
         * documents. Since databases are an administrative resource, the Service Master Key will be
         * required in order to access and successfully complete any action using the User APIs.
         *
         * @param body The {@link DatabaseDefinition} that represents the {@link Database} to be created.
         * @param options Use to set options like response page size, continuation tokens, etc.
         */
        create(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const path = "/dbs"; // TODO: constant
                const response = yield this.clientContext.create(body, path, "dbs", undefined, undefined, options);
                const ref = new Database(this.client, body.id, this.clientContext);
                return {
                    body: response.result,
                    headers: response.headers,
                    ref,
                    database: ref
                };
            });
        }
        /**
         * Check if a database exists, and if it doesn't, create it.
         * This will make a read operation based on the id in the `body`, then if it is not found, a create operation.
         *
         * A database manages users, permissions and a set of containers.
         * Each Azure Cosmos DB Database Account is able to support multiple independent named databases,
         * with the database being the logical container for data.
         *
         * Each Database consists of one or more containers, each of which in turn contain one or more
         * documents. Since databases are an an administrative resource, the Service Master Key will be
         * required in order to access and successfully complete any action using the User APIs.
         *
         * @param body The {@link DatabaseDefinition} that represents the {@link Database} to be created.
         * @param options
         */
        createIfNotExists(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!body || body.id === null || body.id === undefined) {
                    throw new Error("body parameter must be an object with an id property");
                }
                /*
                  1. Attempt to read the Database (based on an assumption that most databases will already exist, so its faster)
                  2. If it fails with NotFound error, attempt to create the db. Else, return the read results.
                */
                try {
                    const readResponse = yield this.client.database(body.id).read(options);
                    return readResponse;
                }
                catch (err) {
                    if (err.code === StatusCodes.NotFound) {
                        const createResponse = yield this.create(body, options);
                        // Must merge the headers to capture RU costskaty
                        HeaderUtils.mergeHeaders(createResponse.headers, err.headers);
                        return createResponse;
                    }
                    else {
                        throw err;
                    }
                }
            });
        }
        // TODO: DatabaseResponse for QueryIterator?
        /**
         * Reads all databases.
         * @param options Use to set options like response page size, continuation tokens, etc.
         * @returns {@link QueryIterator} Allows you to return all databases in an array or iterate over them one at a time.
         * @example Read all databases to array.
         * ```typescript
         * const {body: databaseList} = await client.databases.readAll().toArray();
         * ```
         */
        readAll(options) {
            return this.query(undefined, options);
        }
    }

    /**
     * Use to read or replace an existing {@link Offer} by id.
     *
     * @see {@link Offers} to query or read all offers.
     */
    class Offer {
        /**
         * @hidden
         * @param client The parent {@link CosmosClient} for the Database Account.
         * @param id The id of the given {@link Offer}.
         */
        constructor(client, id, clientContext) {
            this.client = client;
            this.id = id;
            this.clientContext = clientContext;
        }
        /**
         * Returns a reference URL to the resource. Used for linking in Permissions.
         */
        get url() {
            return `/${Constants.Path.OffersPathSegment}/${this.id}`;
        }
        /**
         * Read the {@link OfferDefinition} for the given {@link Offer}.
         * @param options
         */
        read(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const response = yield this.clientContext.read(this.url, "offers", this.id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, offer: this };
            });
        }
        /**
         * Replace the given {@link Offer} with the specified {@link OfferDefinition}.
         * @param body The specified {@link OfferDefinition}
         * @param options
         */
        replace(body, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const err = {};
                if (!Helper$$1.isResourceValid(body, err)) {
                    throw err;
                }
                const response = yield this.clientContext.replace(body, this.url, "offers", this.id, undefined, options);
                return { body: response.result, headers: response.headers, ref: this, offer: this };
            });
        }
    }

    /**
     * Use to query or read all Offers.
     *
     * @see {@link Offer} to read or replace an existing {@link Offer} by id.
     */
    class Offers {
        /**
         * @hidden
         * @param client The parent {@link CosmosClient} for the offers.
         */
        constructor(client, clientContext) {
            this.client = client;
            this.clientContext = clientContext;
        }
        query(query, options) {
            return new QueryIterator(this.clientContext, query, options, innerOptions => {
                return this.clientContext.queryFeed("/offers", "offers", "", result => result.Offers, query, innerOptions);
            });
        }
        /**
         * Read all offers.
         * @param options
         * @example Read all offers to array.
         * ```typescript
         * const {body: offerList} = await client.offers.readAll().toArray();
         * ```
         */
        readAll(options) {
            return this.query(undefined, options);
        }
    }

    /** @hidden */
    class AuthHandler {
        static getAuthorizationHeader(authOptions, verb, path, resourceId, resourceType, headers) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (authOptions.permissionFeed) {
                    authOptions.resourceTokens = {};
                    for (const permission of authOptions.permissionFeed) {
                        const id = Helper$$1.getResourceIdFromPath(permission.resource);
                        if (!id) {
                            throw new Error(`authorization error: ${id} \
                          is an invalid resourceId in permissionFeed`);
                        }
                        authOptions.resourceTokens[id] = permission._token; // TODO: any
                    }
                }
                if (authOptions.masterKey) {
                    return encodeURIComponent(AuthHandler.getAuthorizationTokenUsingMasterKey(verb, resourceId, resourceType, headers, authOptions.masterKey));
                }
                else if (authOptions.resourceTokens) {
                    return encodeURIComponent(AuthHandler.getAuthorizationTokenUsingResourceTokens(authOptions.resourceTokens, path, resourceId));
                }
                else if (authOptions.tokenProvider) {
                    return encodeURIComponent(yield AuthHandler.getAuthorizationTokenUsingTokenProvider(authOptions.tokenProvider, {
                        verb,
                        path,
                        resourceId,
                        resourceType,
                        headers
                    }));
                }
            });
        }
        static getAuthorizationTokenUsingMasterKey(verb, resourceId, resourceType, headers, masterKey) {
            const key = Buffer.from(masterKey, "base64");
            const text = (verb || "").toLowerCase() +
                "\n" +
                (resourceType || "").toLowerCase() +
                "\n" +
                (resourceId || "") +
                "\n" +
                (headers["x-ms-date"] || "").toLowerCase() +
                "\n" +
                (headers["date"] || "").toLowerCase() +
                "\n";
            const body = Buffer.from(text, "utf8");
            const signature = createHmac("sha256", key)
                .update(body)
                .digest("base64");
            const MasterToken = "master";
            const TokenVersion = "1.0";
            return `type=${MasterToken}&ver=${TokenVersion}&sig=${signature}`;
        }
        // TODO: Resource tokens
        static getAuthorizationTokenUsingResourceTokens(resourceTokens, path, resourceId) {
            if (resourceTokens && Object.keys(resourceTokens).length > 0) {
                // For database account access(through getDatabaseAccount API), path and resourceId are "",
                // so in this case we return the first token to be used for creating the auth header as the
                // service will accept any token in this case
                if (!path && !resourceId) {
                    return resourceTokens[Object.keys(resourceTokens)[0]];
                }
                if (resourceId && resourceTokens[resourceId]) {
                    return resourceTokens[resourceId];
                }
                // minimum valid path /dbs
                if (!path || path.length < 4) {
                    return null;
                }
                // remove '/' from left and right of path
                path = path[0] === "/" ? path.substring(1) : path;
                path = path[path.length - 1] === "/" ? path.substring(0, path.length - 1) : path;
                const pathSegments = (path && path.split("/")) || [];
                // if it's an incomplete path like /dbs/db1/colls/, start from the paretn resource
                let index = pathSegments.length % 2 === 0 ? pathSegments.length - 1 : pathSegments.length - 2;
                for (; index > 0; index -= 2) {
                    const id = decodeURI(pathSegments[index]);
                    if (resourceTokens[id]) {
                        return resourceTokens[id];
                    }
                }
            }
            return null;
        }
        static getAuthorizationTokenUsingTokenProvider(tokenProvider, requestInfo) {
            requestInfo.getAuthorizationTokenUsingMasterKey = AuthHandler.getAuthorizationTokenUsingMasterKey;
            return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const callback = (err, token) => {
                    if (reject) {
                        return reject(err);
                    }
                    resolve(token);
                };
                const results = tokenProvider.getToken(requestInfo, callback);
                if (results.then && typeof results.then === "function") {
                    resolve(yield results);
                }
            }));
        }
    }

    /** @hidden */
    const isBrowser = new Function("try {return this===window;}catch(e){ return false;}");
    /** @hidden */
    function javaScriptFriendlyJSONStringify(s) {
        // two line terminators (Line separator and Paragraph separator) are not needed to be escaped in JSON
        // but are needed to be escaped in JavaScript.
        return JSON.stringify(s)
            .replace(/\u2028/g, "\\u2028")
            .replace(/\u2029/g, "\\u2029");
    }
    /** @hidden */
    function bodyFromData(data) {
        if (data.pipe) {
            return data;
        }
        if (Buffer.isBuffer(data)) {
            return data;
        }
        if (typeof data === "string") {
            return data;
        }
        if (typeof data === "object") {
            return javaScriptFriendlyJSONStringify(data);
        }
        return undefined;
    }
    /** @hidden */
    function parse(urlString) {
        return url.parse(urlString);
    }
    /** @hidden */
    function createRequestObject(connectionPolicy, requestOptions, body) {
        return new Promise((resolve, reject) => {
            function onTimeout() {
                httpsRequest.abort();
            }
            const isMedia = requestOptions.path.indexOf("//media") === 0;
            const httpsRequest = https__default.request(requestOptions, (response) => {
                // In case of media response, return the stream to the user and the user will need
                // to handle reading the stream.
                if (isMedia && connectionPolicy.MediaReadMode === exports.MediaReadMode.Streamed) {
                    return resolve({
                        result: response,
                        headers: response.headers
                    });
                }
                let data = "";
                // if the requested data is text (not attachment/media) set the encoding to UTF-8
                if (!isMedia) {
                    response.setEncoding("utf8");
                }
                response.on("data", (chunk) => {
                    data += chunk;
                });
                response.on("end", () => {
                    if (response.statusCode >= 400) {
                        return reject(getErrorBody(response, data, response.headers));
                    }
                    let result;
                    try {
                        result = isMedia ? data : data.length > 0 ? JSON.parse(data) : undefined;
                    }
                    catch (exception) {
                        return reject(exception);
                    }
                    resolve({ result, headers: response.headers });
                });
            });
            httpsRequest.once("socket", (socket) => {
                if (isMedia) {
                    socket.setTimeout(connectionPolicy.MediaRequestTimeout);
                }
                else {
                    socket.setTimeout(connectionPolicy.RequestTimeout);
                }
                socket.once("timeout", onTimeout);
                httpsRequest.once("response", () => {
                    socket.removeListener("timeout", onTimeout);
                });
            });
            httpsRequest.once("error", reject);
            if (body["stream"] !== null) {
                body["stream"].pipe(httpsRequest);
            }
            else if (body["buffer"] !== null) {
                httpsRequest.write(body["buffer"]);
                httpsRequest.end();
            }
            else {
                httpsRequest.end();
            }
        });
    }
    /**
     *  Constructs the error body from the response and the data returned from the request.
     * @param {object} response - response object returned from the executon of a request.
     * @param {object} data - the data body returned from the executon of a request.
     * @hidden
     */
    function getErrorBody(response, data, headers) {
        const errorBody = {
            code: response.statusCode,
            body: data,
            headers
        };
        if (Constants.HttpHeaders.ActivityId in response.headers) {
            errorBody.activityId = response.headers[Constants.HttpHeaders.ActivityId];
        }
        if (Constants.HttpHeaders.SubStatus in response.headers) {
            errorBody.substatus = parseInt(response.headers[Constants.HttpHeaders.SubStatus], 10);
        }
        if (Constants.HttpHeaders.RetryAfterInMilliseconds in response.headers) {
            errorBody.retryAfterInMilliseconds = parseInt(response.headers[Constants.HttpHeaders.RetryAfterInMilliseconds], 10);
        }
        return errorBody;
    }
    function getHeaders(authOptions, defaultHeaders, verb, path, resourceId, resourceType, options, partitionKeyRangeId, useMultipleWriteLocations) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const headers = Object.assign({}, defaultHeaders);
            const opts = (options || {}); // TODO: this is dirty
            if (useMultipleWriteLocations) {
                headers[Constants.HttpHeaders.ALLOW_MULTIPLE_WRITES] = true;
            }
            if (opts.continuation) {
                headers[Constants.HttpHeaders.Continuation] = opts.continuation;
            }
            if (opts.preTriggerInclude) {
                headers[Constants.HttpHeaders.PreTriggerInclude] =
                    opts.preTriggerInclude.constructor === Array
                        ? opts.preTriggerInclude.join(",")
                        : opts.preTriggerInclude;
            }
            if (opts.postTriggerInclude) {
                headers[Constants.HttpHeaders.PostTriggerInclude] =
                    opts.postTriggerInclude.constructor === Array
                        ? opts.postTriggerInclude.join(",")
                        : opts.postTriggerInclude;
            }
            if (opts.offerType) {
                headers[Constants.HttpHeaders.OfferType] = opts.offerType;
            }
            if (opts.offerThroughput) {
                headers[Constants.HttpHeaders.OfferThroughput] = opts.offerThroughput;
            }
            if (opts.maxItemCount) {
                headers[Constants.HttpHeaders.PageSize] = opts.maxItemCount;
            }
            if (opts.accessCondition) {
                if (opts.accessCondition.type === "IfMatch") {
                    headers[Constants.HttpHeaders.IfMatch] = opts.accessCondition.condition;
                }
                else {
                    headers[Constants.HttpHeaders.IfNoneMatch] = opts.accessCondition.condition;
                }
            }
            if (opts.a_im) {
                headers[Constants.HttpHeaders.A_IM] = opts.a_im;
            }
            if (opts.indexingDirective) {
                headers[Constants.HttpHeaders.IndexingDirective] = opts.indexingDirective;
            }
            if (opts.consistencyLevel) {
                headers[Constants.HttpHeaders.ConsistencyLevel] = opts.consistencyLevel;
            }
            if (opts.resourceTokenExpirySeconds) {
                headers[Constants.HttpHeaders.ResourceTokenExpiry] = opts.resourceTokenExpirySeconds;
            }
            if (opts.sessionToken) {
                headers[Constants.HttpHeaders.SessionToken] = opts.sessionToken;
            }
            if (opts.enableScanInQuery) {
                headers[Constants.HttpHeaders.EnableScanInQuery] = opts.enableScanInQuery;
            }
            if (opts.enableCrossPartitionQuery) {
                headers[Constants.HttpHeaders.EnableCrossPartitionQuery] = opts.enableCrossPartitionQuery;
            }
            if (opts.populateQuotaInfo) {
                headers[Constants.HttpHeaders.PopulateQuotaInfo] = opts.populateQuotaInfo;
            }
            if (opts.populateQueryMetrics) {
                headers[Constants.HttpHeaders.PopulateQueryMetrics] = opts.populateQueryMetrics;
            }
            if (opts.maxDegreeOfParallelism !== undefined) {
                headers[Constants.HttpHeaders.ParallelizeCrossPartitionQuery] = true;
            }
            if (opts.populateQuotaInfo) {
                headers[Constants.HttpHeaders.PopulateQuotaInfo] = true;
            }
            if (opts.partitionKey !== undefined) {
                let partitionKey = opts.partitionKey;
                if (partitionKey === null || !Array.isArray(partitionKey)) {
                    partitionKey = [partitionKey];
                }
                headers[Constants.HttpHeaders.PartitionKey] = Helper$$1.jsonStringifyAndEscapeNonASCII(partitionKey);
            }
            if (authOptions.masterKey || authOptions.tokenProvider) {
                headers[Constants.HttpHeaders.XDate] = new Date().toUTCString();
            }
            if (verb === "post" || verb === "put") {
                if (!headers[Constants.HttpHeaders.ContentType]) {
                    headers[Constants.HttpHeaders.ContentType] = Constants.MediaTypes.Json;
                }
            }
            if (!headers[Constants.HttpHeaders.Accept]) {
                headers[Constants.HttpHeaders.Accept] = Constants.MediaTypes.Json;
            }
            if (partitionKeyRangeId !== undefined) {
                headers[Constants.HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;
            }
            if (opts.enableScriptLogging) {
                headers[Constants.HttpHeaders.EnableScriptLogging] = opts.enableScriptLogging;
            }
            if (opts.offerEnableRUPerMinuteThroughput) {
                headers[Constants.HttpHeaders.OfferIsRUPerMinuteThroughputEnabled] = true;
            }
            if (opts.disableRUPerMinuteUsage) {
                headers[Constants.HttpHeaders.DisableRUPerMinuteUsage] = true;
            }
            if (authOptions.masterKey || authOptions.resourceTokens || authOptions.tokenProvider || authOptions.permissionFeed) {
                const token = yield AuthHandler.getAuthorizationHeader(authOptions, verb, path, resourceId, resourceType, headers);
                headers[Constants.HttpHeaders.Authorization] = token;
            }
            return headers;
        });
    }

    /** @hidden */
    class RequestHandler {
        constructor(globalEndpointManager, connectionPolicy, requestAgent) {
            this.globalEndpointManager = globalEndpointManager;
            this.connectionPolicy = connectionPolicy;
            this.requestAgent = requestAgent;
        }
        static createRequestObjectStub(connectionPolicy, requestOptions, body) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return createRequestObject(connectionPolicy, requestOptions, body);
            });
        }
        /**
         *  Creates the request object, call the passed callback when the response is retrieved.
         * @param {object} globalEndpointManager - an instance of GlobalEndpointManager class.
         * @param {object} connectionPolicy - an instance of ConnectionPolicy that has the connection configs.
         * @param {object} requestAgent - the https agent used for send request
         * @param {string} method - the http request method ( 'get', 'post', 'put', .. etc ).
         * @param {String} hostname - The base url for the endpoint.
         * @param {string} path - the path of the requesed resource.
         * @param {Object} data - the request body. It can be either string, buffer, stream or undefined.
         * @param {Object} queryParams - query parameters for the request.
         * @param {Object} headers - specific headers for the request.
         * @param {function} callback - the callback that will be called when the response is retrieved and processed.
         */
        static request(globalEndpointManager, connectionPolicy, requestAgent, method, hostname, request, data, queryParams, // TODO: any query params types
        headers) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // TODO: any
                const path = request.path === undefined ? request : request.path;
                let body; // TODO: any
                if (data) {
                    body = bodyFromData(data);
                    if (!body) {
                        return {
                            result: {
                                message: "parameter data must be a javascript object, string, Buffer, or stream"
                            },
                            headers: undefined
                        };
                    }
                }
                let buffer;
                let stream;
                if (body) {
                    if (Buffer.isBuffer(body)) {
                        buffer = body;
                    }
                    else if (body.pipe) {
                        // it is a stream
                        stream = body;
                    }
                    else if (typeof body === "string") {
                        buffer = Buffer.from(body, "utf8");
                    }
                    else {
                        return {
                            result: {
                                message: "body must be string, Buffer, or stream"
                            },
                            headers: undefined
                        };
                    }
                }
                const requestOptions = parse(hostname);
                requestOptions.method = method;
                requestOptions.path += path;
                requestOptions.headers = headers;
                requestOptions.agent = requestAgent;
                requestOptions.secureProtocol = "TLSv1_client_method"; // TODO: Should be a constant
                if (connectionPolicy.DisableSSLVerification === true) {
                    requestOptions.rejectUnauthorized = false;
                }
                if (queryParams) {
                    requestOptions.path += "?" + querystring.stringify(queryParams);
                }
                if (buffer) {
                    requestOptions.headers[Constants.HttpHeaders.ContentLength] = buffer.length;
                    return RetryUtility$$1.execute(globalEndpointManager, { buffer, stream: null }, this.createRequestObjectStub, connectionPolicy, requestOptions, request);
                }
                else if (stream) {
                    return RetryUtility$$1.execute(globalEndpointManager, { buffer: null, stream }, this.createRequestObjectStub, connectionPolicy, requestOptions, request);
                }
                else {
                    return RetryUtility$$1.execute(globalEndpointManager, { buffer: null, stream: null }, this.createRequestObjectStub, connectionPolicy, requestOptions, request);
                }
            });
        }
        /** @ignore */
        get(urlString, request, headers) {
            // TODO: any
            return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "GET", urlString, request, undefined, "", headers);
        }
        /** @ignore */
        post(urlString, request, body, headers) {
            // TODO: any
            return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "POST", urlString, request, body, "", headers);
        }
        /** @ignore */
        put(urlString, request, body, headers) {
            // TODO: any
            return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "PUT", urlString, request, body, "", headers);
        }
        /** @ignore */
        head(urlString, request, headers) {
            // TODO: any
            return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "HEAD", urlString, request, undefined, "", headers);
        }
        /** @ignore */
        delete(urlString, request, headers) {
            return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "DELETE", urlString, request, undefined, "", headers);
        }
    }

    /**
     * Models vector clock bases session token. Session token has the following format:
     * {Version}#{GlobalLSN}#{RegionId1}={LocalLsn1}#{RegionId2}={LocalLsn2}....#{RegionIdN}={LocalLsnN}
     * 'Version' captures the configuration number of the partition which returned this session token.
     * 'Version' is incremented everytime topology of the partition is updated (say due to Add/Remove/Failover).
     *
     * The choice of separators '#' and '=' is important. Separators ';' and ',' are used to delimit
     * per-partitionKeyRange session token
     * @hidden
     * @private
     *
     */
    class VectorSessionToken {
        constructor(version, globalLsn, localLsnByregion, sessionToken) {
            this.version = version;
            this.globalLsn = globalLsn;
            this.localLsnByregion = localLsnByregion;
            this.sessionToken = sessionToken;
            if (!this.sessionToken) {
                const regionAndLocalLsn = [];
                for (const [key, value] of this.localLsnByregion.entries()) {
                    regionAndLocalLsn.push(`${key}${VectorSessionToken.REGION_PROGRESS_SEPARATOR}${value}`);
                }
                const regionProgress = regionAndLocalLsn.join(VectorSessionToken.SEGMENT_SEPARATOR);
                if (regionProgress === "") {
                    this.sessionToken = `${this.version}${VectorSessionToken.SEGMENT_SEPARATOR}${this.globalLsn}`;
                }
                else {
                    this.sessionToken = `${this.version}${VectorSessionToken.SEGMENT_SEPARATOR}${this.globalLsn}${VectorSessionToken.SEGMENT_SEPARATOR}${regionProgress}`;
                }
            }
        }
        static create(sessionToken) {
            if (!sessionToken) {
                return null;
            }
            const [versionStr, globalLsnStr, ...regionSegments] = sessionToken.split(VectorSessionToken.SEGMENT_SEPARATOR);
            const version = parseInt(versionStr, 10);
            const globalLsn = parseFloat(globalLsnStr);
            if (!util.isNumber(version) || !util.isNumber(globalLsn)) {
                return null;
            }
            const lsnByRegion = new Map();
            for (const regionSegment of regionSegments) {
                const [regionIdStr, localLsnStr] = regionSegment.split(VectorSessionToken.REGION_PROGRESS_SEPARATOR);
                if (!regionIdStr || !localLsnStr) {
                    return null;
                }
                const regionId = parseInt(regionIdStr, 10);
                let localLsn;
                try {
                    localLsn = localLsnStr;
                }
                catch (err) {
                    // TODO: log error
                    return null;
                }
                if (!util.isNumber(regionId)) {
                    return null;
                }
                lsnByRegion.set(regionId, localLsn);
            }
            return new VectorSessionToken(version, globalLsn, lsnByRegion, sessionToken);
        }
        equals(other) {
            return !other
                ? false
                : this.version === other.version &&
                    this.globalLsn === other.globalLsn &&
                    this.areRegionProgressEqual(other.localLsnByregion);
        }
        merge(other) {
            if (other == null) {
                throw new Error("other (Vector Session Token) must not be null");
            }
            if (this.version === other.version && this.localLsnByregion.size !== other.localLsnByregion.size) {
                throw new Error(`Compared session tokens ${this.sessionToken} and ${other.sessionToken} have unexpected regions`);
            }
            const [higherVersionSessionToken, lowerVersionSessionToken] = this.version < other.version ? [other, this] : [this, other];
            const highestLocalLsnByRegion = new Map();
            for (const [regionId, highLocalLsn] of higherVersionSessionToken.localLsnByregion.entries()) {
                const lowLocalLsn = lowerVersionSessionToken.localLsnByregion.get(regionId);
                if (lowLocalLsn) {
                    highestLocalLsnByRegion.set(regionId, max(highLocalLsn, lowLocalLsn));
                }
                else if (this.version === other.version) {
                    throw new Error(`Compared session tokens have unexpected regions. Session 1: ${this.sessionToken} - Session 2: ${this.sessionToken}`);
                }
                else {
                    highestLocalLsnByRegion.set(regionId, highLocalLsn);
                }
            }
            return new VectorSessionToken(Math.max(this.version, other.version), Math.max(this.globalLsn, other.globalLsn), highestLocalLsnByRegion);
        }
        toString() {
            return this.sessionToken;
        }
        areRegionProgressEqual(other) {
            if (this.localLsnByregion.size !== other.size) {
                return false;
            }
            for (const [regionId, localLsn] of this.localLsnByregion.entries()) {
                const otherLocalLsn = other.get(regionId);
                if (localLsn !== otherLocalLsn) {
                    return false;
                }
            }
            return true;
        }
    }
    VectorSessionToken.SEGMENT_SEPARATOR = "#";
    VectorSessionToken.REGION_PROGRESS_SEPARATOR = "=";
    function max(int1, int2) {
        // NOTE: This only works for positive numbers
        if (int1.length === int2.length) {
            return int1 > int2 ? int1 : int2;
        }
        else if (int1.length > int2.length) {
            return int1;
        }
        else {
            return int2;
        }
    }

    /** @hidden */
    class SessionContainer {
        constructor(collectionNameToCollectionResourceId = new Map(), collectionResourceIdToSessionTokens = new Map()) {
            this.collectionNameToCollectionResourceId = collectionNameToCollectionResourceId;
            this.collectionResourceIdToSessionTokens = collectionResourceIdToSessionTokens;
        }
        get(request) {
            if (!request) {
                throw new Error("request cannot be null");
            }
            const collectionName = Helper$$1.getContainerLink(Helper$$1.trimSlashes(request.resourceAddress));
            const rangeIdToTokenMap = this.getPartitionKeyRangeIdToTokenMap(collectionName);
            return SessionContainer.getCombinedSessionTokenString(rangeIdToTokenMap);
        }
        remove(request) {
            let collectionResourceId;
            const resourceAddress = Helper$$1.trimSlashes(request.resourceAddress);
            const collectionName = Helper$$1.getContainerLink(resourceAddress);
            if (collectionName) {
                collectionResourceId = this.collectionNameToCollectionResourceId.get(collectionName);
                this.collectionNameToCollectionResourceId.delete(collectionName);
            }
            if (collectionResourceId !== undefined) {
                this.collectionResourceIdToSessionTokens.delete(collectionResourceId);
            }
        }
        set(request, resHeaders) {
            // TODO: we check the master logic a few different places. Might not need it.
            if (!resHeaders || SessionContainer.isReadingFromMaster(request.resourceType, request.operationType)) {
                return;
            }
            const sessionTokenString = resHeaders[Constants.HttpHeaders.SessionToken];
            if (!sessionTokenString) {
                return;
            }
            const containerName = this.getContainerName(request, resHeaders);
            const ownerId = !request.isNameBased
                ? request.resourceId
                : resHeaders[Constants.HttpHeaders.OwnerId] || request.resourceId;
            if (!ownerId) {
                return;
            }
            if (containerName && this.validateOwnerID(ownerId)) {
                if (!this.collectionResourceIdToSessionTokens.has(ownerId)) {
                    this.collectionResourceIdToSessionTokens.set(ownerId, new Map());
                }
                if (!this.collectionNameToCollectionResourceId.has(containerName)) {
                    this.collectionNameToCollectionResourceId.set(containerName, ownerId);
                }
                const containerSessionContainer = this.collectionResourceIdToSessionTokens.get(ownerId);
                SessionContainer.compareAndSetToken(sessionTokenString, containerSessionContainer);
            }
        }
        validateOwnerID(ownerId) {
            const ownerIdBuffer = Buffer.from(ownerId, "base64");
            // If ownerId contains exactly 8 bytes it represents a unique database+collection identifier. Otherwise it represents another resource
            // The first 4 bytes are the database. The last 4 bytes are the collection.
            if (ownerIdBuffer.length === 8) {
                return true;
            }
            return false;
        }
        getPartitionKeyRangeIdToTokenMap(collectionName) {
            let rangeIdToTokenMap = null;
            if (collectionName && this.collectionNameToCollectionResourceId.has(collectionName)) {
                rangeIdToTokenMap = this.collectionResourceIdToSessionTokens.get(this.collectionNameToCollectionResourceId.get(collectionName));
            }
            return rangeIdToTokenMap;
        }
        static getCombinedSessionTokenString(tokens) {
            if (!tokens || tokens.size === 0) {
                return SessionContainer.EMPTY_SESSION_TOKEN;
            }
            let result = "";
            for (const [range, token] of tokens.entries()) {
                result +=
                    range +
                        SessionContainer.SESSION_TOKEN_PARTITION_SPLITTER +
                        token.toString() +
                        SessionContainer.SESSION_TOKEN_SEPARATOR;
            }
            return result.slice(0, -1);
        }
        static compareAndSetToken(newTokenString, containerSessionTokens) {
            if (!newTokenString) {
                return;
            }
            const partitionsParts = newTokenString.split(SessionContainer.SESSION_TOKEN_SEPARATOR);
            for (const partitionPart of partitionsParts) {
                const newTokenParts = partitionPart.split(SessionContainer.SESSION_TOKEN_PARTITION_SPLITTER);
                if (newTokenParts.length !== 2) {
                    return;
                }
                const range = newTokenParts[0];
                const newToken = VectorSessionToken.create(newTokenParts[1]);
                const tokenForRange = !containerSessionTokens.get(range)
                    ? newToken
                    : containerSessionTokens.get(range).merge(newToken);
                containerSessionTokens.set(range, tokenForRange);
            }
        }
        // TODO: have a assert if the type doesn't mastch known types
        static isReadingFromMaster(resourceType, operationType) {
            if (resourceType === Constants.Path.OffersPathSegment ||
                resourceType === Constants.Path.DatabasesPathSegment ||
                resourceType === Constants.Path.UsersPathSegment ||
                resourceType === Constants.Path.PermissionsPathSegment ||
                resourceType === Constants.Path.TopologyPathSegment ||
                resourceType === Constants.Path.DatabaseAccountPathSegment ||
                resourceType === Constants.Path.PartitionKeyRangesPathSegment ||
                (resourceType === Constants.Path.CollectionsPathSegment && operationType === Constants.OperationTypes.Query)) {
                return true;
            }
            return false;
        }
        getContainerName(request, headers) {
            let ownerFullName = headers[Constants.HttpHeaders.OwnerFullName];
            if (!ownerFullName) {
                ownerFullName = Helper$$1.trimSlashes(request.resourceAddress);
            }
            return Helper$$1.getContainerLink(ownerFullName);
        }
    }
    SessionContainer.EMPTY_SESSION_TOKEN = "";
    SessionContainer.SESSION_TOKEN_SEPARATOR = ",";
    SessionContainer.SESSION_TOKEN_PARTITION_SPLITTER = ":";

    /**
     * @hidden
     * @ignore
     */
    class ClientContext {
        constructor(cosmosClientOptions, globalEndpointManager) {
            this.cosmosClientOptions = cosmosClientOptions;
            this.globalEndpointManager = globalEndpointManager;
            this.connectionPolicy = Helper$$1.parseConnectionPolicy(cosmosClientOptions.connectionPolicy);
            this.sessionContainer = new SessionContainer();
            this.requestHandler = new RequestHandler(globalEndpointManager, this.connectionPolicy, this.cosmosClientOptions.agent);
            this.partitionKeyDefinitionCache = {};
        }
        /** @ignore */
        read(path, type, id, initialHeaders, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const requestHeaders = yield getHeaders(this.cosmosClientOptions.auth, Object.assign({}, initialHeaders, this.cosmosClientOptions.defaultHeaders, (options && options.initialHeaders)), "get", path, id, type, options, undefined, this.cosmosClientOptions.connectionPolicy.UseMultipleWriteLocations);
                    this.applySessionToken(path, requestHeaders);
                    const request = {
                        // TODO: any
                        path,
                        operationType: Constants.OperationTypes.Read,
                        client: this,
                        endpointOverride: null
                    };
                    // read will use ReadEndpoint since it uses GET operation
                    const endpoint = yield this.globalEndpointManager.resolveServiceEndpoint(request);
                    const response = yield this.requestHandler.get(endpoint, request, requestHeaders);
                    this.captureSessionToken(undefined, path, Constants.OperationTypes.Read, response.headers);
                    return response;
                }
                catch (err) {
                    this.captureSessionToken(err, path, Constants.OperationTypes.Upsert, err.headers);
                    throw err;
                }
            });
        }
        queryFeed(path, type, // TODO: code smell: enum?
        id, resultFn, // TODO: any
        query, options, partitionKeyRangeId) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // Query operations will use ReadEndpoint even though it uses
                // GET(for queryFeed) and POST(for regular query operations)
                const request = {
                    // TODO: any request
                    path,
                    operationType: Constants.OperationTypes.Query,
                    client: this,
                    endpointOverride: null
                };
                const endpoint = yield this.globalEndpointManager.resolveServiceEndpoint(request);
                const initialHeaders = Object.assign({}, this.cosmosClientOptions.defaultHeaders, (options && options.initialHeaders));
                if (query === undefined) {
                    const reqHeaders = yield getHeaders(this.cosmosClientOptions.auth, initialHeaders, "get", path, id, type, options, partitionKeyRangeId, this.cosmosClientOptions.connectionPolicy.UseMultipleWriteLocations);
                    this.applySessionToken(path, reqHeaders);
                    const { result, headers: resHeaders } = yield this.requestHandler.get(endpoint, request, reqHeaders);
                    this.captureSessionToken(undefined, path, Constants.OperationTypes.Query, resHeaders);
                    return this.processQueryFeedResponse({ result, headers: resHeaders }, !!query, resultFn);
                }
                else {
                    initialHeaders[Constants.HttpHeaders.IsQuery] = "true";
                    switch (this.cosmosClientOptions.queryCompatibilityMode) {
                        case exports.QueryCompatibilityMode.SqlQuery:
                            initialHeaders[Constants.HttpHeaders.ContentType] = Constants.MediaTypes.SQL;
                            break;
                        case exports.QueryCompatibilityMode.Query:
                        case exports.QueryCompatibilityMode.Default:
                        default:
                            if (typeof query === "string") {
                                query = { query }; // Converts query text to query object.
                            }
                            initialHeaders[Constants.HttpHeaders.ContentType] = Constants.MediaTypes.QueryJson;
                            break;
                    }
                    const reqHeaders = yield getHeaders(this.cosmosClientOptions.auth, initialHeaders, "post", path, id, type, options, partitionKeyRangeId, this.cosmosClientOptions.connectionPolicy.UseMultipleWriteLocations);
                    this.applySessionToken(path, reqHeaders);
                    const response = yield this.requestHandler.post(endpoint, request, query, reqHeaders);
                    const { result, headers: resHeaders } = response;
                    this.captureSessionToken(undefined, path, Constants.OperationTypes.Query, resHeaders);
                    return this.processQueryFeedResponse({ result, headers: resHeaders }, !!query, resultFn);
                }
            });
        }
        queryPartitionKeyRanges(collectionLink, query, options) {
            const path = Helper$$1.getPathFromLink(collectionLink, "pkranges");
            const id = Helper$$1.getIdFromLink(collectionLink);
            const cb = innerOptions => {
                return this.queryFeed(path, "pkranges", id, result => result.PartitionKeyRanges, query, innerOptions);
            };
            return new QueryIterator(this, query, options, cb);
        }
        delete(path, type, id, initialHeaders, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const reqHeaders = yield getHeaders(this.cosmosClientOptions.auth, Object.assign({}, initialHeaders, this.cosmosClientOptions.defaultHeaders, (options && options.initialHeaders)), "delete", path, id, type, options, undefined, this.cosmosClientOptions.connectionPolicy.UseMultipleWriteLocations);
                    const request = {
                        client: this,
                        operationType: Constants.OperationTypes.Delete,
                        path,
                        resourceType: type
                    };
                    this.applySessionToken(path, reqHeaders);
                    // deleteResource will use WriteEndpoint since it uses DELETE operation
                    const endpoint = yield this.globalEndpointManager.resolveServiceEndpoint(request);
                    const response = yield this.requestHandler.delete(endpoint, request, reqHeaders);
                    if (Helper$$1.parseLink(path).type !== "colls") {
                        this.captureSessionToken(undefined, path, Constants.OperationTypes.Delete, response.headers);
                    }
                    else {
                        this.clearSessionToken(path);
                    }
                    return response;
                }
                catch (err) {
                    this.captureSessionToken(err, path, Constants.OperationTypes.Upsert, err.headers);
                    throw err;
                }
            });
        }
        create(body, path, type, id, initialHeaders, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const requestHeaders = yield getHeaders(this.cosmosClientOptions.auth, Object.assign({}, initialHeaders, this.cosmosClientOptions.defaultHeaders, (options && options.initialHeaders)), "post", path, id, type, options, undefined, this.cosmosClientOptions.connectionPolicy.UseMultipleWriteLocations);
                    const request = {
                        client: this,
                        operationType: Constants.OperationTypes.Create,
                        path,
                        resourceType: type
                    };
                    // create will use WriteEndpoint since it uses POST operation
                    this.applySessionToken(path, requestHeaders);
                    const endpoint = yield this.globalEndpointManager.resolveServiceEndpoint(request);
                    const response = yield this.requestHandler.post(endpoint, request, body, requestHeaders);
                    this.captureSessionToken(undefined, path, Constants.OperationTypes.Create, response.headers);
                    return response;
                }
                catch (err) {
                    this.captureSessionToken(err, path, Constants.OperationTypes.Upsert, err.headers);
                    throw err;
                }
            });
        }
        processQueryFeedResponse(res, isQuery, resultFn) {
            if (isQuery) {
                return { result: resultFn(res.result), headers: res.headers };
            }
            else {
                const newResult = resultFn(res.result).map((body) => body);
                return { result: newResult, headers: res.headers };
            }
        }
        applySessionToken(path, reqHeaders) {
            const request = this.getSessionParams(path);
            if (reqHeaders && reqHeaders[Constants.HttpHeaders.SessionToken]) {
                return;
            }
            const sessionConsistency = reqHeaders[Constants.HttpHeaders.ConsistencyLevel];
            if (!sessionConsistency) {
                return;
            }
            if (sessionConsistency !== exports.ConsistencyLevel.Session) {
                return;
            }
            if (request.resourceAddress) {
                const sessionToken = this.sessionContainer.get(request);
                if (sessionToken) {
                    reqHeaders[Constants.HttpHeaders.SessionToken] = sessionToken;
                }
            }
        }
        replace(resource, path, type, id, initialHeaders, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const reqHeaders = yield getHeaders(this.cosmosClientOptions.auth, Object.assign({}, initialHeaders, this.cosmosClientOptions.defaultHeaders, (options && options.initialHeaders)), "put", path, id, type, options, undefined, this.cosmosClientOptions.connectionPolicy.UseMultipleWriteLocations);
                    const request = {
                        client: this,
                        operationType: Constants.OperationTypes.Replace,
                        path,
                        resourceType: type
                    };
                    this.applySessionToken(path, reqHeaders);
                    // replace will use WriteEndpoint since it uses PUT operation
                    const endpoint = yield this.globalEndpointManager.resolveServiceEndpoint(reqHeaders);
                    const response = yield this.requestHandler.put(endpoint, request, resource, reqHeaders);
                    this.captureSessionToken(undefined, path, Constants.OperationTypes.Replace, response.headers);
                    return response;
                }
                catch (err) {
                    this.captureSessionToken(err, path, Constants.OperationTypes.Upsert, err.headers);
                    throw err;
                }
            });
        }
        upsert(body, path, type, id, initialHeaders, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const requestHeaders = yield getHeaders(this.cosmosClientOptions.auth, Object.assign({}, initialHeaders, this.cosmosClientOptions.defaultHeaders, (options && options.initialHeaders)), "post", path, id, type, options, undefined, this.cosmosClientOptions.connectionPolicy.UseMultipleWriteLocations);
                    const request = {
                        client: this,
                        operationType: Constants.OperationTypes.Upsert,
                        path,
                        resourceType: type
                    };
                    Helper$$1.setIsUpsertHeader(requestHeaders);
                    this.applySessionToken(path, requestHeaders);
                    // upsert will use WriteEndpoint since it uses POST operation
                    const endpoint = yield this.globalEndpointManager.resolveServiceEndpoint(request);
                    const response = yield this.requestHandler.post(endpoint, request, body, requestHeaders);
                    this.captureSessionToken(undefined, path, Constants.OperationTypes.Upsert, response.headers);
                    return response;
                }
                catch (err) {
                    this.captureSessionToken(err, path, Constants.OperationTypes.Upsert, err.headers);
                    throw err;
                }
            });
        }
        execute(sprocLink, params, // TODO: any
        options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const initialHeaders = Object.assign({}, this.cosmosClientOptions.defaultHeaders, (options && options.initialHeaders));
                // Accept a single parameter or an array of parameters.
                // Didn't add type annotation for this because we should legacy this behavior
                if (params !== null && params !== undefined && !Array.isArray(params)) {
                    params = [params];
                }
                const path = Helper$$1.getPathFromLink(sprocLink);
                const id = Helper$$1.getIdFromLink(sprocLink);
                const headers = yield getHeaders(this.cosmosClientOptions.auth, initialHeaders, "post", path, id, "sprocs", options, undefined, this.cosmosClientOptions.connectionPolicy.UseMultipleWriteLocations);
                const request = {
                    client: this,
                    operationType: Constants.OperationTypes.Execute,
                    path,
                    resourceType: "sprocs"
                };
                // executeStoredProcedure will use WriteEndpoint since it uses POST operation
                const endpoint = yield this.globalEndpointManager.resolveServiceEndpoint(request);
                return this.requestHandler.post(endpoint, request, params, headers);
            });
        }
        /**
         * Gets the Database account information.
         * @param {string} [options.urlConnection]   - The endpoint url whose database account needs to be retrieved. \
         * If not present, current client's url will be used.
         */
        getDatabaseAccount(options = {}) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const urlConnection = options.urlConnection || this.cosmosClientOptions.endpoint;
                const requestHeaders = yield getHeaders(this.cosmosClientOptions.auth, this.cosmosClientOptions.defaultHeaders, "get", "", "", "", {}, undefined, this.cosmosClientOptions.connectionPolicy.UseMultipleWriteLocations);
                const request = {
                    client: this,
                    operationType: Constants.OperationTypes.Read,
                    path: "",
                    resourceType: "DatabaseAccount"
                };
                const { result, headers } = yield this.requestHandler.get(urlConnection, request, requestHeaders);
                const databaseAccount = new DatabaseAccount$$1(result, headers);
                return { result: databaseAccount, headers };
            });
        }
        getWriteEndpoint() {
            return this.globalEndpointManager.getWriteEndpoint();
        }
        getReadEndpoint() {
            return this.globalEndpointManager.getReadEndpoint();
        }
        captureSessionToken(err, path, opType, resHeaders) {
            const request = this.getSessionParams(path); // TODO: any request
            request.operationType = opType;
            if (!err ||
                (!this.isMasterResource(request.resourceType) &&
                    (err.code === StatusCodes.PreconditionFailed ||
                        err.code === StatusCodes.Conflict ||
                        (err.code === StatusCodes.NotFound && err.substatus !== SubStatusCodes.ReadSessionNotAvailable)))) {
                this.sessionContainer.set(request, resHeaders);
            }
        }
        // TODO: some session tests are using this, but I made them use type coercsion to call this method because I don't think it should be public.
        getSessionToken(collectionLink) {
            if (!collectionLink) {
                throw new Error("collectionLink cannot be null");
            }
            const paths = Helper$$1.parseLink(collectionLink);
            if (paths === undefined) {
                return "";
            }
            const request = this.getSessionParams(collectionLink);
            return this.sessionContainer.get(request);
        }
        clearSessionToken(path) {
            const request = this.getSessionParams(path);
            this.sessionContainer.remove(request);
        }
        getSessionParams(resourceLink) {
            const resourceId = null;
            let resourceAddress = null;
            const parserOutput = Helper$$1.parseLink(resourceLink);
            resourceAddress = parserOutput.objectBody.self;
            const resourceType = parserOutput.type;
            return {
                resourceId,
                resourceAddress,
                resourceType,
                isNameBased: true
            };
        }
        isMasterResource(resourceType) {
            if (resourceType === Constants.Path.OffersPathSegment ||
                resourceType === Constants.Path.DatabasesPathSegment ||
                resourceType === Constants.Path.UsersPathSegment ||
                resourceType === Constants.Path.PermissionsPathSegment ||
                resourceType === Constants.Path.TopologyPathSegment ||
                resourceType === Constants.Path.DatabaseAccountPathSegment ||
                resourceType === Constants.Path.PartitionKeyRangesPathSegment ||
                resourceType === Constants.Path.CollectionsPathSegment) {
                return true;
            }
            return false;
        }
    }

    /**
     * Used to store the location info in Location Cache
     * @private
     * @hidden
     */
    class LocationInfo {
        constructor(preferredLocationsOrOtherLocationInfo, defaultEndpoint) {
            let preferredLocations = null;
            let other = null;
            if (Array.isArray(preferredLocationsOrOtherLocationInfo)) {
                preferredLocations = preferredLocationsOrOtherLocationInfo;
            }
            else if (preferredLocationsOrOtherLocationInfo instanceof LocationInfo) {
                other = preferredLocationsOrOtherLocationInfo;
            }
            else {
                throw new Error("Invalid type passed to LocationInfo");
            }
            if (preferredLocations && defaultEndpoint) {
                this.preferredLocations = preferredLocations;
                this.availableWriteEndpointByLocation = new Map();
                this.availableReadEndpointByLocation = new Map();
                this.orderedWriteLocations = [];
                this.orderedReadLocations = [];
                this.writeEndpoints = [defaultEndpoint];
                this.readEndpoints = [defaultEndpoint];
            }
            else if (other) {
                this.preferredLocations = other.preferredLocations;
                this.availableReadEndpointByLocation = other.availableReadEndpointByLocation;
                this.availableWriteEndpointByLocation = other.availableWriteEndpointByLocation;
                this.orderedReadLocations = other.orderedReadLocations;
                this.orderedWriteLocations = other.orderedWriteLocations;
                this.writeEndpoints = other.writeEndpoints;
                this.readEndpoints = other.readEndpoints;
            }
            else {
                // This should never be called
                throw new Error("Invalid arguments passed to LocationInfo");
            }
        }
    }

    /**
     * @private
     * @hidden
     */
    var EndpointOperationType;
    (function (EndpointOperationType) {
        EndpointOperationType["None"] = "None";
        EndpointOperationType["Read"] = "Read";
        EndpointOperationType["Write"] = "Write";
    })(EndpointOperationType || (EndpointOperationType = {}));
    /**
     * Implements the abstraction to resolve target location for geo-replicated Database Account
     * with multiple writable and readable locations.
     * @private
     * @hidden
     */
    class LocationCache {
        constructor(options) {
            this.options = options;
            this.locationUnavailabilityInfoByEndpoint = new Map();
            this.lastCacheUpdateTimestamp = new Date(0);
            this.defaultEndpoint = options.endpoint;
            this.locationInfo = new LocationInfo(options.connectionPolicy.PreferredLocations, options.endpoint);
        }
        get prefferredLocations() {
            return this.options.connectionPolicy.PreferredLocations;
        }
        getWriteEndpoint() {
            return this.getWriteEndpoints()[0];
        }
        getReadEndpoint() {
            return this.getReadEndpoints()[0];
        }
        /**
         * Gets list of write endpoints ordered by
         * 1. Preferred location
         * 2. Endpoint availability
         */
        getWriteEndpoints() {
            if (this.locationUnavailabilityInfoByEndpoint.size > 0 && this.canUpdateCache(this.lastCacheUpdateTimestamp)) {
                this.updateLocationCache();
            }
            return this.locationInfo.writeEndpoints;
        }
        /**
         * Gets list of read endpoints ordered by
         * 1. Preferred location
         * 2. Endpoint availability
         */
        getReadEndpoints() {
            if (this.locationUnavailabilityInfoByEndpoint.size > 0 && this.canUpdateCache(this.lastCacheUpdateTimestamp)) {
                this.updateLocationCache();
            }
            return this.locationInfo.readEndpoints;
        }
        markCurrentLocationUnavailableForRead(endpoint) {
            this.markEndpointUnavailable(endpoint, EndpointOperationType.Read);
        }
        markCurrentLocationUnavailableForWrite(endpoint) {
            this.markEndpointUnavailable(endpoint, EndpointOperationType.Write);
        }
        /**
         * Invoked when {@link DatabaseAccount} is read
         * @param databaseAccount The DatabaseAccount read
         */
        onDatabaseAccountRead(databaseAccount) {
            this.updateLocationCache(databaseAccount.writableLocations, databaseAccount.readableLocations, databaseAccount.enableMultipleWritableLocations);
        }
        resolveServiceEndpoint(request) {
            request.locationRouting = request.locationRouting || new LocationRouting();
            let locationIndex = request.locationRouting.locationIndexToRoute || 0;
            if (!this.options.connectionPolicy.EnableEndpointDiscovery) {
                return this.defaultEndpoint;
            }
            if (request.locationRouting.locationEndpointToRoute) {
                return request.locationRouting.locationEndpointToRoute;
            }
            // If we're ignoring preferred locations, or if it's a write request that can't use multiple locations
            // then default to the first two write locations, alternating (or the default endpoint)
            if (request.locationRouting.ignorePreferredLocation ||
                (!Helper$$1.isReadRequest(request) && !this.canUseMultipleWriteLocations(request))) {
                const currentInfo = this.locationInfo;
                if (currentInfo.orderedWriteLocations.length > 0) {
                    locationIndex = Math.min(locationIndex % 2, currentInfo.orderedWriteLocations.length - 1);
                    const writeLocation = currentInfo.orderedWriteLocations[locationIndex];
                    return currentInfo.availableWriteEndpointByLocation.get(LocationCache.normalizeLocationName(writeLocation));
                }
                else {
                    return this.defaultEndpoint;
                }
            }
            else {
                // If we're using preferred regions, then choose the correct endpoint based on the location index
                const endpoints = Helper$$1.isReadRequest(request)
                    ? this.locationInfo.readEndpoints
                    : this.locationInfo.writeEndpoints;
                return endpoints[locationIndex % endpoints.length];
            }
        }
        shouldRefreshEndpoints() {
            let canRefreshInBackground = true;
            const currentInfo = this.locationInfo;
            const mostPreferredLocation = LocationCache.normalizeLocationName(currentInfo.preferredLocations ? currentInfo.preferredLocations[0] : null);
            if (this.options.connectionPolicy.EnableEndpointDiscovery) {
                // Refresh if client opts-in to use multiple write locations, but it's not enabled on the server.
                const shouldRefresh = this.options.connectionPolicy.UseMultipleWriteLocations && !this.enableMultipleWritableLocations;
                if (mostPreferredLocation) {
                    if (currentInfo.availableReadEndpointByLocation.size > 0) {
                        const mostPreferredReadEndpoint = currentInfo.availableReadEndpointByLocation.get(mostPreferredLocation);
                        if (mostPreferredReadEndpoint) {
                            if (mostPreferredReadEndpoint !== currentInfo.readEndpoints[0]) {
                                return { shouldRefresh: true, canRefreshInBackground };
                            }
                        }
                        else {
                            return { shouldRefresh: true, canRefreshInBackground };
                        }
                    }
                    if (!this.canUseMultipleWriteLocations()) {
                        if (this.isEndpointUnavailable(currentInfo.writeEndpoints[0], EndpointOperationType.Write)) {
                            canRefreshInBackground = currentInfo.writeEndpoints.length > 1;
                            return { shouldRefresh: true, canRefreshInBackground };
                        }
                        else {
                            return { shouldRefresh, canRefreshInBackground };
                        }
                    }
                    else if (mostPreferredLocation) {
                        const mostPreferredWriteEndpoint = currentInfo.availableWriteEndpointByLocation.get(mostPreferredLocation);
                        if (mostPreferredWriteEndpoint) {
                            return {
                                shouldRefresh: shouldRefresh || mostPreferredWriteEndpoint !== currentInfo.writeEndpoints[0],
                                canRefreshInBackground
                            };
                        }
                        else {
                            return { shouldRefresh, canRefreshInBackground };
                        }
                    }
                }
            }
            return { shouldRefresh: false, canRefreshInBackground };
        }
        canUseMultipleWriteLocations(request) {
            let canUse = this.options.connectionPolicy.UseMultipleWriteLocations && this.enableMultipleWritableLocations;
            if (request) {
                canUse =
                    canUse &&
                        (request.resourceType === ResourceType.item ||
                            (request.resourceType === ResourceType.sproc && request.operationType === Constants.OperationTypes.Execute));
            }
            return canUse;
        }
        clearStaleEndpointUnavailabilityInfo() {
            if (this.locationUnavailabilityInfoByEndpoint.size > 0) {
                for (const [endpoint, info] of this.locationUnavailabilityInfoByEndpoint.entries()) {
                    if (info && this.canUpdateCache(info.lastUnavailablityCheckTimeStamp)) {
                        this.locationUnavailabilityInfoByEndpoint.delete(endpoint);
                    }
                }
            }
        }
        isEndpointUnavailable(endpoint, expectedAvailableOperations) {
            const unavailabilityInfo = this.locationUnavailabilityInfoByEndpoint.get(endpoint);
            if (expectedAvailableOperations === EndpointOperationType.None ||
                unavailabilityInfo == null ||
                !unavailabilityInfo.operationTypes.has(expectedAvailableOperations)) {
                return false;
            }
            else {
                if (this.canUpdateCache(unavailabilityInfo.lastUnavailablityCheckTimeStamp)) {
                    return false;
                }
                else {
                    return true;
                }
            }
        }
        markEndpointUnavailable(unavailableEndpoint, unavailableOperationType) {
            const unavailabilityInfo = this.locationUnavailabilityInfoByEndpoint.get(unavailableEndpoint);
            const now = new Date(Date.now());
            if (unavailabilityInfo == null) {
                this.locationUnavailabilityInfoByEndpoint.set(unavailableEndpoint, {
                    lastUnavailablityCheckTimeStamp: now,
                    operationTypes: new Set([unavailableOperationType])
                });
            }
            else {
                const unavailableOperations = new Set([unavailableOperationType]);
                for (const op of unavailabilityInfo.operationTypes) {
                    unavailableOperations.add(op);
                }
                this.locationUnavailabilityInfoByEndpoint.set(unavailableEndpoint, {
                    lastUnavailablityCheckTimeStamp: now,
                    operationTypes: unavailableOperations
                });
            }
            this.updateLocationCache();
        }
        updateLocationCache(writeLocations, readLocations, enableMultipleWritableLocations) {
            if (enableMultipleWritableLocations) {
                this.enableMultipleWritableLocations = enableMultipleWritableLocations;
            }
            this.clearStaleEndpointUnavailabilityInfo();
            // TODO: To sstay consistent with .NET, grab a local copy of the locationInfo
            if (this.options.connectionPolicy.EnableEndpointDiscovery) {
                if (readLocations) {
                    ({
                        endpointsByLocation: this.locationInfo.availableReadEndpointByLocation,
                        orderedLocations: this.locationInfo.orderedReadLocations
                    } = this.getEndpointByLocation(readLocations));
                }
                if (writeLocations) {
                    ({
                        endpointsByLocation: this.locationInfo.availableWriteEndpointByLocation,
                        orderedLocations: this.locationInfo.orderedWriteLocations
                    } = this.getEndpointByLocation(writeLocations));
                }
            }
            this.locationInfo.writeEndpoints = this.getPreferredAvailableEndpoints(this.locationInfo.availableWriteEndpointByLocation, this.locationInfo.orderedWriteLocations, EndpointOperationType.Write, this.defaultEndpoint);
            this.locationInfo.readEndpoints = this.getPreferredAvailableEndpoints(this.locationInfo.availableReadEndpointByLocation, this.locationInfo.orderedReadLocations, EndpointOperationType.Read, this.defaultEndpoint);
            this.lastCacheUpdateTimestamp = new Date();
        }
        getPreferredAvailableEndpoints(endpointsByLocation, orderedLocations, expectedAvailableOperation, fallbackEndpoint) {
            const endpoints = [];
            if (this.options.connectionPolicy.EnableEndpointDiscovery && endpointsByLocation && endpointsByLocation.size > 0) {
                if (this.canUseMultipleWriteLocations() || expectedAvailableOperation === EndpointOperationType.Read) {
                    if (this.options.connectionPolicy.PreferredLocations) {
                        for (const location of this.options.connectionPolicy.PreferredLocations) {
                            const endpoint = endpointsByLocation.get(LocationCache.normalizeLocationName(location));
                            if (endpoint) {
                                if (this.isEndpointUnavailable(endpoint, expectedAvailableOperation)) ;
                                else {
                                    endpoints.push(endpoint);
                                }
                            }
                        }
                    }
                    if (endpoints.length === 0) {
                        endpoints.push(fallbackEndpoint);
                    }
                }
                else {
                    for (const location of orderedLocations) {
                        const normalizedLocationName = LocationCache.normalizeLocationName(location);
                        if (endpointsByLocation.has(normalizedLocationName)) {
                            endpoints.push(endpointsByLocation.get(normalizedLocationName));
                        }
                    }
                }
            }
            if (endpoints.length === 0) {
                endpoints.push(fallbackEndpoint);
            }
            return endpoints;
        }
        getEndpointByLocation(locations) {
            const endpointsByLocation = new Map();
            const orderedLocations = [];
            for (const location of locations) {
                if (!location) {
                    continue;
                }
                const normalizedLocationName = LocationCache.normalizeLocationName(location.name);
                endpointsByLocation.set(normalizedLocationName, location.databaseAccountEndpoint);
                orderedLocations.push(normalizedLocationName);
            }
            return { endpointsByLocation, orderedLocations };
        }
        canUpdateCache(timestamp) {
            return new Date(Date.now() - Constants.DefaultUnavailableLocationExpirationTimeMS) > timestamp;
        }
        static normalizeLocationName(location) {
            return location ? location.toLowerCase().replace(/ /g, "") : null;
        }
    }

    /**
     * @hidden
     * This internal class implements the logic for endpoint management for geo-replicated database accounts.
     * @property {object} client                       - The document client instance.
     * @property {string} defaultEndpoint              - The endpoint used to create the client instance.
     * @property {bool} enableEndpointDiscovery        - Flag to enable/disable automatic redirecting of requests
     *                                                   based on read/write operations.
     * @property {Array} preferredLocations            - List of azure regions to be used as preferred locations
     *                                                   for read requests.
     * @property {bool} isEndpointCacheInitialized     - Flag to determine whether the endpoint cache is initialized or not.
     */
    class GlobalEndpointManager {
        /**
         * @constructor GlobalEndpointManager
         * @param {object} options                          - The document client instance.
         */
        constructor(options, readDatabaseAccount) {
            this.readDatabaseAccount = readDatabaseAccount;
            this.defaultEndpoint = options.endpoint;
            this.enableEndpointDiscovery = options.connectionPolicy.EnableEndpointDiscovery;
            this.isEndpointCacheInitialized = false;
            this.locationCache = new LocationCache(options);
            this.isRefreshing = false;
            this.backgroundRefreshTimeIntervalInMS = Constants.DefaultUnavailableLocationExpirationTimeMS;
        }
        /**
         * Gets the current read endpoint from the endpoint cache.
         */
        getReadEndpoint() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!this.isEndpointCacheInitialized) {
                    yield this.refreshEndpointList();
                }
                return this.locationCache.getReadEndpoint();
            });
        }
        /**
         * Gets the current write endpoint from the endpoint cache.
         */
        getWriteEndpoint() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!this.isEndpointCacheInitialized) {
                    yield this.refreshEndpointList();
                }
                return this.locationCache.getWriteEndpoint();
            });
        }
        getReadEndpoints() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!this.isEndpointCacheInitialized) {
                    yield this.refreshEndpointList();
                }
                return this.locationCache.getReadEndpoints();
            });
        }
        getWriteEndpoints() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!this.isEndpointCacheInitialized) {
                    yield this.refreshEndpointList();
                }
                return this.locationCache.getWriteEndpoints();
            });
        }
        markCurrentLocationUnavailableForRead(endpoint) {
            this.locationCache.markCurrentLocationUnavailableForRead(endpoint);
        }
        markCurrentLocationUnavailableForWrite(endpoint) {
            this.locationCache.markCurrentLocationUnavailableForWrite(endpoint);
        }
        canUseMultipleWriteLocations(request) {
            return this.locationCache.canUseMultipleWriteLocations(request);
        }
        resolveServiceEndpoint(request) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!this.isEndpointCacheInitialized) {
                    yield this.refreshEndpointList();
                }
                return this.locationCache.resolveServiceEndpoint(request);
            });
        }
        /**
         * Refreshes the endpoint list by retrieving the writable and readable locations
         *  from the geo-replicated database account and then updating the locations cache.
         *   We skip the refreshing if EnableEndpointDiscovery is set to False
         */
        refreshEndpointList() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!this.isRefreshing) {
                    this.isRefreshing = true;
                    let shouldRefresh = false;
                    const databaseAccount = yield this.getDatabaseAccountFromAnyEndpoint();
                    if (databaseAccount) {
                        this.locationCache.onDatabaseAccountRead(databaseAccount);
                    }
                    ({ shouldRefresh } = this.locationCache.shouldRefreshEndpoints());
                    if (shouldRefresh) {
                        this.backgroundRefresh();
                        return;
                    }
                    else {
                        this.isRefreshing = false;
                        this.isEndpointCacheInitialized = true;
                    }
                }
            });
        }
        backgroundRefresh() {
            process.nextTick(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
                this.isRefreshing = true;
                let shouldRefresh = false;
                try {
                    do {
                        const databaseAccount = yield this.getDatabaseAccountFromAnyEndpoint();
                        if (databaseAccount) {
                            this.locationCache.onDatabaseAccountRead(databaseAccount);
                        }
                        ({ shouldRefresh } = this.locationCache.shouldRefreshEndpoints());
                        if (!shouldRefresh) {
                            break;
                        }
                        yield Helper$$1.sleep(this.backgroundRefreshTimeIntervalInMS);
                    } while (shouldRefresh);
                }
                catch (err) {
                    /* swallow error */
                    // TODO: Tracing
                }
                this.isRefreshing = false;
                this.isEndpointCacheInitialized = true;
            }));
        }
        /**
         * Gets the database account first by using the default endpoint, and if that doesn't returns
         * use the endpoints for the preferred locations in the order they are specified to get
         * the database account.
         * @memberof GlobalEndpointManager
         * @instance
         * @param {function} callback        - The callback function which takes databaseAccount(object) as an argument.
         */
        getDatabaseAccountFromAnyEndpoint() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const options = { urlConnection: this.defaultEndpoint };
                    const { body: databaseAccount } = yield this.readDatabaseAccount(options);
                    return databaseAccount;
                    // If for any reason(non - globaldb related), we are not able to get the database
                    // account from the above call to readDatabaseAccount,
                    // we would try to get this information from any of the preferred locations that the user
                    // might have specified (by creating a locational endpoint)
                    // and keeping eating the exception until we get the database account and return None at the end,
                    // if we are not able to get that info from any endpoints
                }
                catch (err) {
                    // TODO: Tracing
                }
                if (this.locationCache.prefferredLocations) {
                    for (const location of this.locationCache.prefferredLocations) {
                        try {
                            const locationalEndpoint = GlobalEndpointManager.getLocationalEndpoint(this.defaultEndpoint, location);
                            const options = { urlConnection: locationalEndpoint };
                            const { body: databaseAccount } = yield this.readDatabaseAccount(options);
                            if (databaseAccount) {
                                return databaseAccount;
                            }
                        }
                        catch (err) {
                            // TODO: Tracing
                        }
                    }
                }
            });
        }
        /**
         * Gets the locational endpoint using the location name passed to it using the default endpoint.
         * @memberof GlobalEndpointManager
         * @instance
         * @param {string} defaultEndpoint - The default endpoint to use for the endpoint.
         * @param {string} locationName    - The location name for the azure region like "East US".
         */
        static getLocationalEndpoint(defaultEndpoint, locationName) {
            // For defaultEndpoint like 'https://contoso.documents.azure.com:443/' parse it to generate URL format
            // This defaultEndpoint should be global endpoint(and cannot be a locational endpoint)
            // and we agreed to document that
            const endpointUrl = url.parse(defaultEndpoint, true, true);
            // hostname attribute in endpointUrl will return 'contoso.documents.azure.com'
            if (endpointUrl.hostname) {
                const hostnameParts = endpointUrl.hostname
                    .toString()
                    .toLowerCase()
                    .split(".");
                if (hostnameParts) {
                    // globalDatabaseAccountName will return 'contoso'
                    const globalDatabaseAccountName = hostnameParts[0];
                    // Prepare the locationalDatabaseAccountName as contoso-EastUS for location_name 'East US'
                    const locationalDatabaseAccountName = globalDatabaseAccountName + "-" + locationName.replace(" ", "");
                    // Replace 'contoso' with 'contoso-EastUS' and
                    // return locationalEndpoint as https://contoso-EastUS.documents.azure.com:443/
                    const locationalEndpoint = defaultEndpoint
                        .toLowerCase()
                        .replace(globalDatabaseAccountName, locationalDatabaseAccountName);
                    return locationalEndpoint;
                }
            }
            return null;
        }
    }

    /**
     * Provides a client-side logical representation of the Azure Cosmos DB database account.
     * This client is used to configure and execute requests in the Azure Cosmos DB database service.
     * @example Instantiate a client and create a new database
     * ```typescript
     * const client = new CosmosClient({endpoint: "<URL HERE>", auth: {masterKey: "<KEY HERE>"}});
     * await client.databases.create({id: "<datbase name here>"});
     * ```
     * @example Instantiate a client with custom Connection Policy
     * ```typescript
     * const connectionPolicy = new ConnectionPolicy();
     * connectionPolicy.RequestTimeout = 10000;
     * const client = new CosmosClient({
     *    endpoint: "<URL HERE>",
     *    auth: {masterKey: "<KEY HERE>"},
     *    connectionPolicy
     * });
     * ```
     */
    class CosmosClient {
        constructor(options) {
            this.options = options;
            options.auth = options.auth || {};
            options.connectionPolicy = Helper$$1.parseConnectionPolicy(options.connectionPolicy);
            options.defaultHeaders = options.defaultHeaders || {};
            options.defaultHeaders[Constants.HttpHeaders.CacheControl] = "no-cache";
            options.defaultHeaders[Constants.HttpHeaders.Version] = Constants.CurrentVersion;
            if (options.consistencyLevel !== undefined) {
                options.defaultHeaders[Constants.HttpHeaders.ConsistencyLevel] = options.consistencyLevel;
            }
            const platformDefaultHeaders = Platform$$1.getPlatformDefaultHeaders() || {};
            for (const platformDefaultHeader of Object.keys(platformDefaultHeaders)) {
                options.defaultHeaders[platformDefaultHeader] = platformDefaultHeaders[platformDefaultHeader];
            }
            options.defaultHeaders[Constants.HttpHeaders.UserAgent] = Platform$$1.getUserAgent();
            if (!this.options.agent) {
                // Initialize request agent
                const requestAgentOptions = {
                    keepAlive: true,
                    maxSockets: 256,
                    maxFreeSockets: 256
                };
                if (!!this.options.connectionPolicy.ProxyUrl) {
                    const proxyUrl = url.parse(this.options.connectionPolicy.ProxyUrl);
                    const port = parseInt(proxyUrl.port, 10);
                    requestAgentOptions.proxy = {
                        host: proxyUrl.hostname,
                        port,
                        headers: {}
                    };
                    if (!!proxyUrl.auth) {
                        requestAgentOptions.proxy.proxyAuth = proxyUrl.auth;
                    }
                    this.options.agent =
                        proxyUrl.protocol.toLowerCase() === "https:"
                            ? tunnel.httpsOverHttps(requestAgentOptions)
                            : tunnel.httpsOverHttp(requestAgentOptions); // TODO: type coersion
                }
                else {
                    this.options.agent = new https.Agent(requestAgentOptions); // TODO: Move to request?
                }
            }
            const globalEndpointManager = new GlobalEndpointManager(this.options, (opts) => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.getDatabaseAccount(opts); }));
            this.clientContext = new ClientContext(options, globalEndpointManager);
            this.databases = new Databases(this, this.clientContext);
            this.offers = new Offers(this, this.clientContext);
        }
        /**
         * Get information about the current {@link DatabaseAccount} (including which regions are supported, etc.)
         */
        getDatabaseAccount(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const response = yield this.clientContext.getDatabaseAccount(options);
                return { body: response.result, headers: response.headers, ref: this };
            });
        }
        /**
         * Gets the currently used write endpoint url. Useful for troubleshooting purposes.
         *
         * The url may contain a region suffix (e.g. "-eastus") if we're using location specific endpoints.
         */
        getWriteEndpoint() {
            return this.clientContext.getWriteEndpoint();
        }
        /**
         * Gets the currently used read endpoint. Useful for troubleshooting purposes.
         *
         * The url may contain a region suffix (e.g. "-eastus") if we're using location specific endpoints.
         */
        getReadEndpoint() {
            return this.clientContext.getReadEndpoint();
        }
        /**
         * Used for reading, updating, or deleting a existing database by id or accessing containers belonging to that database.
         *
         * This does not make a network call. Use `.read` to get info about the database after getting the {@link Database} object.
         *
         * @param id The id of the database.
         * @example Create a new container off of an existing database
         * ```typescript
         * const container = client.database("<database id>").containers.create("<container id>");
         * ```
         *
         * @example Delete an existing database
         * ```typescript
         * await client.database("<id here>").delete();
         * ```
         */
        database(id) {
            return new Database(this, id, this.clientContext);
        }
        /**
         * Used for reading, or updating a existing offer by id.
         * @param id The id of the offer.
         */
        offer(id) {
            return new Offer(this, id, this.clientContext);
        }
    }

    exports.ConnectionPolicy = ConnectionPolicy$$1;
    exports.DatabaseAccount = DatabaseAccount$$1;
    exports.Constants = Constants;
    exports.UriFactory = UriFactory$$1;
    exports.RetryOptions = RetryOptions;
    exports.QueryIterator = QueryIterator;
    exports.CosmosClient = CosmosClient;
    exports.ClientSideMetrics = ClientSideMetrics;
    exports.QueryMetrics = QueryMetrics;
    exports.QueryMetricsConstants = QueryMetricsConstants;
    exports.QueryMetricsUtils = QueryMetricsUtils;
    exports.QueryPreparationTimes = QueryPreparationTimes;
    exports.RuntimeExecutionTimes = RuntimeExecutionTimes;
    exports.TimeSpan = TimeSpan;
    exports.Conflict = Conflict;
    exports.Conflicts = Conflicts;
    exports.Container = Container;
    exports.Containers = Containers;
    exports.Database = Database;
    exports.Databases = Databases;
    exports.Item = Item;
    exports.Items = Items;
    exports.Offer = Offer;
    exports.Offers = Offers;
    exports.Permission = Permission;
    exports.Permissions = Permissions;
    exports.StoredProcedure = StoredProcedure;
    exports.StoredProcedures = StoredProcedures;
    exports.Trigger = Trigger;
    exports.Triggers = Triggers;
    exports.User = User;
    exports.Users = Users;
    exports.UserDefinedFunction = UserDefinedFunction;
    exports.UserDefinedFunctions = UserDefinedFunctions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
